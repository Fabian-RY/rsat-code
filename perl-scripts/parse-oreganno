#!/usr/bin/perl

use strict;
use XML::LibXML;
use Getopt::Long;

=pod

=head1 NAME

parse-oreganno

=head1 DESCRIPTION

Parse ORegAnno (http://www.oreganno.org) database from a dump XML file. 
Only entries having non-deprecated ORegAnno StableID are returned.
The parser returns one output file for each of the four OReganno record type.
(TRANSCRIPTION FACTOR BINDING SITE, REGULATORY REGION, REGULATORY POLYMORPHISM, REGULATORY HAPLOTYPE)
The output format is a tab-delimited. This parser makes use of the XML::LibXML library 

=head1 AUTHORS

=item Jean Valery Turatsinze <jturatsi@scmbb.ulb.ac.be>

=item Morgane Thomas-Chollier <morgane@scmbb.ulb.ac.be>

=head1 CATEGORY

=over

=item parsers

=back

=head1 USAGE

Download the ORegAnno XML dump file at http://www.oreganno.org/oregano/Dump.jsp
    
parse-oreganno -i inputfile

=head1 OPTIONS

=over

=item B<-help>: print this help message.

=item B<-i>: Required option. The dump xml file from ORegAnno

=head1 OUTPUT FIELDS

=over

=item 1 -  ORegAnnoID

=item 2 -  recordType

=item 3 -  TFID

=item 4 -  TFname

=item 5 -  TFsource

=item 6 -  TFversion

=item 7 -  geneID

=item 8 -  geneName

=item 9 -  geneSource

=item 10 - geneVersion

=item 11 - lociName

=item 12 - speciesName

=item 13 - evidenceSubType

=item 14 - outcome

=item 15 - pubmedID

=head3 TRANSCRIPTION FACTOR BINDING SITE and REGULATORY REGION

=item 16 - sequence

=item 17 - seqWithFlank

=head3 REGULATORY POLYMORPHISM and REGULATORY HAPLOTYPE

=item 16 - referenceSequence

=item 17 - variantSequence


=back
 
=cut

my $help;
my $xmlfilename;

###############################################
GetOptions(
	"help"          => \$help,
	"i=s"           => \$xmlfilename,
	);

printHelp() if $help;



###############################################
## ORegAnno XML dump is several xml files concatenated
## First need to extract each XML subfile
open XML, "<$xmlfilename" or die "Cannot open XML file $xmlfilename:$!"; 
my $xmlCount = 1;
while (my $line = <XML>){
	
	#look for <?xml
	 if ($line =~ /^<\?xml/) {
	 	my $partFileName = $xmlfilename."_part_".$xmlCount;
	 	open NEWXML, ">$partFileName" or die "Cannot write XML file $partFileName:$!";
	 	print NEWXML $line;	
	 # look for </oreganno>
	 } elsif ($line =~ /^<\/oreganno>/) {
	 	print NEWXML $line;	
	 	close NEWXML;
	 	$xmlCount++;
	 } else {
	 	print NEWXML $line;	
	 }
}
close XML;

###############################################
## Each partial XML file is parsed individually

## print header

## Four types of tab-delimited output files are returned : one file for each record type:
## TFBS
## Regulatory polymorphism
## Regulatory haplotype
## Regulatory region

my $oreg_version = $xmlfilename;
$oreg_version =~ s/cron.saved.//;
$oreg_version =~ s/.xml//;

my $TFBS_file = "ORegAnno_TFBS_annotations_".$oreg_version.".tab";
my $polymorphism_file = "ORegAnno_regulatory_polymorphism_annotations_".$oreg_version.".tab";
my $haplotype_file = "ORegAnno_regulatory_haplotype_annotations_".$oreg_version.".tab";
my $region_file = "ORegAnno_regulatory_region_annotations_".$oreg_version.".tab";


## print headers
&printHeader($TFBS_file);
&printHeader($polymorphism_file);
&printHeader($haplotype_file);
&printHeader($region_file);

## parse XML files
for (my $i=1; $i < $xmlCount; $i++){
	my $parsedRecords = &XMLParse($xmlfilename."_part_".$i);
	
	## print records for current partial XML file
	print2Feature($parsedRecords);
	unlink($xmlfilename."_part_".$i);
}


###############################################
## SUBROUTINES
###############################################

sub printHelp{
	system "pod2text -c $0";
    exit()
}

sub XMLParse {
	my $partialXMLFile = shift;

	my %parsedRecords = ();
		
	## parse ORegAnno XML dump file
	my $parser = XML::LibXML->new();
	my $tree = $parser->parse_file($partialXMLFile);
	$tree->indexElements();
	my $root = $tree->getDocumentElement;
	my @records = $root->getElementsByTagName('record');

	foreach my $i (0..$#records) {

		my @thisParsedRecord =();
	
			# check wether the record id deprecated
			my $deprecatedID  = $records[$i]->findvalue('deprecatedByStableId');
			# if there is no deprecatedID => record is to be processed
			if ($deprecatedID eq "") {
					## get fields of interest
					my $stableID = $records[$i]->findvalue('stableId');
					my $type  = $records[$i]->findvalue('type');
					my $TFID = $records[$i]->findvalue('tfId');
					my $TFName = $records[$i]->findvalue('tfName');
					my $TFSource = $records[$i]->findvalue('tfSource');
					my $TFVersion = $records[$i]->findvalue('tfVersion');
					my $geneID = $records[$i]->findvalue('geneId');
					my $geneName = $records[$i]->findvalue('geneName');			
					my $geneSource = $records[$i]->findvalue('geneSource');
					my $geneVersion = $records[$i]->findvalue('geneVersion');
					my $lociName = $records[$i]->findvalue('lociName');
					my $speciesName  = $records[$i]->findvalue('speciesName');
					
					# evidence
					my @evidenceSet = $records[$i]->getElementsByTagName('evidenceSet');
					my $evidences;				
					my $count = 1;					
					while ($evidenceSet[0]->getElementsByTagName('evidenceSubtypeStableId')->get_node($count))  {
						my $node = $evidenceSet[0]->getElementsByTagName('evidenceSubtypeStableId')->get_node($count);
						$evidences .= $node->textContent().",";
						$count++
					}
					chop($evidences);					
									
					my $outcome = $records[$i]->findvalue('outcome');
					my $pubmedID = $records[$i]->findvalue('reference');
					
					# sequences
					if (($type eq "TRANSCRIPTION FACTOR BINDING SITE")||($type eq "REGULATORY REGION")) {
						my $sequence = $records[$i]->findvalue('sequence');
						my $seqWithFlank  = $records[$i]->findvalue('sequenceWithFlank');	
						
						@thisParsedRecord = (trim($stableID), trim($type), trim($TFID), trim($TFName), trim($TFSource), trim($TFVersion),
									trim($geneID), trim($geneName), trim($geneSource), trim($geneVersion),trim($lociName), trim($speciesName), 
									trim($evidences), trim($outcome), trim($pubmedID),   trim($sequence), trim($seqWithFlank));
						$parsedRecords{$stableID} = \@thisParsedRecord;
					
					} elsif (($type eq "REGULATORY POLYMORPHISM")||($type eq "REGULATORY HAPLOTYPE")) {	
						
						# variant sequences
						my @variationSet = $records[$i]->getElementsByTagName('variationSet');
						my $refsequences;
						my $varsequences;
						
						my $count = 1;					
						while ($variationSet[0]->getElementsByTagName('referenceSequence')->get_node($count))  {
							my $node = $variationSet[0]->getElementsByTagName('referenceSequence')->get_node($count);
							$refsequences .= $node->textContent().",";
							$count++
						}						
						$count = 1;					
						while ($variationSet[0]->getElementsByTagName('variantSequence')->get_node($count))  {
							my $node = $variationSet[0]->getElementsByTagName('variantSequence')->get_node($count);
							$varsequences .= $node->textContent().",";
							$count++
						}
						chop($refsequences);
						chop($varsequences);
						
						# trim whitespaces: strip blank space from the beginning/end of each string		
						@thisParsedRecord = (trim($stableID), trim($type), trim($TFID), trim($TFName), trim($TFSource), trim($TFVersion),
									trim($geneID), trim($geneName), trim($geneSource), trim($geneVersion),trim($lociName), trim($speciesName), 
									trim($evidences), trim($outcome), trim($pubmedID),  trim($refsequences), trim($varsequences));
									
									if ($stableID eq "OREG0000103"){
										print "lociName:".$lociName.":\n";
							print join(",",@thisParsedRecord)."\n";
						}	
						$parsedRecords{$stableID} = \@thisParsedRecord;
					}
					
				}			
			}
	
	return (\%parsedRecords);
}

sub printHeader{
	
	my $outFile = shift;
	open OUT, ">$outFile" or die "Cannot write to output file $outFile:$!"; 
	
	if (($outFile eq $TFBS_file)||($outFile eq $region_file)){
		# header line
		my $header = "#ORegAnnoID\trecordType\tTFID\tTFname\tTFsource\tTFversion\t".
				"geneID\tgeneName\tgeneSource\tgeneVersion\tlociName\tspeciesName\tevidenceSubType\toutcome\tpubmedID\t".
				"sequence\tseqWithFlank\n";
		#print
		if ($outFile){
			print OUT "; Column names:\n".
				   ";\n".
				   ";1 -  ORegAnnoID\n".
				   ";2 -  recordType\n".
				   ";3 -  TFID\n".
				   ";4 -  TFname\n".
				   ";5 -  TFsource\n".
				   ";6 -  TFversion\n".
				   ";7 -  geneID\n".
				   ";8 -  geneName\n".
				   ";9 -  geneSource\n".
				   ";10 - geneVersion\n".
				   ";11 - lociName\n".
				   ";12 - speciesName\n".
				   ";13 - evidenceSubType\n".
				   ";14 - outcome\n".
				   ";15 - pubmedID\n".
				   ";16 - sequence\n".
				   ";17 - seqWithFlank\n";
			print OUT $header;
		}		
	}
	
	elsif (($outFile eq $polymorphism_file)||($outFile eq $haplotype_file)){
		# header line
		my $header = "#ORegAnnoID\trecordType\tTFID\tTFname\tTFsource\tTFversion\t".
				"geneID\tgeneName\tgeneSource\tgeneVersion\tlociName\tspeciesName\tevidenceSubType\toutcome\tpubmedID\t".
				"referenceSequence\tvariantSequence\n";
		#print
		if ($outFile){
			print OUT "; Column names:\n".
				   ";\n".
				   ";1 -  ORegAnnoID\n".
				   ";2 -  recordType\n".
				   ";3 -  TFID\n".
				   ";4 -  TFname\n".
				   ";5 -  TFsource\n".
				   ";6 -  TFversion\n".
				   ";7 -  geneID\n".
				   ";8 -  geneName\n".
				   ";9 -  geneSource\n".
				   ";10 - geneVersion\n".
				   ";11 - lociName\n".
				   ";12 - speciesName\n".
				   ";13 - evidenceSubType\n".
				   ";14 - outcome\n".
				   ";15 - pubmedID\n".
				   ";16 - referenceSequence\n".
				   ";17 - variantSequence\n";
			print OUT $header;
		}		
	}
	
	close OUT;
}

## print result in feature format
sub print2Feature{
	my $parsedRecords_ref = shift;
	my %parsedRecords = %$parsedRecords_ref;
	
	# record lines
	foreach my $recordToPrint (keys(%parsedRecords)){
		my $type = $parsedRecords{$recordToPrint}->[1];
	
		# get records with type TRANSCRIPTION FACTOR BINDING SITE
		if ($type eq "TRANSCRIPTION FACTOR BINDING SITE"){
			open OUT, ">>$TFBS_file" or die "Cannot write to output file $TFBS_file:$!"; 
			foreach my $field (@{$parsedRecords{$recordToPrint}}){
				print OUT $field."\t";
			}
			print OUT "\n";
			close (OUT);
		}
		# get records with type Regulatory region
		if ($type eq "REGULATORY REGION"){
			open OUT, ">>$region_file" or die "Cannot write to output file $region_file:$!"; 
			foreach my $field (@{$parsedRecords{$recordToPrint}}){
				print OUT $field."\t";
			}
			print OUT "\n";
			close (OUT);
		}
		# get records with type Regulatory polymorphism
		if ($type eq "REGULATORY POLYMORPHISM"){
			open OUT, ">>$polymorphism_file" or die "Cannot write to output file $polymorphism_file:$!"; 
			foreach my $field (@{$parsedRecords{$recordToPrint}}){
				print OUT $field."\t";
			}
			print OUT "\n";
			close (OUT);
		}

	
		# get records with type Regulatory haplotype
		if ($type eq "REGULATORY HAPLOTYPE"){
			open OUT, ">>$haplotype_file" or die "Cannot write to output file $haplotype_file:$!"; 
			foreach my $field (@{$parsedRecords{$recordToPrint}}){
				print OUT $field."\t";
			}
			print OUT "\n";
			close (OUT);
		}
		
	}
}

# Perl trim function to remove whitespace from the start and end of the string
sub trim($)
{
	my $string = shift;
	$string =~ s/^\s+//;
	$string =~ s/\s+$//;
	return $string;
}







