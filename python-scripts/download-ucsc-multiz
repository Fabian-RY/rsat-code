#!/usr/bin/env python
# -*- coding: utf-8 -*-
'''
NAME
	%(progname)s

VERSION
	%(version)s

CATEGORY
	genome   
        
DESCRIPTION

	Download, decompress and index the multi-genome alignemnt
	files ("multiz" files, in MAF format) from the UCSC genome
	browser (http://genome.ucsc.edu/).

	The multiz files are used by the RSAT program peak-footprints
	for detecting enrichment for transcription factor binding
	motifs in the conserved regions under ChIP-seq peaks.

	The script download-ucsc-multiz only downloads the files for
	which the local copy is older than the copy on the UCSC
	server.

	The original files are downloaded in gzip format, and
	uncomrpessed because the idenxation requires flat files.

	The program also indexes the multiz files, in order to enable
	fast retrieval of conserved regions for a set of genomic
	coordinates.

	For some reference genomes, several multiz are available, with
	different numbers of aligned genomes. In such case,
	download-ucsc-multiz automatically selects the alignments
	covering the highest number of genomes. The option -multiz
	however permits to download all the multiz files for a given
	reference genome.

DISK SPACE REQUIREMENT

        Multi-genome alignments occupy a large disk space, depending
        on the size of the reference genome and an the number of
        genomes aligned on this reference. As an example, for the
        mouse genome mm9, the uncompressed multiz file (multiz30
        version, with 30 aligned genomes) occupy 70Gb.

USAGE
      download-ucsc-multiz \\
           [-org ORG1 [ORG2....] | -org_file org_file.txt] \\
      	    [-multiz] [-v] [-index] [-h]
        
      Exemple 
      	download-ucsc-multiz -org mm8 mm9 hg19
            
OPTIONS
      -h, --help		
          show this help message and exit

      -v #		
          verbosity

      -org # 
          list of organism seperated by white spaces

      -org_file #	
          file contening all organism with only one organism by line

      -multiz
          download all multiz available for a organisme. By default,
       	  only the wildest is download

      -nogunzip
	  Not uncompressed maf

      -noindex
	   do not run the indexation of the maf file.
'''


#############################################################################################################	
##import
import os
import sys
import argparse
import re
import subprocess
import time


#############################################################################################################	
##read arguments
parser = argparse.ArgumentParser(add_help=0)
parser.add_argument('-org', action="store",default=False, nargs='+', dest="org")
parser.add_argument('-org_file', action="store",default=False, dest="org_file")
parser.add_argument('-multiz', action="store_true", default=False, dest="multiz")
parser.add_argument('-nogunzip', action="store_true", default=False, dest="no_gunzip")
parser.add_argument("-noindex", action="store_true", default=False, dest="no_index")
parser.add_argument("-v", action="store", default=0, type=int, dest="verbosity")
parser.add_argument("-h", "--help", action="store_true", dest="help")
args = parser.parse_args()

if args.help:
	print  globals()['__doc__'] % {'version' : '1.00', 'progname' : parser.prog}
	sys.exit(0)
	
if args.org and args.org_file:
	print 'You indicate organism -org and -org_file. You can only use one option for specify organism'
 	sys.exit(1)
 	
################################################################
##Define variables

rsat_path = os.getenv('RSAT') # Main path for the RSAT suite
lang = os.getenv('LANG').split("_")[0] ## Language is required to interpret file modification dates
peak_footprints_path = rsat_path + "/contrib/peak-footprints/" # Path for the peak-footprint program
multiz_path = rsat_path + "/data/UCSC_multiz/"
fetch_maf_list_name = multiz_path+"fetch_maf_list.txt"

##Define for every local abrv month the num of the month
num_month= {}
for i in range(1,13):
	result = subprocess.check_output('date -v -'+str(i)+'m +"%b %m"', shell=True)
	month, n_month = result.strip("\n").split()
	num_month[month]=n_month

#############################################################################################################
## Get all maf.gz files available on the UCSC repository (or wanted if -org_file option is used) on UCSC
if args.verbosity > 0:
	print "\n" + time.strftime('%Y-%m-%d_%H:%M:%S', time.localtime()) + "\tGetting list of multiz files from UCSC"

cmd = "mkdir -p "+multiz_path
cmd += ' ; rsync -navP rsync://hgdownload.cse.ucsc.edu/goldenPath/ 2>&1'
cmd += ' | grep "multiz"'
cmd += ' | grep "maf.gz"'
cmd += ' | grep -v upstream'
cmd += ' | grep -v _'

## Filter on organisms if an organism file has been specified by the user
if args.org_file != False:
	cmd += ' | grep -f '+args.org_file

## Retrieve the relevant columns: modification date and file name
cmd += "| awk '{print $3,$NF}' > "+fetch_maf_list_name

## Report command
if args.verbosity > 1:
	print "\tCommand : ",cmd

## Run the command
subprocess.check_call(cmd, shell=True)

## Report done
if args.verbosity > 1:
	print "\tTemporary list of maf files stored in: "+fetch_maf_list_name

#############################################################################################################
## Get the list of multiz files already downloaded,uncompressed and indexed on the RSAT muliz folder

## Run a recursive ls on the local multiz folder
cmd =  " ls -lR "+ multiz_path

## Filter out the compressed files
cmd += " | grep -v '\.gz$'"

## Ignore index files
#cmd += " | grep -v '\.mafindex$'"

## Ignore folders
cmd += " | grep -v '^d'"

## Ignore the last line indicating the total
cmd += " | grep -v 'total'"

## Select the relevant columns: date and name
cmd += " | awk '{print $6,$7,$8,$NF}'"

if args.verbosity > 0:
	print "\n" + time.strftime('%Y-%m-%d_%H:%M:%S', time.localtime()) + "\tGetting RSAT maf list"
	if args.verbosity > 1:
		print "\tCommand : ",cmd

## Run the command
already_d_u_i_maf = subprocess.check_output(cmd, shell=True)

## Suppress fist and last lines, which are non-informatve
already_d_u_i_maf = already_d_u_i_maf[4:-1].split('\n   \n')

##Separated type of file
already_downloaded_maf = []
already_indexed_maf = []

for maf in already_d_u_i_maf:
	maf = maf.split("\n")

	if len(maf)>=2: #not treating directory with no file
		path = maf[0].lstrip().rstrip(":").replace(multiz_path,"").lstrip("/")+"/"

		for info in maf[1:]:
			info = info.split(" ")
			extension = info[3].split(".")[-1]

			if extension == "maf":
				## Reformat the dates to ensure compatibility between the date formats
				## returned by the "ls" and "rsync" commands, repsectively			
				if lang == "fr":
					if len(info[0]) == 1:
						day = '0'+str(info[0])
					else : 
						day = str(info[0])

					month = num_month[info[1]]
				
				else:
					if len(info[1]) == 1:
						day = '0'+str(info[1])
					else : 
						day = str(info[1])

					month = num_month[info[0]]
				
				if ":" in info[2]:
					year = time.strftime('%Y',time.localtime())
				else:
					year = str(info[2])

				date = year+"/"+month+"/"+day

				already_downloaded_maf.append(date+" "+path+info[3]+".gz")

			if extension == "mafindex":
				already_indexed_maf.append(path+info[3].replace(".mafindex",".maf.gz"))

#############################################################################################################
##  Analyze the list of multiz maf files to select files that need to be downloaded
if args.verbosity > 0:
	print "\n" + time.strftime('%Y-%m-%d_%H:%M:%S', time.localtime()) + "\tAnalyze the list of multiz maf files"
	
file = open(fetch_maf_list_name, 'r')
maf_list = []
org_dico = {}
exp_reg = ('multiz(\d+)way')
exp_reg = re.compile(exp_reg)	

line = file.readline()
while line != "":
	line = line.rstrip("\n")
	
	date,maf = line.split(" ")
	org = maf.split("/")[0]
	multiz = maf.split("/")[1]

	if org not in org_dico:
		org_dico[org] = []

	if multiz not in org_dico[org]:
		org_dico[org].append(multiz)
		
		##keeping only the widest multiz for each species
		if not args.multiz and len(org_dico[org])>1 :
			result = []
			for multiz in org_dico[org]:
				result.append(int(exp_reg.findall(multiz)[0]))
			org_dico[org] = ["multiz"+str(max(result))+"way"]	
					
	maf_list.append(line)
	line = file.readline()	
		
file.close()

## Rewriting fetch_maf_list and put list the maf to treat
file = open(fetch_maf_list_name, 'w')
maf_to_download = []
maf_to_index = []

for maf_info in maf_list:
	date, maf = maf_info.split()
	org = maf.split("/")[0] 
	multiz = maf.split("/")[1]
	
	##Keep org paste in argument
	if args.org != False:
		wanted = org in args.org
	else:
		wanted = True

	##Keep widest multiz or all multiz
	if args.multiz:
		widest_multiz = True
	else :
		widest_multiz= multiz == org_dico[org][0]	

	##Keep not downloaded maf
	not_downloaded = date+" "+maf not in already_downloaded_maf

	##Keep unindexed
	not_unindexed = maf not in already_indexed_maf

	##Write file and add in last maf keep	
	if wanted and widest_multiz:	
		if not_downloaded:
			file.write(maf+"\n")
			maf_to_download.append(maf)
		if not_unindexed:
			maf_to_index.append(maf)
	
file.close()

if args.verbosity > 1:
	print "\tList of files to download: "+fetch_maf_list_name


#############################################################################################################	
##launch donwload
if len(maf_to_download) > 0: #no need to rsync if nothing to download
	if args.verbosity > 0:
		print "\n" + time.strftime('%Y-%m-%d_%H:%M:%S', time.localtime()) + "\tStarting download"
	subprocess.check_call('rsync -avP --files-from='+fetch_maf_list_name+' rsync://hgdownload.cse.ucsc.edu/goldenPath/  '+multiz_path, shell=True)
	
else:
	if args.verbosity > 0:
		print "\n" + time.strftime('%Y-%m-%d_%H:%M:%S', time.localtime()) + "\tNo maf to download (wrong requested organism or no new maf)"


#############################################################################################################	
## Uncompress files

if not args.no_gunzip:
	if len(maf_to_download) > 0: #no need to uncompressed if nothing to download	
		total_gz = len(maf_to_download)	
	
		if args.verbosity > 0:
			print "\n" + time.strftime('%Y-%m-%d_%H:%M:%S', time.localtime()) + "\tStart uncompressed maf"
			print "\tMaf to uncompressed "+str(total_gz)
	
		for maf in maf_to_download:		
			if args.verbosity > 0:
				print "\tUncompressed "+multiz_path+"/"+maf,"\t",
				
			subprocess.check_call('gunzip '+ multiz_path+"/"+maf, shell=True)
			total_gz = total_gz -1
			
			if args.verbosity > 0:
				print "Maf left to uncompressed :"+str(total_gz)
	else:
		if args.verbosity > 0:
			print "\n" + time.strftime('%Y-%m-%d_%H:%M:%S', time.localtime()) + "\tNo maf to uncompressed (wrong requested organism or no new maf)"

#############################################################################################################	
## Index files for further retrieval with peak-footprints
if not args.no_index:
	if len(maf_to_index) > 0: #no need to index if nothing to download	
		if args.verbosity > 0:
			print "\n" + time.strftime('%Y-%m-%d_%H:%M:%S', time.localtime()) + "\tStart indexed maf"

		## Define XML indexer 
		xml_indexer_begin ='''<?xml version="1.0" encoding="UTF-8"?>

		<pipelines>
		'''
		xml_indexer_template = open(peak_footprints_path+"template_indexer_pipeline.xml", 'r').read()
		xml_indexer_end = "</pipelines>"


		## Get path to maf to index
		downloaded_maf_directory = []

		xml_indexer = xml_indexer_begin
		for maf in maf_to_index:
			directory = multiz_path+"/"+maf[:-3]
			species_ref = maf.split("/")[0]

			xml_indexer += xml_indexer_template %(species_ref, directory, species_ref)

		xml_indexer += xml_indexer_end
		open(peak_footprints_path+"indexer_pipeline.xml", 'w').write(xml_indexer)

		## Launch index
		subprocess.check_call("python "+ peak_footprints_path +"peak-footprints --pipeline "+ peak_footprints_path+"indexer_pipeline.xml", shell=True)
		
	else:
		if args.verbosity > 0:
			print "\n" + time.strftime('%Y-%m-%d_%H:%M:%S', time.localtime()) + "\tNo maf to index (wrong requested organism or no new maf)"

