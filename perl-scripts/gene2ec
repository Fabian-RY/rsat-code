#!/usr/bin/perl
if ($0 =~ /([^(\/)]+)$/) {
    push (@INC, "$`lib/");
}
require "RSA.lib";

### initialization
$ec_file = "$RSA/data/Saccharomyces_cerevisiae/gene_ec.tab";
$col{'ec'} = 1;
$col{'gene'} = 0;

&ReadArguments();

#### initialise parameters ####
$start_time = `date '+%d/%m/%y %H:%M:%S %Z'`;



### open output file ###
$out = &OpenOutputFile($outputfile);

##### read input #####
($in, $input_dir) = &OpenInputFile($inputfile);
while (<$in>) {
    next if (/^;/);
    next unless (/\S/);
    chomp;
    @fields = split /\s+/;
    $gene = $fields[0];
    push @genes, $gene;
    $query{lc($gene)} = 1;
}
close $in unless ($inputfile eq "");

#### verbose ####
if ($verbose) {
    print $out "; gene2ec ";
    &PrintArguments();
    if ($inputfile ne "") {
	print $out ";Input file	$inputfile\n";
    }
    if ($outputfile ne "") {
	print $out ";Output file	$outputfile\n";
    }
    print $out ";Organism\t$sel_org\t$selected_organism\n";
    print $out ";Query genes\n";
    foreach $gene (@genes) {
	print $out ";\t$gene\n";
    }
}


###### execute the command #########
($ecs) = &OpenInputFile($ec_file);
while (<$ecs>) {
    next if (/^;/);
    next if (/^--/);
    next if (/^\#/);
    next unless (/\S/);
    chomp;

    @fields = split "\t";
    $ec = $fields[$col{'ec'}];
    $gene = $fields[$col{'gene'}];
    
#    print join "\t", "HELLO", $ec, $gene, "\n";

    ### treat synonyms
    if ($query{lc($gene)}) {
	print $out "$ec";
	print $out "\t$gene";
	print $out "\n";
    }
}
close $ecs if $ec_file;

###### print output ######


###### verbose ######
if ($verbose) {
    $done_time = `date '+%d/%m/%y %H:%M:%S %Z'`;
    print $out ";Job started $start_time";
    print $out ";Job done    $done_time";
}


###### close output file ######
close $out unless ($outputfile eq "");


exit(0);


########################## subroutine definition ############################

sub ReadArguments {

}

sub PrintHelp {
#### display full help message #####
  open HELP, "| more";
  print HELP <<End_of_help;
NAME
	gene2ec

        1999 by Jacques van Helden (jvanheld\@ucmb.ulb.ac.be)
	
USAGE
        gene2ec -org organism [-i inputfile] [-o outputfile] [-v]

DESCRIPTION
	Takes as input a list of genes, and returns the list 
	of reactions (EC numbers) catalyzed by their products in 
	the selected organism.

CATEGORY
	genomics

OPTIONS
	-h	(must be first argument) display full help message
	-help	(must be first argument) display options
	-v	verbose
	-i inputfile
		if not specified, the standard input is used.
		This allows to place the command within a pipe.
	-o outputfile
		if not specified, the standard output is used.
		This allows to place the command within a pipe.
	-org organism
		supported organisms :
$supported_organisms
	
INPUT FORMAT
	Each query gene must come as the first 
	word of a new line. 

	Lines starting with a semicolumn (;) are considered
	as comments and skipped. 
	
End_of_help
  close HELP;
  exit;
}

sub PrintOptions {
#### display short help message #####
  open HELP, "| more";
  print HELP <<End_short_help;
gene2ec options
----------------
-h	(must be first argument) display full help message
-help	(must be first argument) display options
-i	input file
-o	output file
-v	verbose
-org	organism

Supported:
$supported_organisms
End_short_help
  close HELP;
  exit;
}


sub ReadArguments {
#### read arguments ####
    foreach $a (0..$#ARGV) {
	### verbose ###
	if ($ARGV[$a] eq "-v") {
	    if (&IsNatural($ARGV[$a+1])) {
		$verbose = $ARGV[$a+1];
	    } else {
		$verbose = 1;
	    }
	    
	    ### detailed help
	} elsif ($ARGV[$a] eq "-h") {
	    &PrintHelp;
	    
	    ### list of options
	} elsif ($ARGV[0] eq "-help") {
	    &PrintOptions;
	    
	    ### input file ###
	} elsif ($ARGV[$a] eq "-i") {
	    $inputfile = $ARGV[$a+1];
	    
	    ### output file ###
	} elsif ($ARGV[$a] eq "-o") {
	    $outputfile = $ARGV[$a+1];
	    
	    ### organism ###
	} elsif ($ARGV[$a] eq "-org") {
	    $sel_org = $ARGV[$a+1];
	    if ($supported_organism{$sel_org}) {
		$selected_organism = $supported_organism{$sel_org}->{'name'};
	    } else {
		die "Error: organism $org is not supported\n$supported_organisms\n";
	    }
	}
    }
}
