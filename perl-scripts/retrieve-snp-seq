#!/usr/bin/perl -w
############################################################
#
# $Id: retrieve-snp-seq,v 1.3 2013/03/14 15:27:57 jeremy Exp $
#
############################################################

## use strict;

=pod
    
    =head1 NAME

    retrieve-snp-seq
    
    =head1 VERSION
    
    $program_version
    
    =head1 DESCRIPTION

    Retrieve snp and haplotypes sequence for a set of coordinates specified in a bed
    
    =head1 AUTHORS
    
    jeremy.delerce@univ-amu.fr
    
    =head1 CATEGORY
    
    =over
    
    =item util
    
    =back
    
    =head1 USAGE
    
    retrive-snp-seq -i bedfile -species # -population # -len # [-o outputfile] [-v #] [...]
    
    Examples
    
    retrive-snp-seq -i file.bed -species human -population 1000GENOMES:phase_1_YRI -len 30
    
    =head1 INPUT FORMAT
    
    The definition of the BED format is provided on the UCSC Genome
    Browser web site (http://genome.ucsc.edu/FAQ/FAQformat#format1).
    
    The first three required BED fields are:
    
    =over
    
    =item 1. chrom
    The name of the chromosome (e.g. chr3, chrY, chr2_random) or scaffold
    (e.g. scaffold10671).
    
    =item 2. chromStart

    The starting position of the feature in the chromosome or
    scaffold. The first base in a chromosome is numbered 0.
    
    B<Note> from Jacques van Helden: the UCSC genome browser adopts a
    somewhat inconsistent convention for start and end coordinates: the
    start position is zero-based (first nucleotide of a
    chromosome/scaffold has coordinate 0), but the end position is
    considered not included in the selection. This is equivalent to have a
    zero-based coordinate for the start, and a 1-base coordinate for the
    end.
    
    =item 3. chromEnd
    
    The ending position of the feature in the chromosome or scaffold. The
    chromEnd base is not included in the display of the feature. For
    example, the first 100 bases of a chromosome are defined as
    chromStart=0, chromEnd=100, and span the bases numbered 0-99.
    
    =back
    
    =head1 OUTPUT FORMAT
    
A tab delimited file.
    
=over
    
    =item 1. chrom
    The name of the chromosome (e.g. 1, X, 8...)
    
    =item 2. chromStart
    The starting position of the feature in the chromosome
    
    =item 3. chromEnd
    The ending position of the feature in the chromosome

    =item 4. chromStrand
    The strand of the feature in the chromosome
    
    =item 5. snp
    rsID, variant and position on which the sequence is center. All information are separate by a '-'.
    
    =item 6. NeighboorsSnp
    rsID, variant and position of all snp present in the sequence except the center snp. All neighboors snp are separate by a "/".
    
    =item 7. sequence
    
    =item 8. number
    The numer of time that this sequence is observed in the population
    
    =back
    
    =head1 SEE ALSO
    
    =head1 WISH LIST
    
=cut


BEGIN {
    if ($0 =~ /([^(\/)]+)$/) {
	push (@INC, "$`lib/");
    }
    push (@INC, "/jolidisk/software/rsa-tools/perl-scripts/lib");
}
require "RSA.lib";

use Bio::EnsEMBL::Registry; ##require to connect to Ensembl API


################################################################
## Main package
package main;
{
    
    ################################################################
    ## Initialise parameters
    our $start_time = &RSAT::util::StartScript();
    our $program_version = do { my @r = (q$Revision: 1.3 $ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @r };
    
    our %infile = ();
    our %outfile = ();
    
    our $verbose = 0;
    our $in = STDIN;
    our $out = STDOUT;
    our @output_lines = ();
    
    our $species = 'human';
    our $population = '1000GENOMES:phase_1_YRI';
    our $length ='';

    ################################################################
    ## Read argument values
    &ReadArguments();
    our $marge = 50;
 #   our $len = $length + $marge; ##Add $marge in case of big indel

    ################################################################
    ## Check argument values

    if ($species ne 'human') {
	&RSAT::error::FatalError("Population is mandatory if species different of human");
    }
    
#    unless ($population) {
#	&RSAT::error::FatalError("Population must be specified with option -population");
#    }
    
    unless ($length) {
	&RSAT::error::FatalError("Length of flank of the sequence must be specified with option -length");
    }
    
    unless (&IsNatural($length)) {
	&RSAT::error::FatalError("Length must be a int");
    }
    
    
    ## Open a connection to Ensebl
    &RSAT::message::TimeWarn("Connectiong to Ensembl") if ($main::verbose >= 2);
    
    my $registry = 'Bio::EnsEMBL::Registry';
    $registry->load_registry_from_db(
	-host => 'ensembldb.ensembl.org',
	-user => 'anonymous'
	);
    
    ##Get adaptor
    my $slice_adaptor = $registry->get_adaptor($species, 'core', 'slice');
    my $vf_adaptor = $registry->get_adaptor($species, 'variation', 'variationfeature');
    my $population_adaptor = $registry->get_adaptor($species, 'variation', 'population');
    my $individual_adaptor = $registry->get_adaptor($species,'variation','individual');
    
    ################################################################
    ## Open output stream
    $out = &OpenOutputFile($outfile{output});
    
    ################################################################
    ## Download input from remote URL
    if ($main::infile{input_url}) {
	&RSAT::message::TimeWarn("Transferring input file from URL", $main::infile{input_url}) if ($main::verbose >= 2);
	use LWP::Simple;
	if (defined($outfile{output})) {
	    $main::outfile{input} = $main::outfile{output};
	    $main::outfile{input} =~ s/\.fasta$//;
	    $main::outfile{input} =~ s/\.fa$//;
	    
	    ## Add extension to the input file, in order to recognize compressed files
	    if ($main::infile{input_url} =~ /\.(\w+)$/) {
		my $extension = $1;
		$main::outfile{input} .= ".".$extension;
	    } else {
		$main::outfile{input} .= ".bed";
	    }
	    
	} else {
	    $main::outfile{input} = &RSAT::util::make_temp_file("", "test");
	    &RSAT::message::Info("Storing downloaded input file as", $main::outfile{input}) if ($main::verbose >= 3);
	}
	getstore($main::infile{input_url}, $main::outfile{input});
	&RSAT::message::TimeWarn("Genomic coordinates transferred to local file", $main::outfile{input}) if ($main::verbose >= 2);
	($main::in) = &OpenInputFile($main::outfile{input});
    } else {
	($main::in) = &OpenInputFile($main::infile{input});
    }


    ################################################################
    ## Read input
    &RSAT::message::TimeWarn("Reading genomic coordinates") if ($main::verbose >= 2);
    
    my @slice_list = ();
    ($main::in) = &OpenInputFile($main::infile{input});
    while (<$main::in>) {
	next if (/^#/); ## Skip comment lines
	next if (/^;/); ## Skip RSAT-like comment lines
	next unless (/\S/); ## Skip empty lines
	next unless (/\t/); ## Skip lines containing no tab (likely to be starting comment lines)
	chomp();
	
	################################################################
	## BEWARE: in bed format the left limit is zero-based. However the
	## DAS server expects 1-based coordinates. We convert here the
	## zero-based into 1-based coordinate.
	my ($chrom, $zero_left, $right) = split(/\t/);
	$left = $zero_left + 1;
	
	&RSAT::message::Debug($chrom, $left, $right) if ($main::verbose >= 5);
	
	##Removing "chr" in front of chr name
	if ( $chrom =~ /chr/) {
	    $chrom = substr($chrom,3);
	}
	
	## Check that the left is smaller than the right
	if ($left > $right) {
	    my $tmp = $left;
	    $left = $right;
	    $right = $tmp;
	}
	
	##Slice is bigger than the region of interest to getting neighboors variation
	push(@slice_list, $slice_adaptor->fetch_by_region('chromosome',$chrom,$left-($length+$marge),$right+($length+$marge))); 
    }
    close $main::in if ($main::infile{input});
    
    ################################################################
    ## Print verbose
    &Verbose() if ($main::verbose >= 1);
    
    ################################################################
    ## Execute the command
    my $i = 0;
    foreach my $slice (@slice_list)  {
	$i++;
		
	##Get variation in $slice
	my $vfs = $vf_adaptor->fetch_all_by_Slice($slice);

	##Remove non-analizable Variation feature
	my @vfs_good = ();
	foreach my $vf (@{$vfs}) {
	    
	    my $variation_start = $vf->seq_region_start();
	    my $variation_end   = $vf->seq_region_end();
	
       	    unless ( $vf->variation()->is_failed() || $vf->allele_string() =~ /[^ACTG\-\/]/ || ($variation_start > $variation_end && $vf->allele_string() =~ /^[^\-]/)
		     || $variation_end < $slice->start()+$marge || $variation_start > $slice->end()-$marge ) {
		push(@vfs_good, $vf);
	    }
	}

	##Search all individu name in $population
	my $pop = $population_adaptor->fetch_by_name($population); 
	my $individuals = $individual_adaptor->fetch_all_by_Population($pop);
	
	my %population_individual = ();
	foreach my $individual (@{$individuals}) {
	    $population_individual{$individual->name} = ();
	}

	##Search haplotype
	my @vfs_good2 = ();
        my %variation_info = ();
		
	foreach my $vf ( @vfs_good ) {
	    
	    my $igs = $vf->variation()->get_all_IndividualGenotypes();
	    my $variation_name = $vf->variation_name();
	    my @list_variants = ();
	    
	    foreach my $individual_genotype (@{$igs}) {
		
		my $individual_name = $individual_genotype->individual()->name();
		
		if ( grep($_ eq $individual_name, keys(%population_individual) ) ) {
		 		    
		    $variant1 = $individual_genotype->allele(1);
                    $population_individual{$individual_name}{$variation_name}{'allele1'} = $variant1;
                    unless ( grep($_ eq $variant1 , @list_variants ) ) {
                        push (@list_variants,$variant1 );
                    }

		    unless (  ( $slice->seq_region_name() eq "X" || $slice->seq_region_name() eq "Y") && $individual_genotype->individual()->gender() eq "Male") {

			$variant2 = $individual_genotype->allele(2);
			$population_individual{$individual_name}{$variation_name}{'allele2'} = $variant2;
			unless ( grep($_ eq $variant2 , @list_variants ) ) {
			    push (@list_variants,$variant2 );
			}    
		    }
		}
	    }
	    
	    ##Only keep variations with more than 1 variant in $population
	    if ( scalar (@list_variants) > 1) {
		push (@vfs_good2,$vf);
		push (@{$variation_info{$variation_name}{'list_variants'}}, @list_variants);
	    }
	}


	if ( scalar(@vfs_good2) == 0) {
	    &RSAT::message::TimeWarn("Slice $i/".scalar(@slice_list)."\t".$slice->seq_region_name().":".$slice->start()."-".$slice->end()."\tNo variation found") if ($main::verbose >= 2);
	    next;
	} else {
	    &RSAT::message::TimeWarn("Slice $i/".scalar(@slice_list)."\t".$slice->seq_region_name().":".$slice->start()."-".$slice->end()."\t".scalar(@vfs_good2)." variation(s) found") if ($main::verbose >= 2);
	}
	

	##Get usefull info on variation
	my $pos_diff = 0;
	
	foreach my $vf (@vfs_good2) {
	    my $var_name = $vf->variation_name();

	    ##Get max length of variant                                                                                                                                                                                        
	    $len_max_var = 0;
	    	    
	    foreach my $variant (@{$variation_info{$var_name}{'list_variants'}} ) {

		if ($len_max_var < length($variant)) {
		    $len_max_var = length($variant);
		}
	    }
	    
	    $variation_info{$var_name}{'len_max_var'} = $len_max_var;
	    delete ($variation_info{$var_name}{'list_variants'});

	    ##Get length of ref variant
	    $variation_info{$var_name}{'len_ref_var'} = length($vf->ref_allele_string());

	    if ( $vf->ref_allele_string() eq "-") {
		$variation_info{$var_name}{'len_ref_var'} = 0;
	    }

	    ##Get change in position foreach $vf
	    $variation_info{$var_name}{'diff_pos'} = $pos_diff;

	    if ( $variation_info{$var_name}{'len_max_var'} != length($vf->ref_allele_string()) ) {
		$pos_diff += $variation_info{$var_name}{'len_max_var'}-length($vf->ref_allele_string());
	    }

	    if ( $vf->ref_allele_string() eq "-" ) {
		$pos_diff++;
	    }
	}
	
	##"Create" haplotype sequence
	my %pop_alleles = ();
	my $ref_allele = $slice->seq();

	foreach my $individual ( keys(%population_individual)) {
	    my $allele1=$ref_allele;
	    my $allele2=$ref_allele;

	    foreach my $vf ( @vfs_good2 ) {
		
		my $variation_name = $vf->variation_name();
		my $variation_start = $vf->start();
		my $variation_end = $vf->end();
		
		my $variant1 = $population_individual{$individual}{$variation_name}{'allele1'};
		my $variant2 = $population_individual{$individual}{$variation_name}{'allele2'};

		my $pos_diff=0;
                if ( $variation_info{$variation_name}{'diff_pos'} ) {
                    $pos_diff += $variation_info{$variation_name}{'diff_pos'};
                }
		
		$allele1 = substr($allele1,0,$variation_start-1+$pos_diff).$variant1."-"x($variation_info{$variation_name}{'len_max_var'}-length($variant1)).substr( $allele1,$variation_end+$pos_diff );
		$allele2 = substr($allele2,0,$variation_start-1+$pos_diff).$variant2."-"x($variation_info{$variation_name}{'len_max_var'}-length($variant2)).substr( $allele2,$variation_end+$pos_diff );
		
	    }
	    
	    unless ( $pop_alleles{$allele1} ) {
		$pop_alleles{$allele1} = 0;
	    }	
	    
	    unless ($pop_alleles{$allele2}) {	    
		$pop_alleles{$allele2} = 0;
	    }
	    
	    $pop_alleles{$allele1} = $pop_alleles{$allele1}+1;
	    $pop_alleles{$allele2} = $pop_alleles{$allele2}+1;
	}

	##Selected region of interest on each haplotype sequence
	foreach my $vf (@vfs_good2)  {
	    
	    my $variation_seq_start = $vf->seq_region_start();
	    my $variation_seq_end = $vf->seq_region_end(); 
	    
	    if ( $variation_seq_start >= $slice->start()+($length+$marge) && $variation_seq_end <= $slice->end()-($length+$marge) ) {
		
		my $variation_name = $vf->variation_name();

		my $pos_diff = 0;
		if ( $variation_info{$variation_name}{'diff_pos'} ) {
		    $pos_diff += $variation_info{$variation_name}{'diff_pos'};
		}

		##Get all alleles center on $vf
		my %var_alleles =();

		foreach my $allele (keys(%pop_alleles) ) {
		    my $centred_allele = substr($allele, $vf->start()-$length+$pos_diff, ($length-1)*2+$variation_info{$variation_name}{'len_max_var'} );
		    if ( $var_alleles{$centred_allele} ) {
			$var_alleles{$centred_allele} = $var_alleles{$centred_allele} + $pop_alleles{$allele};
		    } else {
			$var_alleles{$centred_allele} = $pop_alleles{$allele};
		    }
		}
		
		##Get all co-variation
		my %co_variations = ();
		
		foreach my $co_vf (@vfs_good2) {
		    
		    my $co_var_name = $co_vf->variation_name();
		    my $co_var_start = $co_vf->start();
		    my $co_var_end = $co_vf->end();

		    if ($co_var_start > $co_var_end) {
			$co_var_start = $co_var_end;
		    }

		    my $var_start=$vf->start();
		    my $var_end=$vf->end();
		    
		    if ($var_start>$var_end) {
			$var_start = $var_end;
		    }

#		    if ( $co_var_seq_start >= $variation_seq_end-$length && $co_var_seq_end <= $variation_seq_start+$length && $co_var_name ne $variation_name) {
                    if ( $co_var_start >= $var_end-$length && $co_var_end <= $var_start+$length && $co_var_name ne $variation_name) {

			if ($co_var_start > $var_end) {
			    $co_variations{$co_var_name}{'pos'} = $co_var_start-$var_end;
                        } else {
                            $co_variations{$co_var_name}{'pos'} = $co_var_end-$var_start;
			}
                         
			$co_variations{$co_var_name}{'variant_pos'} = $length-1; ##length of five prime seq
			$co_variations{$co_var_name}{'variant_pos'} += $co_variations{$co_var_name}{'pos'}; ##distance between variations
			$co_variations{$co_var_name}{'variant_pos'} += $variation_info{$co_var_name}{'diff_pos'}-$variation_info{$variation_name}{'diff_pos'}; ##change in position du to insertion
			$co_variations{$co_var_name}{'variant_pos'} += $variation_info{$variation_name}{'len_ref_var'}-$variation_info{$co_var_name}{'len_ref_var'} ; ##change in position du to deletion
			
		    }
		}
		
		##Make output line
		my $variation_chr = $vf->seq_region_name();

		my $variation_strand = "+"; 
		unless ($vf->seq_region_strand()) {
		    $variation_strand = "-";
		}
		
		foreach my $centred_allele ( keys(%var_alleles) ) {
		    
		    my $line = '';
		    
		    $line .= "$variation_chr\t".($variation_seq_start-$length)."\t".($variation_seq_end+$length)."\t$variation_strand\t";  #chromo start end stranf
		    $line .= "$variation_name/".substr($centred_allele , $length-1, $variation_info{$variation_name}{'len_max_var'} )."/".($length)."\t"; #rsID/variant/pos
		    
		    my $co_var_info = ",";
		    foreach my $co_var_name (keys(%co_variations)) {

			$co_var_info .= $co_var_name."/";
                        $co_var_info .= substr($centred_allele , $co_variations{$co_var_name}{'variant_pos'},$variation_info{$co_var_name}{'len_max_var'} )."/";
			$co_var_info .= $co_variations{$co_var_name}{'pos'}.",";
		    }
		    
		    $line .= substr($co_var_info,1,length($co_var_info)-2)."\t";
		    
		    my $count = $var_alleles{$centred_allele};
#		    $centred_allele =~ tr/\-//d;
		    $line .= "$centred_allele\t$count\n"; ##allele count

		    
		    push(@output_lines,$line);
		}
	    }
	}
    }
    
    ################################################################
    ## Insert here output printing
    foreach my $output_line (@output_lines) {
	print $out $output_line;
    }
	
    ################################################################
    ## Report execution time and close output stream
    my $exec_time = &RSAT::util::ReportExecutionTime($start_time); ## This has to be exectuted by all scripts
    print $out $exec_time if ($main::verbose >= 1); ## only report exec time if verbosity is specified
    close $out if ($outfile{output});
    
    exit(0);
}
    
################################################################
################### SUBROUTINE DEFINITION ######################
################################################################
    
	
################################################################
## Display full help message 
	sub PrintHelp {
	    system "pod2text -c $0";
	    exit()
	}

################################################################
## Display short help message
	sub PrintOptions {
	    &PrintHelp();
	}
	
################################################################
## Read arguments 
	sub ReadArguments {
    my $arg;
    my @arguments = @ARGV; ## create a copy to shift, because we need ARGV to report command line in &Verbose()
    while (scalar(@arguments) >= 1) {
	$arg = shift (@arguments);
    ## Verbosity

=pod

=head1 OPTIONS

=over 4

=item B<-v #>

Level of verbosity (detail in the warning messages during execution)

=cut
if ($arg eq "-v") {
    if (&IsNatural($arguments[0])) {
	$main::verbose = shift(@arguments);
    } else {
	$main::verbose = 1;
    }


=pod

=item B<-h>

Display full help message

=cut
} elsif ($arg eq "-h") {
    &PrintHelp();


=pod

=item B<-help>

Same as -h

=cut
} elsif ($arg eq "-help") {
    &PrintOptions();


=pod

=item B<-i inputfile>

The input file should be in bed format (see section INPUT FORMATS
above).

If no input file is specified, the standard input is used.  This
allows to use the command within a pipe.

This option is mutually exclusive with option I<-u>.

=cut
} elsif ($arg eq "-i") {
    &RSAT::error::FatalError("Options -i and -u are mutually exclusive") if ($main::infile{input_url});
    $main::infile{input} = shift(@arguments);
=pod

=item B<-u input_file_URL>

Use as input a file available on a remote Web server (e.g. a bed file
on your Galaxy account).

This option is mutually exclusive with option I<-i>.

=cut
} elsif ($arg eq "-u") {
      &RSAT::error::FatalError("Options -i and -u are mutually exclusive") 
	  if ($main::infile{input});
      $main::infile{input_url} = shift(@arguments);

=pod

=item B<-species species_name>

Species (e.g. 'human','mouse').

This option is mandatory.

=cut
} elsif ($arg eq "-species") {
    $main::species = shift(@arguments);

=pod

=item B<-population population_name>

Population name on ensembl data base (e.g. '1000GENOMES:phase_1_YRI').

This option is mandatory.

=cut
} elsif ($arg eq "-population") {
    $main::population = shift(@arguments);

=pod


=item B<-length int>

Length of flank of the sequence.

The total length of the sequence return is equal to (flank length - 1)*2 + snp length

This option is mandatory.

=cut
} elsif ($arg eq "-len") {
    $main::length = shift(@arguments);

=pod

    =itemB<-o outputfile>

If no output file is specified, the standard output is used.  This
allows to use the command within a pipe.

=cut
} elsif ($arg eq "-o") {
    $outfile{output} = shift(@arguments);

} else {
    &FatalError(join("\t", "Invalid option", $arg));

}
    }

=pod

=back

=cut

}

################################################################
## Verbose message
sub Verbose {
    print $out "; retrieve-snp-seq ";
    &PrintArguments($out);
    printf $out "; %-22s\t%s\n", "Program version", $program_version;
    if (%main::infile) {
	print $out "; Input files\n";
	while (my ($key,$value) = each %main::infile) {
	    printf $out ";\t%-13s\t%s\n", $key, $value;
	}
    }
    if (%main::outfile) {
	print $out "; Output files\n";
	while (my ($key,$value) = each %main::outfile) {
	    printf $out ";\t%-13s\t%s\n", $key, $value;
	}
    }
}


__END__
