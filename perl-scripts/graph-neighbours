#!/usr/bin/perl -w
############################################################
#
# $Id: graph-neighbours,v 1.10 2007/04/16 08:40:52 rsat Exp $
#
# Time-stamp: <2003-07-04 12:48:55 jvanheld>
#
############################################################

## use strict;

=pod

=head1 NAME

graph-neighbours

=head1 DESCRIPTION

Extract from a graph the neighbourhood of a set of seed nodes. 

=head1 AUTHORS

=over

=item Jacques van Helden <jvanheld@scmbb.ulb.ac.be>

=item Sylvain Brohee <sylvain@scmbb.ulb.ac.be>

=head1 CATEGORY

graph analysis

=head1 USAGE
    
graph-neighbours [-i graph_file]  -steps # -seed seed_node1 [-seed seed_node2 ...] [-o outputfile] [-v #] [...]

graph-neighbours [-i graph_file]  -steps # -seedf seed_file [-o outputfile] [-v #] [...]

graph-neighbours [-i graph_file]  -steps # -all [-o outputfile] [-v #] [...]

=head1 INPUT FORMAT

See convert-graph for a description of the supported input formats.

=head1 OUTPUT FORMAT

=cut


BEGIN {
    if ($0 =~ /([^(\/)]+)$/) {
	push (@INC, "$`lib/");
    }
}
require "RSA.lib";
require RSAT::Graph2;

################################################################
## Main package
package main;
{

    ################################################################
    ## Initialise parameters
    my $start_time = &AlphaDate();

    %unknown_nodes = (); ## Names of the unidentified nodes
    $all_seeds = 0; ## Use all nodes as seeds
    $steps = 1;
    $self_included = 0;

    ################################################################
    ## Initialize the graph
    $graph = new RSAT::Graph2();
    $graph->set_attribute("label", "graph");

    ## Columns of the tab-delimited graph file
    local $source_col = 1;
    local $target_col = 2;
    local $weight_col = 0;

    #local $out_format = "classes";

    ## Input formats
    local $input_format = "tab";
    %supported_input_format =(
	tab=>1,
	gml=>1
    );
    $supported_input_formats = join (",", keys %supported_input_format);
    
    
    %main::infile = ();
    %main::outfile = ();

    $main::verbose = 0;
#    $main::in = STDIN;
    $main::out = STDOUT;

    ################################################################
    ## Read argument values
    &ReadArguments();

    ################################################################
    ## Check argument values

    ################################################################
    ## Open output stream
    $main::out = &OpenOutputFile($main::outfile{output});

    ################################################################
    ## Read input graph
    $graph->graph_from_text($input_format,$main::infile{graph}, $source_col, $target_col, $weight_col);
    
    ################################################################
    ## Build the list of seed nodes

    ## Use all nodes as seeds
    if ($all_seeds) {
      my @seed_nodes = $graph->get_nodes();
      foreach my $seed_node (@seed_nodes) {
        push @seed_names, $seed_node;
      }
      &RSAT::message::TimeWarn("Using all",scalar(@seed_nodes), "nodes of the graph as seeds") if ($main::verbose >= 2);
      ## Put the name of each node in the list
    } else {
      ## Read seed nodes from a file
      if ($infile{seeds}) {
	my $l = 0;
	&RSAT::message::TimeWarn("Reading seed nodes from file", $infile{seeds}) if ($main::verbose >= 2);
	my ($seed_handle) = &OpenInputFile($infile{seeds});
	while (my $line = <$seed_handle>) {
	  $l++;
	  next if ($line =~ /^\#/); ## Skip header lines
	  next if ($line =~ /^--/); ## Skip comment lines
	  next if ($line =~ /^;/); ## Skip comment lines
	  next unless ($line =~ /\S/); ## Skip empty lines
	  chomp($line);
	  my @fields = split /\s+/, $line;
	  my $name =  $fields[0];
	  if ($name) {
	    push @seed_names, $name;
	  } else {
	    &RSAT::message::Warning("Line", $l, "starts with space. Skipped.");
	  }
	}
	close $seed_handle;
      }
    }
      
    ## Identify seed nodes in the graph
    RSAT::message::TimeWarn("Identifying",scalar(@seed_names), "seed nodes in the graph") if ($main::verbose >= 2);
    foreach my $name (@seed_names) {
      my $node_id = $graph->node_by_name($name);
      if (defined($node_id)) {
	$seed_nodes_id{$node_id} = $name;
	&RSAT::message::Info("Identified node with name", $name, $node_id) if ($main::verbose >= 3);
      } else {
        $unknown_nodes{$name}++;
	&RSAT::message::Warning("The graph does not contain any node with name", $name);
      }
    }
    

    
    ################################################################
    ## Print verbose
    &Verbose() if ($main::verbose);
    
    ################################################################
    ## Extract the neighborhood
    print $out '#',  join ("\t", 
			   "neighb",
			   "seed", 
#			   "weight",
			   "steps",
			   "dir"
			  ), "\n";
			  
    foreach my $seed_node_id (keys %seed_nodes_id) {
      &RSAT::message::Info("\t","Looking for neighbours of node", $seed_node_id, $seed_nodes_id{$seed_node_id}) if $main::verbose >= 2;
      my @neighbours = $graph->get_neighbours_id($seed_node_id, $steps, $self_included);
      for (my $i = 0; $i < scalar(@neighbours); $i++) {
        if (defined(@{$neighbours[$i]})) {
          print $out join("\t",@{$neighbours[$i]})."\n";
        }
      }
    }

    ################################################################
    ## Finish verbose
    if ($main::verbose >= 1) {
	my $done_time = &AlphaDate();
	print $main::out "; Job started $start_time\n";
	print $main::out "; Job done    $done_time\n";
    }
    
     
    ################################################################
    ## Close output stream
    close $main::out if ($main::outfile{output});
    
    
    exit(0);
}

################################################################
################### SUBROUTINE DEFINITION ######################
################################################################


################################################################
## Display full help message 
sub PrintHelp {
    system "pod2text -c $0";
    exit()
}

################################################################
## Display short help message
sub PrintOptions {
    &PrintHelp();
}

################################################################
## Read arguments 
sub ReadArguments {
    my $arg;
    my @arguments = @ARGV; ## create a copy to shift, because we need ARGV to report command line in &Verbose()
    while (scalar(@arguments) >= 1) {
      $arg = shift (@arguments);
	## Verbosity
=pod

=head1 OPTIONS

=over 4

=item B<-v #>

Level of verbosity (detail in the warning messages during execution)

=cut
	if ($arg eq "-v") {
	    if (&IsNatural($arguments[0])) {
		$main::verbose = shift(@arguments);
	    } else {
		$main::verbose = 1;
	    }

	    ## Help message
=pod

=item B<-h>

Display full help message

=cut
	} elsif ($arg eq "-h") {
	    &PrintHelp();

	    ## List of options
=pod

=item B<-help>

Same as -h

=cut
	} elsif ($arg eq "-help") {
	    &PrintOptions();


	    ### Input format  
=pod

=item B<-in_format input_format>

Input format. Supported: tab, gml

=cut
	} elsif ($arg eq "-in_format") {
	    $input_format = shift(@arguments);
	    &RSAT::error::FatalError("$input_format\tInvalid input format. Supported: $supported_input_formats")
		unless ($supported_input_format{$input_format});
			    
	    ## Graph file
=pod

=item B<-i graphfile>

If no graph file is specified, the standard input is used.  This
allows to use the command within a pipe.

=cut
	} elsif ($arg eq "-i") {
	    $main::infile{graph} = shift(@arguments);

	    ## Source column
=pod

=item B<-scol>

Source column. Column containing the source nodes in the tab-delimited
graph file.

=cut
	} elsif ($arg eq "-scol") {
	    $source_col = shift (@arguments);
	    unless (&IsNatural($source_col) && ($source_col > 0)) {
		&RSAT::error::FatalError(join("\t", $source_col, "Invalid value for the source column. Must be a strictly positive natural number"));
	    }

	    ## Target column
=pod

=item B<-tcol>

Target column. Column containing the target nodes in the tab-delimited
graph file.

=cut
	} elsif ($arg eq "-tcol") {
	    $target_col = shift (@arguments);
	    unless (&IsNatural($target_col) && ($target_col > 0)) {
		&RSAT::error::FatalError(join("\t", $target_col, "Invalid value for the target column. Must be a strictly positive natural number"));
	    }

	    ## Weight column
=pod

=item B<-wcol>

Weight column. Column containing the weight nodes in the tab-delimited
graph file.

=cut
	} elsif ($arg eq "-wcol") {
	    $weight_col = shift (@arguments);
	    unless (&IsNatural($weight_col) && ($weight_col > 0)) {
		&RSAT::error::FatalError(join("\t", $weight_col, "Invalid value for the weight column. Must be a strictly positive natural number"));
	    }


=pod

=item B<-seedf seed_file>

Seed file. The seed file specifies a list of seed nodes.

Seed file format: the first word of each row specifies one seed. The
rest of the row is ignored.

=cut
	} elsif ($arg eq "-seedf") {
	    $main::infile{seeds} = shift(@arguments);

=pod

=item B<-all>

Use all the nodes of the input graph as seed. Each node is the seed of
one cluster indicating its neighbours.

=cut
	} elsif ($arg eq "-all") {
	    $all_seeds = 1;

=pod

=item B<-seed seed_node>

Specify one seed node. This option can be used iteratively to specify
several seed nodes.

=cut
	} elsif ($arg eq "-seed") {
	    push @seed_names, shift(@arguments);

=pod

=item B<-steps nb_of_steps>

Maximal number of steps between a seed node and its
neighbours. Default: 1.

=cut
	} elsif ($arg eq "-steps") {
	    $main::steps = shift(@arguments);

=pod

=item B<-self>

Include each node in its neighborhood, with a distance of 0, even if
there is no self-loop at this node. This allows to extract the node
together with its neighborhood, rather than the neighborhood only
(default).

=cut
	} elsif ($arg eq "-self") {
	    $main::self_included = 1;

	    ## Output file
=pod

=item	B<-o outputfile>

If no output file is specified, the standard output is used.  This
allows to use the command within a pipe.

=cut
	} elsif ($arg eq "-o") {
	    $main::outfile{output} = shift(@arguments);

	} else {
	    &FatalError(join("\t", "Invalid option", $arg));

	}
    }


=pod

=back

=cut

}

################################################################
#### verbose message
sub Verbose {
    print $main::out "; graph-neighbnours ";
    &PrintArguments($main::out);
    if (defined(%main::infile)) {
	print $main::out "; Input files\n";
	while (my ($key,$value) = each %main::infile) {
	    print $main::out ";\t$key\t$value\n";
	}
    }
    if (defined(%main::outfile)) {
	print $main::out "; Output files\n";
	while (my ($key,$value) = each %main::outfile) {
	    print $main::out ";\t$key\t$value\n";
	}
    }

    ## Report graph size
    my ($nodes, $arcs) = $graph->get_size();
    print $out "; Graph size\n";
    print $out ";\tnodes\t",$nodes,"\n";
    print $out ";\tarcs\t",$arcs,"\n";

    ## Report seed nodes
    print $out "; Seed nodes\t",scalar(@seed_names),"\n";
    if (%unknown_nodes) {
      print $out ";\tidentified\t",scalar(keys (%seed_nodes_id)),"\n";
      print $out ";\tunknown nodes\t",scalar(keys (%unknown_nodes)),"\n";
      foreach my $name (keys %unknown_nodes) {
	print $out join ("\t", ";\t", "unknown", $name), "\n";
      }
    }
}


__END__

=pod

=head1 SEE ALSO

=cut
