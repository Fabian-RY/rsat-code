#!/usr/bin/perl -w
############################################################
#
# $Id: matrix-from-gibbs,v 1.3 2002/06/06 11:14:38 jvanheld Exp $
#
# Time-stamp: <2002-06-06 13:14:36 jvanheld>
#
############################################################
#use strict;;
if ($0 =~ /([^(\/)]+)$/) {
    push (@INC, "$`lib/");
}
require "RSA.lib";
require "RSA.classes";



#### initialise parameters ####
my $start_time = &AlphaDate;

local $infile{input} = "";
local $outfile{output} = "";

local $verbose = 0;
local $in = STDIN;
local $out = STDOUT;

&ReadArguments;


#### check argument values ####


### open output file ###
$out = &OpenOutputFile($outfile{output});

##### read input #####
($in) = &OpenInputFile($infile{input});
$in_matrix = 0;

while (<$in>) {
    next unless (/\S/);
    if (/Information \(relative entropy\) contribution in tenth bits\:/) {
	$in_matrix = 1;
	$current_matrix = new RSA::matrix();
	next;
    } elsif (/site/) {
	$in_matrix = 0;
	$last_matrix = $current_matrix;
	undef($current_matrix);
	next;
    } elsif ((/^\s*POS/) && ($in_matrix)) {
	chomp;
	@header = split " +";
	@alphabet = @header[1..$#header-1];
	$current_matrix->setAlphabet(@alphabet);
    } elsif ($in_matrix) {
	chomp;
	s/^\s+//;
	@fields = split " +";
	@values = @fields[1..$#header-1];
	foreach my $v (0..$#values) {
	    $values[$v] =~ s/^\.$/0/;
	}
	$current_matrix->addColumn(@values);
    }
}

close $in if ($infile{input});



#### verbose ####
&Verbose if ($verbose);

###### execute the command #########


###### print output ######
print $out $last_matrix->getString();

###### verbose ######
if ($verbose) {
  my $done_time = &AlphaDate;
  print $out "; Job started $start_time\n";
  print $out "; Job done    $done_time\n";
}


###### close output file ######
close $out if ($outfile{output});


exit(0);


########################## subroutine definition ############################

sub PrintHelp {
#### display full help message #####
  open HELP, "| more";
  print HELP <<End_of_help;
NAME
	matrix-from-gibbs

        1999 by Jacques van Helden (jvanheld\@ucmb.ulb.ac.be)
	
USAGE
        matrix-from-gibbs [-i inputfile] [-o outputfile] [-v]

DESCRIPTION
	Extracts position weight matrix from the output of the gibbs
	sampler (Neuwald et al, 1995) and returns it in a format that
	can be used by consensus (Hertz et al, 1999).
	
CATEGORY
	util
	conversion
	sequences

OPTIONS
	-h	(must be first argument) display full help message
	-help	(must be first argument) display options
	-v	verbose
	-i inputfile
		if not specified, the standard input is used.
		This allows to place the command within a pipe.
	-o outputfile
		if not specified, the standard output is used.
		This allows to place the command within a pipe.

End_of_help
  close HELP;
  exit;
}

sub PrintOptions {
#### display short help message #####
  open HELP, "| more";
  print HELP <<End_short_help;
matrix-from-gibbs options
----------------
-h	(must be first argument) display full help message
-help	(must be first argument) display options
-i	input file
-o	output file
-v	verbose
End_short_help
  close HELP;
  exit;
}


sub ReadArguments {
#### read arguments ####
  foreach my $a (0..$#ARGV) {
    ### verbose ###
    if ($ARGV[$a] eq "-v") {
      if (&IsNatural($ARGV[$a+1])) {
	$verbose = $ARGV[$a+1];
      } else {
	$verbose = 1;
      }
      
      ### detailed help
    } elsif ($ARGV[$a] eq "-h") {
      &PrintHelp;
      
      ### list of options
    } elsif ($ARGV[0] eq "-help") {
      &PrintOptions;
      
      ### input file ###
    } elsif ($ARGV[$a] eq "-i") {
      $infile{input} = $ARGV[$a+1];
      
      ### output file ###
    } elsif ($ARGV[$a] eq "-o") {
      $outfile{output} = $ARGV[$a+1];
      
    }
  }
}

sub Verbose {
  print $out "; matrix-from-gibbs ";
  &PrintArguments($out);
  if (defined(%infile)) {
    print $out "; Input files\n";
    while (($key,$value) = each %infile) {
      print $out ";\t$key\t$value\n";
    }
  }
  if (defined(%outfile)) {
    print $out "; Output files\n";
    while (($key,$value) = each %outfile) {
      print $out ";\t$key\t$value\n";
    }
  }
}
