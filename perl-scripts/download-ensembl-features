#!/usr/bin/perl -w

############################################################
#
# $Id: download-ensembl-features,v 1.31 2013/09/24 09:42:16 rsat Exp $
#
############################################################

use warnings;

=pod

=head1 NAME

download-ensembl-features

=head1 VERSION

$program_version

=head1 DESCRIPTION

Download the genomic feature of a user-specified organism from the
Ensembl server, and convert the original format (dat) into tab files
required for RSAT use.

=head1 AUTHORS

Jeremy.Delerce@univ-amu.fr

Revised by Jacques.van-Helden@univ-amu.fr

=head1 CATEGORY

=over

=item util

=back

=head1 USAGE

 download-ensembl-features -species # [-version #] [-no_name] [-o #] [-dir genomesDirectory] [-available_species] [-v #]

=head2 Examples

Get a list of species with feature available at Ensembl

 download-ensembl-features -available_species

Get genomic feature coordinate for the human genome (Homo sapiens)

 download-ensembl-features -species Homo_sapiens

=head1 OUTPUT FORMAT

Multiple tab formatted file (gene,CDS,mRNA,lincRNA..).

=head1 SEE ALSO

=head2 download-ensembl-genome.pl

Downloads genome for a species

=head1 WISH LIST

=cut

BEGIN {
  if ($0 =~ /([^(\/)]+)$/) {
    push (@INC, "$`lib/");
  }
}

require "RSA.lib";
require "RSAT_to_ensembl.lib.pl";
use Bio::EnsEMBL::Registry;

################################################################
## Main package
package main;
{

  ###############################################################
  ## Initialise parameters
  our $start_time = &RSAT::util::StartScript();
  our $program_version = do { my @r = (q$Revision: 1.31 $ =~ /\d+/g); sprintf"%d."."%02d" x $#r, @r };

  our $out = SDTOUT;
  our %outfile = ();

  our $verbose = 0;
  our $data_dir = &Get_data_dir();
  our $registry = 'Bio::EnsEMBL::Registry';
  our $db = "ensembl";
  our $safe_ensembl_version = &Get_ensembl_version_safe($db);
  our $latest_ensembl_version = &Get_ensembl_version($db);
  our $ensembl_version = $safe_ensembl_version;
  our $species = "";
  our $assembly_version = "";

  our $names = 1;
  our $get_available_species = 0;

  our $max_genes = 0; ## For testing only

  our @features_to_download = qw(
    protein_coding
    processed_transcript
    lincRNA
    sRNA
    snRNA
    miRNA
    misc_RNA
    snoRNA
  );


  ################################################################
  ## Read argument values
  &ReadArguments();

  if ($ensembl_version eq "safe") {
    $ensembl_version = $safe_ensembl_version;

  } elsif ($ensembl_version eq "latest") {
    $ensembl_version = $latest_ensembl_version;

  } else {
    &RSAT::error::FatalError($ensembl_version, "is not a valid Ensembl version. Minimun supported version is 70.") if ($ensembl_version < 70);
    &RSAT::error::FatalError("$ensembl_version is not supported as Ensembl version. Can't be superior to latest ensembl_version",$latest_ensembl_version) if ($ensembl_version > $latest_ensembl_version);
  }

  my ($host,$port) = &Get_host_port($db);

  ################################################################
  ## Print verbose
  $out = &OpenOutputFile($outfile{output});
  &Verbose() if ($main::verbose >= 1 && $get_available_species);

  ################################################################
  ##Print available species
  if ($get_available_species) {
    &RSAT::message::TimeWarn("Getting the list of available species (download-ensembl-features)") if ($main::verbose >= 1);
    $registry->load_registry_from_db(
      -host => $host,
      -port => $port,
      -user => 'anonymous',
      -db_version => $ensembl_version
    );

    my @db_adaptors = @{ $registry->get_all_DBAdaptors() };
    my %species_taxon = ();

    if ($db eq "ensembl_genomes") {
      my $ens_version = &Get_ensembl_version_safe($db);
      %species_taxon = &Get_species_taxon($db,$ens_version);
    }

    @sort_species = sort {$a->species() cmp $b->species()} @db_adaptors;

    foreach my $db_adaptor (@sort_species) {
    my $db_connection = $db_adaptor->dbc();
      if ($db_adaptor->group() eq "core") {
        print $out ucfirst($db_adaptor->species());
        print $out "\t",$species_taxon{$db_adaptor->species()} if ($species_taxon{$db_adaptor->species()});
        print $out "\n";
      }
    }
    $registry->disconnect_all();

    my $exec_time = &RSAT::util::ReportExecutionTime($start_time); ## This has to be exectuted by all scripts
    print $out $exec_time if ($main::verbose >= 1); ## only report exec time if verbosity is specified
    close $out;
    exit(0);
  }

  &RSAT::error::FatalError("No species indicate. Use -species option") unless ($species);

  ################################################################
  ## Connecting to ensembl
  &RSAT::message::TimeWarn("Loading registry from Ensembl") if ($main::verbose >= 2);
  $registry->load_registry_from_db(
    -host => $host,
    -port => $port,
    -user => 'anonymous',
    -db_version => $ensembl_version,
    -species => $species
  );

  ################################################################
  ## Get Adaptator
  &RSAT::message::TimeWarn("Getting species slice from Ensembl") if ($main::verbose >= 2);
  my $slice_adaptor = $registry->get_adaptor($species, 'core', 'slice');
  my $mc = $registry->get_adaptor( $species, 'Core', 'MetaContainer' );

  my $mca = Bio::EnsEMBL::Registry->get_adaptor( $species, "core",  "metacontainer" );
  if ($mca) {
      &RSAT::message::Debug("Coordinate system adaptor (mca)", $mca) if ($main::verbose >= 0);
  } else {
      &RSAT::error::FatalError("Cannot get coordinate system adaptor (mca) for species", $species);
  }

  ################################################################
  ## Get local dir
  my $coordsystem = $csa->fetch_by_rank(0);
  if ($coordsystem) {
    &RSAT::message::Debug("CoordSystem", $coordsystem) if ($main::verbose >= 0);
  } else {
    &RSAT::error::FatalError("Cannot get CoordSystem");
  }

  ## Get genome_dir
  $assembly_version = $mca->single_value_by_key('assembly.name');
  my $genome_dir = &Get_genome_dir($data_dir,$species, $assembly_version,$ensembl_version);

  &RSAT::util::CheckOutDir($genome_dir);

  ################################################################
  ## Open outputfile file
  my %out_stream = &OpenOutputStreams(@features_to_download);
  &Verbose() if ($verbose >= 1);

  ################################################################
  ## Transform feat to download from array to hash
  my %feat_to_download = ();
  foreach (@features_to_download) {
    $feat_to_download{$_} = 1;
  }


  ################################################################
  # Get all Top Level slice
  &RSAT::message::TimeWarn("Fetching all slices for species",$species) if ($verbose >= 2);
  my @slices = @{$slice_adaptor->fetch_all('toplevel')};

  ## Fix an Ensembl error with the two Y human chromosomes: on the
  ## API, the Human chromosome covers two slices, because a large
  ## fragment (covering 2.6Mb) at the beginning of chromosome Y is
  ## homologous to the X chromosome. The Ensembl dataset presents two
  ## separated slices to avoir redundancy in the annotations. However
  ## this is not compatible with RSAT data model -> we merge them in a
  ## single contig covering the whole Y chromosome.
  ##
  ## In addition, there are apparently some inconsistencies between
  ## some feature annotations and the limits of the Y chromosome
  ## (feature coordinates are provided relative to the chromosome
  ## start, but the slice only starts 2.6Mb further).
  if ($species eq "homo_sapiens") {
      my @slice_tmp = ();
      foreach my $slice (@slices) {
        push (@slice_tmp,$slice) unless ($slice->name() =~ /:Y:/);
      }
      push (@slice_tmp,$slice_adaptor->fetch_by_region( 'chromosome', 'Y' ));
      @slices = @slice_tmp;
  }

  ## Organism
  &RSAT::message::TimeWarn("Getting info on species",$species) if ($verbose >= 2);

  my $outstream_organism = $out_stream{'organism'};

  print $outstream_organism $mc->get_taxonomy_id(),"\t";
  my ($c1,$c2) = split(" ",$mc->get_scientific_name());
  print $outstream_organism join(";",reverse(@{$mc->get_classification ( )})),";",$c1,";",ucfirst($c2),"\t";
  print $outstream_organism $mc->get_scientific_name(),"\n";

  ## Get the alternative organism names ("aliases" according to Ensembl nomenclature)
  if ($names) {
    my $outstream_organism_names = $out_stream{'organism_names'};
    print $outstream_organism_names $mc->get_taxonomy_id(),"\t",$species,"\t","primary","\n";
    my @alias = @{$registry->get_all_aliases($species)};
    foreach (@alias) {
      print $outstream_organism_names $mc->get_taxonomy_id(),"\t",$_,"\t","alternate","\n";
    }
  }

  ## Get all features
  my $s=0;
  my $nb_slices = scalar(@slices);
  foreach my $slice (@slices) {
    $s++;

    ## Gene
    my $outstream_gene = $out_stream{'gene'};

    my @genes = @{$slice->get_all_Genes()};
    my $nb_genes = scalar(@genes);
    &RSAT::message::TimeWarn("Getting features for slice", $s."/".$nb_slices, $slice->name(), $nb_genes." genes") if ($verbose >= 2);
    my $g=0;
    while ( my $gene = shift @genes ) {
      $g++;

      if (($max_genes > 0) && ($g > $max_genes)) {
	&RSAT::message::Warning("Stopping gene names after", $g, "genes");
	last;
      }

      my $gene_known = "Novel";
      $gene_known = "Known" if ($gene->is_known());

      my $strand = "D";
      $strand = "R" unless ($gene->strand() == 1);

      my $description = "<no descrition>";
      $description = $gene->description if ($gene->description);

      my $gene_id = $gene->display_id();

      my $gene_external_name = $gene->external_name();
      $gene_external_name = $gene->display_id() unless ($gene_external_name);

      print $outstream_gene $gene->display_id(),"\t",$gene_known,"\t",$gene->biotype(),"\t",$gene_external_name,"\t";
      print $outstream_gene $slice->name(),"\t",$gene->start(),"\t",$gene->end(),"\t",$strand,"\t",$description,"\n";

      if ($main::verbose >= 2) {
	if (($g%100==1) || ($main::verbose >= 3)) {
	  &RSAT::message::TimeWarn("Gene", $g."/".$nb_genes, $gene_external_name);
	}
      }

      ## Gene name
      if ($names) {
        my $outstream_gene_names = $out_stream{'gene_names'};
        my %print_name = ();

        my @names_list = @{ $gene->get_all_DBEntries() };
        foreach my $name (@names_list) {
          next if ($print_name{$name->display_id()});

          my $status = "alternate";
          $status = "primary" if ($name->display_id() eq $gene_external_name);

          print $outstream_gene_names $gene->display_id(),"\t",$name->display_id(),"\t";
          print $outstream_gene_names $status,"\t",$name->dbname(),"\n";

          $print_name{$name->display_id()} = 1;
        }

	unless ($print_name{$gene_external_name}) {
          print $outstream_gene_names $gene->display_id(),"\t",$gene_external_name,"\t";
          print $outstream_gene_names 'primary',"\t",'',"\n";
	}
      }


      ## Transcript
      my $transcripts = $gene->get_all_Transcripts();

      while ( my $transcript = shift @{$transcripts} ) {
        next unless ($feat_to_download{$transcript->biotype()});

	## Choose the appropriate output stream depending on the biotype of the current transcript
        my $outstream_transcript = $out_stream{$transcript->biotype()};

	## Define transcript (evidence) type
        my $trans_known = "putative";
        $trans_known = "known" if ($transcript->is_known());

	## Define external_name for current transcript
	my $trans_external_name = $transcript->external_name() || 
	    $transcript->display_id() || $gene_external_name || "";

        my $coding_s = ".";
        my $coding_e = ".";
        $coding_s = $transcript->coding_region_start() if ($transcript->coding_region_start());
        $coding_e = $transcript->coding_region_end() if ($transcript->coding_region_end());

        print $outstream_transcript $transcript->display_id(),"\t",$trans_known,"\t", $transcript->biotype(),"\t",$trans_external_name,"\t";
        print $outstream_transcript $transcript->slice()->name(),"\t",$transcript->start(),"\t", $transcript->end(),"\t",$transcript->strand(),"\t";
        print $outstream_transcript $coding_s,"\t",$coding_e,"\t";
        print $outstream_transcript $description,"\t",$gene->display_id(),"\n";

        ## Transcript names
        if ($names) {
          my $outstream_transcript_names = $out_stream{$transcript->biotype()."_names"};

          my %print_name = ();
          my @names_list = @{ $transcript->get_all_DBEntries() };
          foreach $name (@names_list) {
            next if ($print_name{$name->display_id()});

            my $status = "alternate";
            $status = "primary" if (($trans_external_name) && ($name->display_id() eq $trans_external_name));

            print $outstream_transcript_names $transcript->display_id(),"\t",$name->display_id(),"\t";
            print $outstream_transcript_names $status,"\t",$name->dbname(),"\n";

            $print_name{$name->display_id()} = 1;
          }

          unless ($print_name{$trans_external_name}) {
            print $outstream_transcript_names $transcript->display_id(),"\t",$trans_external_name,"\t";
            print $outstream_transcript_names 'primary',"\t",'',"\n";
          }

	  ## Add GeneId as synonym for transcript
	  print $outstream_transcript_names join("\t",
						 $transcript->display_id(),
						 $gene_id,
						 "alternate",
						 "GeneId"), "\n";
	  
	  ## Add gene name as synonym for transcript
	  print $outstream_transcript_names join("\t",
						 $transcript->display_id(),
						 $gene_external_name,
						 "alternate",
						 "gene_name"), "\n";
        }




        ## Exon
        my $outstream_exon = $out_stream{'exon'};
        my $outstream_coding_exon = $out_stream{'coding_exon'};

        my @exons = @{ $transcript->get_all_Exons() };

        foreach $exon (@exons) {
          my $exon_line = $exon->display_id()."\t".$exon->display_id()."\t".$exon->display_id()."\t";
          $exon_line .= $exon->start()."\t".$exon->end()."\t".$exon->strand()."\t";
          $exon_line .= $transcript->display_id()."\t".$gene->display_id()."\n";

          print $outstream_exon $exon_line;

          if ($transcript->coding_region_start() && $transcript->coding_region_end() ) {
            if ($exon->end >= $transcript->coding_region_start() && $exon->start <= $transcript->coding_region_end() ) {
              print $outstream_coding_exon $exon_line;
            }
          }

        }

        ## Intron
        my $outstream_intron = $out_stream{'intron'};

        my @introns = @{$transcript->get_all_Introns()};
        my $i = 1;
        foreach $intron (@introns) {
          print $outstream_intron "INTRON".$i."-".$transcript->display_id(),"\t","intron","\t","INTRON".$i."-".$transcript->display_id(),"\t";
          print $outstream_intron $slice->name(),"\t",$intron->start(),"\t",$intron->end(),"\t",$strand,"\t";
          print $outstream_intron $transcript->display_id(),"\t",$gene->display_id(),"\n";
          $i++;
        }

        ## UTR
        my $outstream_utr = $out_stream{'utr'};

        if ($transcript->cdna_coding_start()) {
          if ( $transcript->five_prime_utr_Feature() ) {
            print $outstream_utr "5'UTR-".$transcript->display_id(),"\t","5'UTR","\t","5'UTR-".$transcript->display_id(),"\t";
            print $outstream_utr $slice->name(),"\t",$transcript->five_prime_utr_Feature()->start(),"\t",$transcript->five_prime_utr_Feature()->end(),"\t",$strand,"\t";
            print $outstream_utr $transcript->display_id(),"\t",$gene->display_id(),"\n";
          }
        }

        if ($transcript->cdna_coding_end()) {
          if ( $transcript->three_prime_utr_Feature() ) {
            print $outstream_utr "3'UTR-".$transcript->display_id(),"\t","3'UTR","\t","3'UTR-".$transcript->display_id(),"\t";
            print $outstream_utr $slice->name(),"\t",$transcript->three_prime_utr_Feature()->start(),"\t",$transcript->three_prime_utr_Feature()->end(),"\t",$strand,"\t";
            print $outstream_utr $transcript->display_id(),"\t",$gene->display_id(),"\n";
          }
        }

        ## CDS
        my $outstream_cds = $out_stream{'cds'};

        if ($transcript->cdna_coding_start() && $transcript->cdna_coding_end()) {
          $prot = $transcript->translation();
          print $outstream_cds $prot->display_id(),"\t","CDS","\t",$prot->display_id(),"\t";
          print $outstream_cds $slice->name(),"\t",$prot->genomic_start(),"\t",$prot->genomic_end(),"\t",$strand,"\t";
          print $outstream_cds $description,"\t",$transcript->display_id(),"\t",$gene->display_id(),"\n";

          ## CDS Name
          if ($names) {
            my $outstream_cds_names = $out_stream{'cds_names'};
            my %print_name = ();

            my @names_list = @{$prot->get_all_DBEntries()};
            foreach my $name (@names_list) {
              next if ($print_name{$name->display_id()});

              my $status = "alternate";
              $status = "primary" if (($trans_external_name) && ($name->display_id() eq $trans_external_name));

              print $outstream_cds_names $prot->display_id(),"\t",$name->display_id(),"\t";
              print $outstream_cds_names $status,"\t",$name->dbname(),"\n";

              $print_name{$name->display_id()} = 1;
            }

            unless ($print_name{$trans_external_name}) {
              print $outstream_cds_names $prot->display_id(),"\t",$trans_external_name,"\t";
              print $outstream_cds_names 'primary',"\t",'',"\n";
            }

	    ## Add GeneId as synonym for CDS
	    print $outstream_cds_names join("\t",
					    $prot->display_id(),
					    $gene_id,
					    "alternate",
					    "GeneId"), "\n";
	  
	    ## Add gene name as synonym for cds
	    print $outstream_cds_names join("\t",
					    $prot->display_id(),
					    $gene_external_name,
					    "alternate",
					    "gene_name"), "\n";
          }

          ## Aminoacid sequences
          if ($prot->seq()) {
            my $outstream_aa_seq = $out_stream{'aa_seq'};
            &PrintNextSequence($outstream_aa_seq, "fasta", 60, $prot->seq(), $prot->display_id());
          }
        }
      }
    }
  }

  ################################################################
  ## Report execution time and close output stream
  my $exec_time = &RSAT::util::ReportExecutionTime($start_time); ## This has to be exectuted by all scripts
  print $exec_time if ($main::verbose >= 1); ## only report exec time if verbosity is specified
  close $out;

  exit(0);
}


################################################################
################### SUBROUTINE DEFINITION ######################
################################################################

################################################################
## Display full help message
sub PrintHelp {
  system "pod2text -c $0";
  exit(0);
}

################################################################
## Display short help message
sub PrintOptions {
  &PrintHelp();
}

################################################################
## Verbose message
sub Verbose {
  print $out "; download-ensembl-features ";
  &PrintArguments($out);

  if (%main::outfile) {
    print $out "; Output files\n";
    while (my ($key,$value) = each %main::outfile) {
      printf $out ";\t%-13s\t%s\n", $key, $value;
    }
  }
  printf $out "; %-22s\t%s\n", "Ensembl safe version", $safe_ensembl_version;
  printf $out "; %-22s\t%s\n", "Ensembl version", $ensembl_version;
}

################################################################
## Read arguments
sub ReadArguments {
  my $arg;
  my @arguments = @ARGV; ## create a copy to shift, because we need ARGV to report command line in &Verbose()
  while (scalar(@arguments) >= 1) {
    $arg = shift (@arguments);

=pod

=head1 OPTIONS

=over 4

=item B<-v #>

Level of verbosity (detail in the warning messages during execution)

=cut
    if ($arg eq "-v") {
      if (&IsNatural($arguments[0])) {
        $main::verbose = shift(@arguments);
      } else {
        $main::verbose = 1;
      }

=pod

=item B<-h>

Display full help message

=cut
    } elsif ($arg eq "-h") {
      &PrintHelp();

=pod

=item B<-help>

Same as -h

=cut
    } elsif ($arg eq "-help") {
      &PrintOptions();

=pod

=item B<-species species_name>

Species that you want download variation (Homo_sapiens, Mus_musculus).

=cut
    } elsif (($arg eq "-species") || ($arg eq "-org")) {
      $main::species = lc(shift(@arguments));

=pod

=item B<-no_names>

Don't download all the other name of a feature.

Getting names if very time consumming .

=cut
    } elsif ($arg eq "-no_names") {
      $main::names = 0;

=pod


=item B<-type #>

Transcript biotype you want to download

Default :

protein_coding
- processed_transcript
- lincRNA
- sRNA
- snRNA
- miRNA
- misc_RNA
- snoRNA

Other biotype :

unprocessed_pseudogene
- processed_pseudogene
- transcribed_processed_pseudogene
- transcribed_unprocessed_pseudogene
- sense_intronic
- nonsense_mediated_decay
- antisense
- IG_V_pseudogene
- retained_intron
- pseudogene
- unitary_pseudogene
- IG_V_gene
- IG_J_gene
- IG_C_gene
- IG_C_pseudogene
- sense_overlapping
- polymorphic_pseudogene


This option can be used iteratively to download multiple types. Example:
   -type IG_V_gene -type IG_J_gene

Multiple types can also be specified separated by commas.
  -type IG_V_gene,IG_J_gene

=cut
    } elsif ($arg eq "-type") {
      my $type = shift(@arguments);
      push @main::features_to_download, split ",", $type;

=item B<-dir #>

The directory in wich RSAT genomes must be installed. The selected
species will be isntalled in a sub-directory composed of Species name
and Ensembl genome version.

Default : $RSAT/data/genomes/

=cut
    } elsif ($arg eq "-dir") {
      $main::data_dir = shift(@arguments);

=pod

=item   B<-o outputfile>

The output file is used to hold a trace of the transfers (verbosity),
and to store the list of species when the option -available_species is
activated.

If no output file is specified, the standard output is used.

=cut
    } elsif ($arg eq "-o") {
      $outfile{output} = shift(@arguments);

=pod

=item B<-ensembl_genomes>

Download genome from ensembl genomes (Protist, fungi ...);

=cut
    } elsif ($arg eq "-ensembl_genomes") {
      $main::db = "ensembl_genomes";

=pod

=item B<-available_species>

Get all available species on Ensembl

=cut
    } elsif ($arg eq "-available_species") {
      $main::get_available_species = 1;

=pod

=item B<-version #>

The release version of ensEMBL.

Supported versions: 70 to 72, safe, latest

Default : I<safe>

=over

=item I<safe>

Some Ensembl API function may change between two Ensembl release.

For this reason, we defined the "safe" version, which corresponds to
the latest version of ensembl which has been checked to work with this
script.

=item latest

This corresponds to the lastest version of Ensembl. Beware: this
version is not guaranteed to be compatible with RSAT, in case Ensembl
would change their file formats or locations.

=cut
    } elsif ($arg eq "-version") {
      my $version = shift(@arguments);
      if ( &IsNatural($version) || $version eq "safe" || $version eq "latest" ) {
        $main::ensembl_version = $version;
      } else {
        &RSAT::error::FatalError($version,"is not supported");
      }

    } else {
      &FatalError(join("\t", "Invalid option", $arg));
    }
  }

=pod

=back

=cut

}



################################################################
## Open all outputs
sub OpenOutputStreams {
  my (@features_to_download) = @_;
  my %out_stream = ();

  my $time = &AlphaDate();

  ## Organism File
  $outfile{'organism'} = &Get_feature_file($data_dir,$species, $assembly_version,$ensembl_version,'organism');
  $out_stream{'organism'} = &OpenOutputFile($outfile{'organism'});
  my $outstream_organism = $out_stream{'organism'};
  print $outstream_organism  "-- dump date","\t",$time,"\n";
  print $outstream_organism  "-- class","\t","EnsEMBL::organism","\n";
  print $outstream_organism  "-- table","\t","organism","\n";
  print $outstream_organism  "-- table","\t","main","\n";
  print $outstream_organism  "-- field 1","\t","id","\n";
  print $outstream_organism  "-- field 2","\t","taxonomy","\n";
  print $outstream_organism  "-- field 3","\t","name","\n";
  print $outstream_organism  "-- header","\n";
  print $outstream_organism  "-- ",join("\t",qw(id taxonomy name) ),"\n";

  ## Gene file
  $outfile{'gene'} = &Get_feature_file($data_dir, $species, $assembly_version,$ensembl_version,'gene');
  $out_stream{'gene'} = &OpenOutputFile($outfile{'gene'});
  my $outstream_gene = $out_stream{'gene'};
  print $outstream_gene  "-- dump date","\t",$time,"\n";
  print $outstream_gene  "-- class","\t","EnsEMBL::gene","\n";
  print $outstream_gene  "-- table","\t","gene","\n";
  print $outstream_gene  "-- table","\t","main","\n";
  print $outstream_gene  "-- field 1","\t","id","\n";
  print $outstream_gene  "-- field 2","\t","status","\n";
  print $outstream_gene  "-- field 3","\t","type","\n";
  print $outstream_gene  "-- field 4","\t","name","\n";
  print $outstream_gene  "-- field 5","\t","contig","\n";
  print $outstream_gene  "-- field 6","\t","start_pos","\n";
  print $outstream_gene  "-- field 7","\t","end_pos","\n";
  print $outstream_gene  "-- field 8","\t","strand","\n";
  print $outstream_gene  "-- field 9","\t","description","\n";
  print $outstream_gene  "-- header","\n";
  print $outstream_gene  "-- ",join("\t",qw(id status type name contig start_pos end_pos strand description) ),"\n";

  ## Transcripts files
  foreach (@features_to_download) {
    $outfile{$_} = &Get_feature_file($data_dir, $species, $assembly_version,$ensembl_version,$_);
    $out_stream{$_} = &OpenOutputFile($outfile{$_});
    my $outstream_transcript = $out_stream{$_};
    print $outstream_transcript "-- dump date","\t",$time,"\n";
    print $outstream_transcript "-- class    EnsEMBL::",$_,"\n";
    print $outstream_transcript "-- table","\t",$_,"\n";
    print $outstream_transcript "-- table","\t","main","\n";
    print $outstream_transcript "-- field 1","\t","id","\n";
    print $outstream_transcript "-- field 2","\t","status","\n";
    print $outstream_transcript "-- field 3","\t","type","\n";
    print $outstream_transcript "-- field 4","\t","name","\n";
    print $outstream_transcript "-- field 5","\t","contig","\n";
    print $outstream_transcript "-- field 6","\t","start_pos","\n";
    print $outstream_transcript "-- field 7","\t","end_pos","\n";
    print $outstream_transcript "-- field 8","\t","coding_start","\n";
    print $outstream_transcript "-- field 9","\t","coding_end","\n";
    print $outstream_transcript "-- field 10","\t","strand","\n";
    print $outstream_transcript "-- field 11","\t","description","\n";
    print $outstream_transcript "-- field 12","\t","GeneID","\n";
    print $outstream_transcript "-- header","\n";
    print $outstream_transcript "-- ",join("\t",qw(id status type name contig start_pos end_pos coding_start coding_end strand description GeneID) ),"\n";
  }

  $outfile{'mrna'} = &Get_feature_file($data_dir, $species, $assembly_version,$ensembl_version,'mrna');
  my $ln_cmd = "ln -s ".$outfile{'protein_coding'}." ".$outfile{'mrna'};
  &doit($ln_cmd, 0, 0, 0);

  ## Exon File
  $outfile{'exon'} = &Get_feature_file($data_dir, $species, $assembly_version,$ensembl_version,'exon');
  $out_stream{'exon'} = &OpenOutputFile($outfile{'exon'});
  my $outstream_exon = $out_stream{'exon'};
  print $outstream_exon "-- dump date","\t",$time,"\n";
  print $outstream_exon "-- class","\t","EnsEMBL::exon","\n";
  print $outstream_exon "-- table","\t","exon","\n";
  print $outstream_exon "-- table","\t","main","\n";
  print $outstream_exon "-- field 1","\t","id","\n";
  print $outstream_exon "-- field 2","\t","type","\n";
  print $outstream_exon "-- field 3","\t","name","\n";
  print $outstream_exon "-- field 4","\t","contig","\n";
  print $outstream_exon "-- field 5","\t","start_pos","\n";
  print $outstream_exon "-- field 6","\t","end_pos","\n";
  print $outstream_exon "-- field 7","\t","strand","\n";
  print $outstream_exon "-- field 8","\t","transcriptID","\n";
  print $outstream_exon "-- field 9","\t","GeneID","\n";
  print $outstream_exon "-- header","\n";
  print $outstream_exon "-- ",join("\t",qw(id type name contig start_pos end_pos strand transcriptID GeneID) ),"\n";

  ## Coding Exon File
  $outfile{'coding_exon'} = &Get_feature_file($data_dir, $species, $assembly_version,$ensembl_version,'coding_exon');
  $out_stream{'coding_exon'} = &OpenOutputFile($outfile{'coding_exon'});
  my $outstream_coding_exon = $out_stream{'coding_exon'};
  print $outstream_coding_exon "-- dump date","\t",$time,"\n";
  print $outstream_coding_exon "-- class","\t","EnsEMBL::coding_exon","\n";
  print $outstream_coding_exon "-- table","\t","coding_exon","\n";
  print $outstream_coding_exon "-- table","\t","main","\n";
  print $outstream_coding_exon "-- field 1","\t","id","\n";
  print $outstream_coding_exon "-- field 2","\t","type","\n";
  print $outstream_coding_exon "-- field 3","\t","name","\n";
  print $outstream_coding_exon "-- field 4","\t","contig","\n";
  print $outstream_coding_exon "-- field 5","\t","start_pos","\n";
  print $outstream_coding_exon "-- field 6","\t","end_pos","\n";
  print $outstream_coding_exon "-- field 7","\t","strand","\n";
  print $outstream_coding_exon "-- field 8","\t","transcriptID","\n";
  print $outstream_coding_exon "-- field 9","\t","GeneID","\n";
  print $outstream_coding_exon "-- header","\n";
  print $outstream_coding_exon "-- ",join("\t",qw(id type name contig start_pos end_pos strand transcriptID GeneID) ),"\n";


  ## Intron file
  $outfile{'intron'} = &Get_feature_file($data_dir, $species, $assembly_version,$ensembl_version,'intron');
  $out_stream{'intron'} = &OpenOutputFile($outfile{'intron'});
  my $outstream_intron = $out_stream{'intron'};
  print $outstream_intron "-- dump date","\t",$time,"\n";
  print $outstream_intron "-- class","\t","EnsEMBL::intron","\n";
  print $outstream_intron "-- table","\t","intron","\n";
  print $outstream_intron "-- table","\t","main","\n";
  print $outstream_intron "-- field 1","\t","id","\n";
  print $outstream_intron "-- field 2","\t","type","\n";
  print $outstream_intron "-- field 3","\t","name","\n";
  print $outstream_intron "-- field 4","\t","contig","\n";
  print $outstream_intron "-- field 5","\t","start_pos","\n";
  print $outstream_intron "-- field 6","\t","end_pos","\n";
  print $outstream_intron "-- field 7","\t","strand","\n";
  print $outstream_intron "-- field 8","\t","transcriptID","\n";
  print $outstream_intron "-- field 9","\t","GeneID","\n";
  print $outstream_intron "-- header","\n";
  print $outstream_intron "-- ",join("\t",qw(id type name contig start_pos end_pos strand transcriptID GeneID) ),"\n";

  ## UTR
  $outfile{'utr'} = &Get_feature_file($data_dir, $species, $assembly_version,$ensembl_version,'utr');
  $out_stream{'utr'} = &OpenOutputFile($outfile{'utr'});
  my $outstream_utr = $out_stream{'utr'};
  print $outstream_utr "-- dump date","\t",$time,"\n";
  print $outstream_utr "-- class","\t","EnsEMBL::utr","\n";
  print $outstream_utr "-- table","\t","utr","\n";
  print $outstream_utr "-- table","\t","main","\n";
  print $outstream_utr "-- field 1","\t","id","\n";
  print $outstream_utr "-- field 2","\t","type","\n";
  print $outstream_utr "-- field 3","\t","name","\n";
  print $outstream_utr "-- field 4","\t","contig","\n";
  print $outstream_utr "-- field 5","\t","start_pos","\n";
  print $outstream_utr "-- field 6","\t","end_pos","\n";
  print $outstream_utr "-- field 7","\t","strand","\n";
  print $outstream_utr "-- field 8","\t","transcriptID","\n";
  print $outstream_utr "-- field 9","\t","GeneID","\n";
  print $outstream_utr "-- header","\n";
  print $outstream_utr "-- ",join("\t",qw(id type name contig start_pos end_pos strand transcriptID GeneID) ),"\n";

  ## CDS
  $outfile{'cds'} = &Get_feature_file($data_dir, $species, $assembly_version,$ensembl_version,'cds');
  $out_stream{'cds'} = &OpenOutputFile($outfile{'cds'});
  my $outstream_cds = $out_stream{'cds'};
  print $outstream_cds "-- dump date","\t",$time,"\n";
  print $outstream_cds "-- class","\t","EnsEMBL::cds","\n";
  print $outstream_cds "-- table","\t","cds","\n";
  print $outstream_cds "-- table","\t","main","\n";
  print $outstream_cds "-- field 1","\t","id","\n";
  print $outstream_cds "-- field 2","\t","type","\n";
  print $outstream_cds "-- field 3","\t","name","\n";
  print $outstream_cds "-- field 4","\t","contig","\n";
  print $outstream_cds "-- field 5","\t","start_pos","\n";
  print $outstream_cds "-- field 6","\t","end_pos","\n";
  print $outstream_cds "-- field 7","\t","strand","\n";
  print $outstream_cds "-- field 8","\t","description","\n";
  print $outstream_cds "-- field 9","\t","transcriptID","\n";
  print $outstream_cds "-- field 10","\t","GeneID","\n";
  print $outstream_cds "-- header","\n";
  print $outstream_cds "-- ",join("\t",qw(id type name contig start_pos end_pos strand description transcriptID GeneID) ),"\n";

  ## AA sequence
  $outfile{'aa_seq'} = &Get_genome_dir($data_dir, $species, $assembly_version,$ensembl_version).&Get_species_dir_name($species, $assembly_version,$ensembl_version)."_aa.fasta";
  $out_stream{'aa_seq'} = &OpenOutputFile($outfile{'aa_seq'});

  ## Names files
  if ($names) {

    $outfile{'organism_names'} = &Get_feature_file($data_dir, $species, $assembly_version,$ensembl_version,'organism_names');
    $out_stream{'organism_names'} = &OpenOutputFile($outfile{'organism_names'});
    my $outstream_organism_names = $out_stream{'organism_names'};
    print $outstream_organism_names  "-- dump date","\t",$time,"\n";
    print $outstream_organism_names  "-- class","\t","EnsEMBL::organism","\n";
    print $outstream_organism_names  "-- table","\t","organism_names","\n";
    print $outstream_organism_names  "-- table","\t","lateral","\n";
    print $outstream_organism_names  "-- field 1","\t","id","\n";
    print $outstream_organism_names  "-- field 2","\t","names","\n";
    print $outstream_organism_names  "-- field 3","\t","status","\n";
    print $outstream_organism_names  "-- header","\n";
    print $outstream_organism_names  "-- ",join("\t",qw(id names status) ),"\n";

    $outfile{'gene_names'} = &Get_feature_file($data_dir, $species, $assembly_version,$ensembl_version,'gene_names');
    $out_stream{'gene_names'} = &OpenOutputFile($outfile{'gene_names'});
    my $outstream_gene_names = $out_stream{'gene_names'};
    print $outstream_gene_names "-- dump date","\t",$time,"\n";
    print $outstream_gene_names "-- class","\t","EnsEMBL::gene","\n";
    print $outstream_gene_names "-- table","\t","gene_names","\n";
    print $outstream_gene_names "-- table","\t","lateral","\n";
    print $outstream_gene_names "-- field 1","\t","id","\n";
    print $outstream_gene_names "-- field 2","\t","names","\n";
    print $outstream_gene_names "-- field 3","\t","status","\n";
    print $outstream_gene_names "-- field 4","\t","source","\n";
    print $outstream_gene_names "-- header","\n";
    print $outstream_gene_names "-- ",join("\t",qw(id names status source) ),"\n";

    $outfile{'cds_names'} = &Get_feature_file($data_dir, $species, $assembly_version,$ensembl_version,'cds_names');
    $out_stream{'cds_names'} = &OpenOutputFile($outfile{'cds_names'});
    my $outstream_cds_names = $out_stream{'cds_names'};
    print $outstream_cds_names "-- dump date","\t",$time,"\n";
    print $outstream_cds_names "-- class","\t","EnsEMBL::cds","\n";
    print $outstream_cds_names "-- table","\t","cds_names","\n";
    print $outstream_cds_names "-- table","\t","lateral","\n";
    print $outstream_cds_names "-- field 1","\t","id","\n";
    print $outstream_cds_names "-- field 2","\t","names","\n";
    print $outstream_cds_names "-- field 3","\t","status","\n";
    print $outstream_cds_names "-- field 4","\t","source","\n";
    print $outstream_cds_names "-- header","\n";
    print $outstream_cds_names "-- ",join("\t",qw(id names status source) ),"\n";

    foreach (@features_to_download) {
      $outfile{$_."_names"} = &Get_feature_file($data_dir, $species, $assembly_version,$ensembl_version,$_."_names");
      $out_stream{$_."_names"} = &OpenOutputFile($outfile{$_."_names"});
      my $outstream_transcript_names = $out_stream{$_."_names"};
      print $outstream_transcript_names "-- dump date","\t",$time,"\n";
      print $outstream_transcript_names "-- class","\t","EnsEMBL::",$_,"\n";
      print $outstream_transcript_names "-- table","\t",$_,"_names","\n";
      print $outstream_transcript_names "-- table","\t","lateral","\n";
      print $outstream_transcript_names "-- field","\t","id","\n";
      print $outstream_transcript_names "-- field","\t","names","\n";
      print $outstream_transcript_names "-- field","\t","status","\n";
      print $outstream_transcript_names "-- field","\t","source","\n";
      print $outstream_transcript_names "-- header","\n";
      print $outstream_transcript_names  "-- ",join("\t",qw(id names status source) ),"\n";
    }

    $outfile{'mrna_names'} = &Get_feature_file($data_dir, $species, $assembly_version,$ensembl_version,'mrna_names');
    &doit("ln -s $outfile{'protein_coding_names'} $outfile{'mrna_names'}", 0, 0, 0);
  }

  return %out_stream;
}

