#!/usr/bin/perl -w
############################################################
#
# $Id: gene2ec,v 1.16 2012/03/26 21:32:50 jvanheld Exp $
#
############################################################

## use strict;

=pod

=head1 NAME

gene2ec

=head1 VERSION

$program_version

=head1 DESCRIPTION

Find EC numbers or reaction IDs associated with a list of query gene,
or with a gene clustering file (several clusters, each comprizing one
or more genes).

=head1 AUTHORS

Jacques.van-Helden@univ-amu.fr

=head1 CATEGORY

=over

=item metabolism

=back

=head1 USAGE

gene2ec [-i inputfile] [-o outputfile] [-v #] [...]

=head1 INPUT FORMAT

=head2 Gene list

A list of query gens can be provided as a tab-delimited file, with one
row per query. The first word of each line is considered as a query,
the rest of the line is ignored.


=head2 Cluster file

A tab-delimited file containing at least 2 columns. 

1) First column indicates the query (gene name, ID or
   cross-reference).

2) Second column indicates the group (cluster, class) of the gene.

=head1 OUTPUT FORMAT

=head1 SEE ALSO

=over

=item B<convert-classes>

The program convert-classes converts various formats into a
tab-delimited cluster file, where the first column indicates the
element (gene ID or name) and the second column the cluster
(co-expression cluster, operon, ...).

=head1 WISH LIST

=over

=item B<wish 1>

=item B<wish 2>

=back

=cut


BEGIN {
  if ($0 =~ /([^(\/)]+)$/) {
    push (@INC, "$`lib/");
  }
}
require "RSA.lib";



################################################################
## Main package
package main;
{

  ################################################################
  ## Initialise parameters
  our $start_time = &RSAT::util::StartScript();
  our $program_version = do { my @r = (q$Revision: 1.16 $ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @r };
  #    $program_version = "0.00";

  our %infile = ();
  our %outfile = ();

  our $verbose = 0;
  our $in = STDIN;
  our $out = STDOUT;

  ################################################################
  ## Read argument values
  &ReadArguments();

  ################################################################
  ## Check argument values

  ################################################################
  ## Open output stream
  $out = &OpenOutputFile($outfile{output});


  ################################################################
  ## Read input
  ($main::in) = &OpenInputFile($main::infile{input});
  my @queries = ();
  my %query_index = ();
  while (<$main::in>) {
    next if (/^;/); ## skip comment lines
    next if (/^#/); ## Skip header line
    next unless (/\S/) ; # Skyp empty lines
    chomp();
    my ($query) = split("\t");
    push @queries, $query;
    $query_index{lc($query)} = $query; ## Queries are indexed for case-insenstive searches -> no lower cases
  }
  close $main::in if ($main::infile{input});
  &RSAT::message::TimeWarn("Loaded queries", scalar(@queries));
#  &RSAT::message::Debug("Keys", keys(%query_index)) if ($main::verbose >= 10);

  ################################################################
  ## Read Gene-EC-reaction links
  unless (defined($main::infile{ger})) {
    &RSAT::error::FatalError("No GER file has be specified (option -ger).");
  }

  ($main::ger) = &OpenInputFile($main::infile{ger});
  my $ger_nb = 0;
  while (<$main::ger>) {
    next if (/^;/); ## skip comment lines
    next if (/^#/); ## Skip header line
    next unless (/\S/) ; # Skyp empty lines
    chomp();
    $ger_nb++;
    my ($gene, $ec_or_reaction)  = split("\t");
    if ($gene) {
      if (defined($query_index{lc($gene)})) {
	$matched{$gene} = $query_index{lc($gene)};
	print $out join ("\t", $ec_or_reaction, $gene), "\n";
      }
    }
  }
  close $main::ger;
  &RSAT::message::TimeWarn("Loaded GER associations", $ger_nb) if ($main::verbose >= 2);
  &RSAT::message::TimeWarn("Matched queries", scalar(keys(%matched))) if ($main::verbose >= 2);

  ################################################################
  ## Print verbose
  &Verbose() if ($main::verbose >= 1);

  ################################################################
  ## Execute the command

  ################################################################
  ## Insert here output printing

  ################################################################
  ## Report execution time and close output stream
  my $exec_time = &RSAT::util::ReportExecutionTime($start_time); ## This has to be exectuted by all scripts
  print $out $exec_time if ($main::verbose >= 1); ## only report exec time if verbosity is specified
  close $out if ($outfile{output});

  exit(0);
}

################################################################
################### SUBROUTINE DEFINITION ######################
################################################################


################################################################
## Display full help message 
sub PrintHelp {
  system "pod2text -c $0";
  exit()
}

################################################################
## Display short help message
sub PrintOptions {
  &PrintHelp();
}

################################################################
## Read arguments 
sub ReadArguments {
  my $arg;
  my @arguments = @ARGV; ## create a copy to shift, because we need ARGV to report command line in &Verbose()
  while (scalar(@arguments) >= 1) {
    $arg = shift (@arguments);
    ## Verbosity

=pod

=head1 OPTIONS

=over 4

=item B<-v #>

Level of verbosity (detail in the warning messages during execution)

=cut
    if ($arg eq "-v") {
      if (&IsNatural($arguments[0])) {
	$main::verbose = shift(@arguments);
      } else {
	$main::verbose = 1;
      }


=pod

=item B<-h>

Display full help message

=cut
    } elsif ($arg eq "-h") {
      &PrintHelp();


=pod

=item B<-help>

Same as -h

=cut
    } elsif ($arg eq "-help") {
      &PrintOptions();


=pod

=item B<-i inputfile>

A list of queries, i.e. gene names or identifiers or cross-references.

If no input file is specified, the standard input is used.  This
allows to use the command within a pipe.

=cut
    } elsif ($arg eq "-i") {
      $main::infile{input} = shift(@arguments);


=pod

=item B<-ger gene_ec_reaction_file>

=cut
    } elsif ($arg eq "-ger") {
      $main::infile{ger} = shift(@arguments);


=pod

=item	B<-o outputfile>

If no output file is specified, the standard output is used.  This
allows to use the command within a pipe.

=cut
    } elsif ($arg eq "-o") {
      $outfile{output} = shift(@arguments);

    } else {
      &FatalError(join("\t", "Invalid option", $arg));

    }
  }

=pod

=back

=cut

}

################################################################
## Verbose message
sub Verbose {
  print $out "; gene2ec ";
  &PrintArguments($out);
  printf $out "; %-22s\t%s\n", "Program version", $program_version;
  if (%main::infile) {
    print $out "; Input files\n";
    while (my ($key,$value) = each %main::infile) {
      printf $out ";\t%-13s\t%s\n", $key, $value;
    }
  }
  if (%main::outfile) {
    print $out "; Output files\n";
    while (my ($key,$value) = each %main::outfile) {
      printf $out ";\t%-13s\t%s\n", $key, $value;
    }
  }
}


__END__
