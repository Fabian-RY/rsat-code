#!/usr/bin/perl 
############################################################
#
# $Id: calc-neighbour-limits,v 1.4 2002/01/07 08:36:51 jvanheld Exp $
#
# Time-stamp: <2002-01-07 09:35:08 jvanheld>
#
############################################################
#use strict;;
if ($0 =~ /([^(\/)]+)$/) {
    push (@INC, "$`lib/");
}
require "RSA.lib";
require "RSA.classes";

#### initialise parameters ####
my $start_time = &AlphaDate;

local $infile{input} = "";
local $outfile{output} = "";

local $verbose = 0;
local $in = STDIN;
local $out = STDOUT;

&ReadArguments;


#### check argument values ####
die "Error: you should specify an organism\n$supported_organisms\n"
    unless ($organism_name);

### open output file ###
$out = &OpenOutputFile($outfile{output});

#### verbose ####
&Verbose if ($verbose);

###### execute the command #########
&CheckOrganism($organism_name);
&ReadOrfPositions($organism_name);
&CalcNeighbourLimits();

###### print output ######

#### header
print $out (join ("\t",
		  ";ORF",
		  "name",
		  "chrom",
		  "left",
		  "right",
		  "strand",
		  "UP_limit",
		  "UP_sze",
		  "DWN_lim",
		  "DWN_sze",
		  "\n"
		  ));
foreach my $chr (sort keys %chromosome) {
    my @orfs = sort { $left{$a} <=> $left{$b} } $chromosome{$chr}->get_genes();
    foreach $orf (@orfs) {
	print $out (join ("\t",
			  $orf,
			  $name{$orf},
			  $chr,
			  $left{$orf},
			  $right{$orf},
			  $strand{$orf},
			  $upstr_limit{$orf},
			  $upstr_size{$orf},
			  $downstr_limit{$orf},
			  $downstr_size{$orf},
			  "\n"
		      ));
    }
}

###### verbose ######
if ($verbose) {
  my $done_time = &AlphaDate;
  print $out "; Job started $start_time\n";
  print $out "; Job done    $done_time\n";
}


###### close output file ######
close $out if ($outfile{output});


exit(0);


########################## subroutine definition ############################

sub PrintHelp {
#### display full help message #####
  open HELP, "| more";
  print HELP <<End_of_help;
NAME
	calc-neighbour-limits

        1999 by Jacques van Helden (jvanheld\@ucmb.ulb.ac.be)
	
USAGE
        calc-neighbour-limits [-v] -org genus_species

DESCRIPTION
	Calculates the relative positions of neighbour CDS for all
	genes of a selected organism.

OPTIONS
	-h	(must be first argument) display full help message
	-help	(must be first argument) display options
	-v	verbose
	-org	organism
End_of_help
  close HELP;
  exit;
}

sub PrintOptions {
#### display short help message #####
  open HELP, "| more";
  print HELP <<End_short_help;
calc-neighbour-limits options
----------------
-h	(must be first argument) display full help message
-help	(must be first argument) display options
-v	verbose
-org	organism
End_short_help
  close HELP;
  exit;
}


sub ReadArguments {
#### read arguments ####
  foreach my $a (0..$#ARGV) {
    ### verbose ###
    if ($ARGV[$a] eq "-v") {
      if (&IsNatural($ARGV[$a+1])) {
	$verbose = $ARGV[$a+1];
      } else {
	$verbose = 1;
      }
      
      ### detailed help
    } elsif ($ARGV[$a] eq "-h") {
      &PrintHelp;
      
      ### list of options
    } elsif ($ARGV[0] eq "-help") {
      &PrintOptions;
      
      ### organism
    } elsif ($ARGV[$a] eq "-org") {
      $organism_name = $ARGV[$a+1];
      unless (defined($supported_organism{$organism_name})) {
	  die ("Error: organism '$organism_name' is not supported on this site",
	       $supported_organisms,
	       "\n");
      }
      
    }
  }
}

sub Verbose {
  print $out "; calc-neighbour-limits ";
  &PrintArguments($out);
  if (defined(%infile)) {
    print $out "; Input files\n";
    while (($key,$value) = each %infile) {
      print $out ";\t$key\t$value\n";
    }
  }
  if (defined(%outfile)) {
    print $out "; Output files\n";
    while (($key,$value) = each %outfile) {
      print $out ";\t$key\t$value\n";
    }
  }
}
