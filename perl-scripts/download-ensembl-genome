#!/usr/bin/perl -w

############################################################
#
# $Id: download-ensembl-genome,v 1.6 2013/06/18 15:18:52 jvanheld Exp $
#
############################################################

use warnings;

=pod

=head1 NAME

download-ensembl-genome

=head1 VERSION

$program_version

=head1 DESCRIPTION

Download the genomic sequence of a user-specified organism from the
Ensembl server, and convert the original format (fasta) into raw files
required for RSAT sequence retrieval.

=head1 AUTHORS

Jeremy.Delerce@univ-amu.fr

Revised by Jacques.van-Helden@univ-amu.fr

=head1 CATEGORY

=over

=item util

=back

=head1 USAGE

 download-ensembl-genome -species # [-type #] [-o genomesDirectory] [-var] [-available_species] [-v #]

=head2 Examples

Get a list of species available at Ensembl

 download-ensembl-genome -available_species

Get raw genome sequences for the human genome (Homo sapiens)

 download-ensembl-genome -species Homo_sapiens

Get repeat-masked versio of the mouse genome (Mus musculus)

 download-ensembl-genome -species Mus_musculus -type dna_rm

=head1 OUTPUT FORMAT

Sequence file in raw format

=head1 SEE ALSO

=head2 download-ensembl-genome.pl

Downloads variation for a species

=head2 retrieve-snp-seq

I<retrieve-snp-seq> uses files product by I<download-ensembl-genome>
to make all the sequence of a variation.

=head2 snp-scan

Scan SNP sequences with one or several position-specific scoring
matrices.

=head1 WISH LIST

=cut

BEGIN {
  if ($0 =~ /([^(\/)]+)$/) {
    push (@INC, "$`lib/");
  }
  push (@INC, "../rsa-tools/perl-scripts/lib");
}

require "RSA.lib";
use File::Path qw( mkpath );

################################################################
## Main package
package	main;
{

  ###############################################################
  ## Initialise parameters
  our $start_time = &RSAT::util::StartScript();
  our $program_version = do { my @r = (q$Revision: 1.6 $ =~ /\d+/g); sprintf"%d."."%02d" x $#r, @r };
  
  our $verbose = 0;
  our $species = "";
  our $genome_dir = $ENV{'RSAT'}."/data/genomes/";
  our $in = "";
  our $out = SDTOUT;
  our @types = ();
  our $var = 0;
  our $get_available_species = 0;

#  our $ensembl_url = "ftp://ftp.ensemblgenomes.org/pub/protists/current/fasta/";
  our $ensembl_url = "rsync://ftp.ensembl.org/ensembl/pub/current_fasta/";
  
  ################################################################
  ## Read argument values
  &ReadArguments();
  

  &RSAT::message::Info("Ensembl URL", $ensembl_url) if ($main::verbose >= 1);
  

  ###############################################################
  ## Check arguments
  my @output = qx{rsync -navP "${ensembl_url}" "."};
  
  unless (scalar(@types)) {
      @types = ("dna");
  }
  foreach my $type (@types) {
    $download_type{$type} = 1;
  }

  if ($get_available_species) {
    foreach (@output) {
      next unless (/\/dna\/\n/);
      my ($species) = split("\/");
      print ucfirst($species),"\n";
    }
    exit(0);
  }

  unless ($species) {
    &RSAT::message::FatalError("You must specify a species to download. To get the list of supported species, type: download-ensembl-genome -available_species");
  }

  print scalar(@output),"\n";
  unless ( grep($_ eq $species."/dna/\n", @output )) {
    &RSAT::error::FatalError("Sequence of $species not available on Ensembl");
  }

  &RSAT::util::CheckOutDir($genome_dir);

  ################################################################
  ## Download sequence
  my %seq_type = ();
  my $genome_version = 0;
  my $contig_file = "";
  my @seq_available = ();
  my %seq_install = ();
  my $species_url = $ensembl_url."/".$species."/dna";
  &RSAT::message::Info("Species URL", $species_url) if ($main::verbose >= 1);


  ##Get all fasta file available for $species
  &RSAT::message::TimeWarn("Check latest sequence") if ($main::verbose >= 2);

  @output = qx{rsync -navP $species_url "."};

  my %seq_available = ();

  ## Iterate over sequence types (dna, dna_rm, dna_sm)
  foreach my $type (@types) {

    &RSAT::message::Info("Getting file list for sequence type", $type) if ($main::verbose >= 2);
    @{$seq_available{$type}} = ();
    ## Select the files to download for the selected type
    foreach (@output) {
      my $species = ucfirst($species);
      next unless (/$species/);
      my @info = split(/\./,substr($_,4));
      next unless (/\.$type\./);		##Remove non $type seq
      next unless (/chrom/);	##Remove non chromosomal or contig seq
      next if ($info[5] =~ "_");	##Remove patch
      $genome_version = $_;
      my $seq_file = substr($_,4);
      push(@{$seq_available{$type}}, $seq_file);
      $seq_type{$seq_file} = $type;
      $contig_file = substr($_,4) if (/\.nonchrom/);
    }
    if (scalar(@{$seq_available{$type}}) > 0) {
      &RSAT::message::Info(scalar(@{$seq_available{$type}}),"sequences of type", $type);
      push @seq_available, @{$seq_available{$type}};
    } else {
      &RSAT::error::FatalError("No sequence to download\n Check if sequence type $type available in $species_url/README");
    }

    ## Get genome version
    my @token = split(".$type", $genome_version);
    $genome_version = $token[0];
    $to_remove = "dna/".ucfirst($species).".";
    $genome_version =~ s/$to_remove//g;
    @token = split(/\./,$genome_version);
    $genome_version =~s/\.$token[$#token]//g;
    $species_dir = $genome_dir."/".ucfirst($species)."_ensembl_".$genome_version."/genome";

    ## Check if latest genome version is already installed and seq install
    &RSAT::message::TimeWarn("Checking local version") if ($main::verbose >= 2);
    if (-d $species_dir) {
      $wanted_file = $species_dir."/*$type.raw";
      foreach ( glob($wanted_file) ) {
	$_ =~s/$species_dir\///g;
	my @token = split("_");
	if ( $token[0] ne "chromosome" ) {
	  $seq_install{'nonchromosomal'} = 1;
	} else {
	  $seq_install{'chromosome'}{$token[2]} = 1;
	}
      }
    } else {
      mkpath( $species_dir, 0, 0777 ) unless (-d $species_dir);
    }
  }

  ##Compare install to available seq
  @seq_to_download = ();
  foreach my $seq (@seq_available) {
    my @token = split(/\./,$seq);
    @token = reverse(@token);
    if ( $seq =~ /non/ && $seq_install{'nonchromosomal'} ) {
	next;
    } elsif ( $seq_install{'chromosome'}{$token[2]} ) {
	next;
    }
    push (@seq_to_download, $seq);
  }

  if (scalar(@seq_to_download) == 0) {
    &RSAT::message::TimeWarn("Latest version of $species already installed in $species_dir");
    exit(0);
  }


  ##Download
  &RSAT::message::TimeWarn("Download sequence") if ($main::verbose >= 2);

  my $to_download_file = $species_dir."/to_download.txt";
  my $out_down = &OpenOutputFile($to_download_file);
  print $out_down join("",@seq_to_download),"\n";
  close $out_down;

  system ("rsync -avP --files-from='$to_download_file' $species_url $species_dir");
  unlink ($to_download_file);

  ################################################################
  ##Get fasta file

  ## gunzip
  &RSAT::message::TimeWarn("Decompress fasta sequence") if ($main::verbose >= 2);
  system ("gzip -d $species_dir/*.gz");


  ##Make one fasta file per contigs
  &RSAT::message::TimeWarn("Make contig fasta file") if ($main::verbose >= 2);
  print $species_dir."/".substr($contig_file,0,length($contig_file)-1),"\n";

  if ($contig_file ne "" && -f $species_dir."/".substr($contig_file,0,length($contig_file)-4)) {
    $contig_file =~ s/\.gz\n//g;

    ($file) = &OpenInputFile($species_dir."/".$contig_file);
    my $out_cont = 0;

    while (<$file>) {

      if (/>/) {
	close $out_cont if ($out_cont);

	my @infos = split(" ", substr($_,1));
	my $file_name = $infos[2].".fa";
	$file_name =~s/:/_/g;

	$out_cont = &OpenOutputFile($species_dir."/".$file_name);
	push (@seq_to_download, $file_name);
      }
      print $out_cont $_;
    }
    close $out_cont if ($out_cont);
    close $in;
  }

  ################################################################
  ## Convert fasta files into  raw file
  &RSAT::message::TimeWarn("Make raw file") if ($main::verbose >= 2);
  @contigs = ();
  @contig = ();

  foreach my $fasta (@seq_to_download) {
    $fasta =~ s/\.gz\n//g;
    if ($fasta =~ /non/) {
      unlink($species_dir."/".$fasta);
      next;
    }

    my ($file) = &OpenInputFile($species_dir."/".$fasta);
    my @infos = split(" ", substr(<$file>,1));
    my @infos2 = split(":", $infos[2]);

    my $file_name = $fasta;
    $file_name =~ s/\.gz//;
    $file_name =~ s/\.fa/\.raw/;
    $file_name =~ s/:/_/g;

    &RSAT::message::TimeWarn("Converting fasta", $fasta, "to raw", $file_name);
    system("$ENV{'RSAT'}/perl-scripts/convert-seq -i $species_dir/$fasta -from fasta -o $species_dir/$file_name -to raw");
    &RSAT::message::Debug($fasta, $seq_type{$fasta}) if ($main::verbose >= 0);

    ## TO DEBUG !!! ##
    if ($seq_type{$fasta.".gz"} eq "dna") {
	push ( @contig, $infos[0]."\t".$infos[2]."\t".$infos2[1]."\t".$infos2[0]."\t".$infos2[4]."\t".$infos2[0]." ".$infos[0]);
	push ( @contigs, $file_name."\t".$infos[2]);
    }
#    close $in;
    unlink($species_dir."/".$fasta);
  }

  if ($download_type{dna}) {
#  if ($type eq "dna") {

    ## Generate the contig file list (contigs.txt)
    &RSAT::message::TimeWarn("Make contigs.txt") if ($main::verbose >= 2);
    my $out_contigs = &OpenOutputFile($species_dir."/contigs.txt");
    print $out_contigs join("\n", @contigs),"\n";
    close $out_contigs;


    ## Generate the contig description table contig.tab
    &RSAT::message::TimeWarn("Make contig.tab") if ($main::verbose >= 2);
    my $out_contig =  &OpenOutputFile($species_dir."/contig.tab");
    print $out_contig "-- dump date    2007_06_25.105229";
    print $out_contig "-- class    EnsEMBL::Contig";
    print $out_contig "-- table    contig";
    print $out_contig "-- table    main";
    print $out_contig "-- field 1    id";
    print $out_contig "-- field 2    accession";
    print $out_contig "-- field 3    version";
    print $out_contig "-- field 4    type";
    print $out_contig "-- field 5    length";
    print $out_contig "-- field 6    description";
    print $out_contig "-- header";
    print $out_contig "-- id    accession    version    type    length    description\n";
    print $out_contig join("\n", @contig),"\n";
    close $out_contig;


    ##Write last genome install
    &RSAT::message::TimeWarn("Update latest_genome.tab") if ($main::verbose >= 2);
    $latest = $ENV{'RSAT'}."/data/genomes/latest_genome.tab";
    @species_last = ();
    if (-f $latest) {

      ($latest_file) = &OpenInputFile($latest);
      while (<$latest_file>) {
	my ($species_l,$version) = split("\t");
	push (@species_last, $_) unless ($species_l eq $species);
      }
      close $latest_file;
    }
    push (@species_last, $species."\t".$genome_version."\n");

    $latest_file = &OpenOutputFile($latest);
    print $latest_file join("",@species_last);
    close $latest_file;
  }


  &RSAT::message::Info("Genome installed in dir", $species_dir) if ($main::verbose >= 1);

  ################################################################
  ## Report execution time and close output stream
  my $exec_time = &RSAT::util::ReportExecutionTime($start_time); ## This has to be exectuted by all scripts
  print $exec_time if ($main::verbose >= 1); ## only report exec time if verbosity is specified
  close $out;

  ## Call get_ensembl_variation
  if ($var) {
    &RSAT::message::TimeWarn("Calling get_ensembl_variation") if ($main::verbose >= 2);
    system("perl /Users/jeremy/Downloads/download-ensembl-variation -species $species -v 2");
  }

  exit(0);
}

################################################################
################### SUBROUTINE DEFINITION ######################
################################################################

################################################################
## Display full help message
sub PrintHelp {
  system "pod2text -c $0";
  exit()
}

################################################################
## Display short help message
sub PrintOptions {
  &PrintHelp();
}

################################################################
## Read arguments
sub ReadArguments {
  my $arg;
  my @arguments = @ARGV; ## create a copy to shift, because we need ARGV to report command line in &Verbose()
  while (scalar(@arguments) >= 1) {
    $arg = shift (@arguments);

=pod

=head1 OPTIONS

=over 4

=item B<-v #>

Level of verbosity (detail in the warning messages during execution)

=cut
    if ($arg eq "-v") {
      if (&IsNatural($arguments[0])) {
	$main::verbose = shift(@arguments);
      } else {
	$main::verbose = 1;
      }

=pod

=item B<-h>

Display full help message

=cut
    } elsif ($arg eq "-h") {
      &PrintHelp();

=pod

=item B<-help>

Same as -h

=cut
    } elsif ($arg eq "-help") {
      &PrintOptions();

=pod

=item B<-species species_name>

Species that you want download variation (homo_sapiens, mus_musculus).

Help : Use I<supported-organisms-ensembl> to get available species

Default : homo_sapiens

=cut
    } elsif ($arg eq "-species") {
      $main::species = lc(shift(@arguments));

=pod

=item B<-type #>

Sequence type :

  - 'dna' - unmasked genomic DNA sequences.

  - 'dna_rm' - masked genomic DNA.  Interspersed repeats and low
     complexity regions are detected with the RepeatMasker tool and masked
     by replacing repeats with 'N's.

  - 'dna_sm' - soft-masked genomic DNA. All repeats and low complexity regions
    have been replaced with lowercased versions of their nucleic base

Default : dna

This option can be used iteratively to download multiple types. Example: 
   -type dna -type dna_rm

Multiple types can also be specified separated by commas.
  -type dna,dna_rm

=cut
    } elsif ($arg eq "-type") {
      my $type = shift(@arguments);
      push @main::types, split ",", $type;

=pod

=item B<-var>

Also install variation for this $species

=cut
    } elsif ($arg eq "-var") {
      $main::var = 1;

=pod

=item B<-url>

Specify an alternative URL to download Ensembl genomes.

Default URL: rsync://ftp.ensembl.org/ensembl/pub/current_fasta/

Example: to download protists, 

 download-ensembl-genome -v 1 -available_species \
   -url ftp://ftp.ensemblgenomes.org/pub/protists/current/fasta/

=cut
    } elsif ($arg eq "-url") {
      $main::ensembl_url = shift(@arguments);

=pod

=item B<-available_species>

Get all available species on Ensembl

=cut
    } elsif ($arg eq "-available_species") {
      $main::get_available_species = 1;

=pod

=item B<-o #>

The directory in wich RSAT genomes must be installed. The selected
species will be isntalled in a sub-directory composed of Species name
and Ensembl genome version.

Default : $RSAT/data/genomes/

=cut
    } elsif ($arg eq "-o") {
      $main::genome_dir = shift(@arguments);
    }
  }

=pod

=back

=cut

}

################################################################
## Verbose message
sub Verbose {
  print "; download-ensembl-genome ";
  &PrintArguments($out);

  if (%main::outfile) {
    print "; Output files\n";
    while (my ($key,$value) = each %main::outfile) {
      printf ";\t%-13s\t%s\n", $key, $value;
    }
  }
}

