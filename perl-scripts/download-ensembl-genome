#!/usr/bin/perl -w

############################################################
#
# $Id: download-ensembl-genome,v 1.19 2013/06/25 10:24:20 jeremy Exp $
#
############################################################

use warnings;

=pod

=head1 NAME

download-ensembl-genome

=head1 VERSION

$program_version

=head1 DESCRIPTION

Download the genomic sequence of a user-specified organism from the
Ensembl server, and convert the original format (fasta) into raw files
required for RSAT sequence retrieval.

=head1 AUTHORS

Jeremy.Delerce@univ-amu.fr

Revised by Jacques.van-Helden@univ-amu.fr

=head1 CATEGORY

=over

=item util

=back

=head1 USAGE

 download-ensembl-genome -species # [-type #] [-version #] [-o genomesDirectory] [-var] [-available_species] [-v #]

=head2 Examples

Get a list of species available at Ensembl

 download-ensembl-genome -available_species

Get raw genome sequences for the human genome (Homo sapiens)

 download-ensembl-genome -species Homo_sapiens

Get repeat-masked versio of the mouse genome (Mus musculus)

 download-ensembl-genome -species Mus_musculus -type dna_rm

=head1 OUTPUT FORMAT

Sequence file in raw format

=head1 SEE ALSO

=head2 download-ensembl-genome.pl

Downloads variation for a species

=head2 retrieve-snp-seq

I<retrieve-snp-seq> uses files product by I<download-ensembl-genome>
to make all the sequence of a variation.

=head2 snp-scan

Scan SNP sequences with one or several position-specific scoring
matrices.

=head1 WISH LIST
=over

=item B<Add support for download by ftp rather than rsync>

=item B<Add support for alternative ensembl repositories (Fungi, Bacteria, Metazoa, ...)>

=back


=cut

BEGIN {
  if ($0 =~ /([^(\/)]+)$/) {
    push (@INC, "$`lib/");
  }
}

require "RSA.lib";
require "RSAT_to_ensembl.lib.pl";

################################################################
## Main package
package	main;
{

  ###############################################################
  ## Initialise parameters
  our $start_time = &RSAT::util::StartScript();
  our $program_version = do { my @r = (q$Revision: 1.19 $ =~ /\d+/g); sprintf"%d."."%02d" x $#r, @r };

  our $out = SDTOUT;
  our $verbose = 0;
  our $genomes_dir = $ENV{'RSAT'}."/data/genomes/";

  our $species = "";
  our $assembly_version = "";
  our $ensembl_version = &Get_ensembl_version_safe();
  our $ensembl_rsync = &Get_ensembl_rsync();
  our @types = ();
  our $var = 0;
  our $get_available_species = 0;

  ################################################################
  ## Read argument values
  &ReadArguments();


  ################################################################
  ## Get information about Genome URL + available species

  ## Get the Ensembl version
  if ($ensembl_version eq "safe") {
  	$ensembl_version = &Get_ensembl_version_safe();
  	
  } elsif ($ensembl_version eq "latest") {
    $ensembl_version = &Get_ensembl_version();
  } else {
    &RSAT::error::FatalError("$ensembl_version not supported. Minimun version is 48.") if ($ensembl_version < 48);
    &RSAT::error::FatalError("$ensembl_version not supported. Can't be superior to latest ensembl_version",&Get_ensembl_version()) if ($ensembl_version > &Get_ensembl_version());
  }

  ## Get the URL of the ensembl rsync site
  our $fasta_rsync = &Get_fasta_rsync($ensembl_version);
  &RSAT::message::Info("Ensembl URL", $fasta_rsync) if ($main::verbose >= 2);

  ###############################################################
  ## Check arguments
  $out = &OpenOutputFile($outfile{output});

  ################################################################
  ## Print verbose
  &Verbose() if ($main::verbose >= 1);

  ## Get the list of available species
  my @available_species = qx{rsync -navP $fasta_rsync "."};

  ## Print out the list of available species
  if ($get_available_species) {
    foreach (@available_species) {
      next unless (/\/dna\/\n/);
      my ($species) = split("\/");
      print $out ucfirst($species),"\n";
    }
    my $exec_time = &RSAT::util::ReportExecutionTime($start_time); ## This has to be exectuted by all scripts
    print $out $exec_time if ($main::verbose >= 1); ## only report exec time if verbosity is specified
    close $out;
    exit(0);
  }

  ## Create the local directory for genomes
  &RSAT::util::CheckOutDir($genomes_dir);

  ## Use default sequence type if not specified.
  unless (scalar(@types)) {
      @types = ("dna");
  }


  ## Check that the species has been specified
  unless ($species) {
    &RSAT::error::FatalError("You must specify a species to download. To get the list of supported species, type: download-ensembl-genome -available_species");
  }

  ## Check that the user-specified species exists on Ensembl server
  unless ( grep($_ eq $species."/dna/\n", @available_species )) {
    &RSAT::error::FatalError("Sequence of $species not available on Ensembl");
  }

  ################################################################
  ## Get available sequence on Ensembl and compare with sequence already install

  my $species_rsync = &Get_species_rsync($species,$ensembl_version,'fasta');
  &RSAT::message::Info("Species URL", $species_rsync) if ($main::verbose >= 2);


  ##Get all fasta file available for $species
  &RSAT::message::TimeWarn("Get fasta file available") if ($main::verbose >= 2);
  my @available_fasta = qx{rsync -navP $species_rsync "."};


  ##Get genome version
  $assembly_version = &Get_assembly_version($species,$ensembl_version);


  ## Get install sequence
  &RSAT::message::TimeWarn("Checking local version") if ($main::verbose >= 2);
  $genome_dir = &Get_genome_dir($species, $assembly_version,$ensembl_version);
  
  &RSAT::util::CheckOutDir($genome_dir);
  
  my @contig_files = ();
  my @seq_to_download = ();

  ## Iterate over sequence types (dna, dna_rm, dna_sm)
  foreach my $type (@types) {
    &RSAT::message::Info("Getting file list for sequence type", $type) if ($main::verbose >= 2);
    my @seq_available = ();
    my %seq_install = ();

    ## Select the files to download for the selected type
    foreach (@available_fasta) {
    	 my $species_ucf = ucfirst($species);
      next unless (/$species_ucf/);
      next unless (/\.$type\./);		##Remove non $type seq
      next unless (/chrom/);	##Remove non chromosomal or contig seq
	
      my @info = split(/$type/);
      next if ($info[1] =~ "_");	##Remove patch
      
      push(@seq_available, $_);
    }

    if (scalar(@seq_available) > 0) {
      &RSAT::message::Info(scalar(@seq_available),"sequences of type", $type);
    } else {
      &RSAT::error::FatalError("No sequence to download\n Check if sequence type $type available in $species_rsync/README");
    }

    ## Get install sequence for the selected type
    foreach ( glob($genome_dir."/*") ) {
      next if (/contig/);
      next unless (/$type\./);

      $_ =~s/$genome_dir\///g;
      $_ =~s/\.raw/\.fa\.gz/g;

      $seq_install{$_} = 1;
    }

    ## Compare available and install seq
    foreach my $seq (@seq_available) {
      chomp($seq);

      unless ( $seq_install{$seq} ) {
        push (@seq_to_download, $seq);
        push(@contig_files, $seq) if ($seq =~ "nonchr");
      }
    }
  }

  if (scalar(@seq_to_download) == 0) {
    &RSAT::message::TimeWarn("Latest version of species", ucfirst($species), "already installed in directory\n", $genome_dir);
    exit(0);
  }

  ################################################################
  ##Download
  &RSAT::message::TimeWarn("Download sequence") if ($main::verbose >= 2);

  my $seq_to_download_file = $genome_dir."/to_download.txt";
  my $out_file = &OpenOutputFile($seq_to_download_file);
  print $out_file join("\n",@seq_to_download),"\n";
  close $out_file;

  system ("rsync -avP --files-from='$seq_to_download_file' $species_rsync $genome_dir");
  unlink ($seq_to_download_file);


  ################################################################
  ## Make one fasta file per contigs file
  &RSAT::message::TimeWarn("Make one fasta file per contig") if ($main::verbose >= 2);

  foreach my $contig_file (@contig_files) {

    system ("gzip -d $genome_dir/$contig_file");

    $contig_file =~ s/\.gz//g;

    my ($file) = &OpenInputFile($genome_dir.$contig_file);
    my $out_contig_file = "";

    while (<$file>) {

      if (/>/) {
	       close $out_contig_file if ($out_contig_file);

        my @file_name_info = split("dna",$contig_file);
	       my @fasta_infos = split(" ", substr($_,1));
        $fasta_infos[1] =~ s/:/\./g;

	       my $file_name = $file_name_info[0].$fasta_infos[1].".".$fasta_infos[0].".fa";

	       $out_contig_file = &OpenOutputFile($genome_dir.$file_name);
	       push (@seq_to_download, $file_name);
      }

      print $out_contig_file $_;
    }

    close $out_contig_file;
    unlink ($genome_dir.$contig_file);
    
    ##Make empty contig file to pass check install and prevent to download it again
    $contig_file =~ s/\.fa/\.raw/;
    my ($c_empty_file) = &OpenOutputFile($genome_dir.$contig_file);
    close $c_empty_file;
  }


  ################################################################
  ## Convert fasta files into  raw file
  &RSAT::message::TimeWarn("Make raw file") if ($main::verbose >= 2);
  my @contigs = (); ## To make contigs.txt
  my @contig = (); ##To make contig.tab

  foreach my $fasta (@seq_to_download) {
    next if ($fasta =~ /nonch/);

    my $file_name = $fasta;
    $file_name =~ s/\.gz//;
    $file_name =~ s/\.fa/\.raw/;
    $file_name =~ s/:/_/g;

    &RSAT::message::TimeWarn("Converting fasta", $fasta, "to raw", $file_name);
    system("$ENV{'RSAT'}/perl-scripts/convert-seq -i $genome_dir/$fasta -from fasta -o $genome_dir/$file_name -to raw");

    if ($fasta =~ /dna\./) {

      my ($file) = &OpenInputFile($genome_dir."/".$fasta);
      my @infos = split(" ", substr(<$file>,1));
      my @infos2 = split(":", $infos[2]);

	    push ( @contig, $infos[0]."\t".$infos[2]."\t".$infos2[1]."\t".$infos2[0]."\t".$infos2[4]."\t".$infos2[0]." ".$infos[0]);
	    push ( @contigs, $file_name."\t".$infos[2]);
    }

    unlink($genome_dir.$fasta);
  }


  ################################################################
  ## Make contigs.txt
  if (scalar(@contigs) > 0) {
    &RSAT::message::TimeWarn("Make contigs.txt") if ($main::verbose >= 2);
    my $out_contigs = &OpenOutputFile($genome_dir."/contigs.txt");
    print $out_contigs join("\n", @contigs),"\n";
    close $out_contigs;  
  }


  ################################################################
  ## Make contig.tab
  if (scalar(@contig) > 0) {
    &RSAT::message::TimeWarn("Make contig.tab") if ($main::verbose >= 2);
    my $out_contig =  &OpenOutputFile($genome_dir."/contig.tab");
    print $out_contig "-- dump date    2007_06_25.105229\n";
    print $out_contig "-- class    EnsEMBL::Contig\n";
    print $out_contig "-- table    contig\n";
    print $out_contig "-- table    main\n";
    print $out_contig "-- field 1    id\n";
    print $out_contig "-- field 2    accession\n";
    print $out_contig "-- field 3    version\n";
    print $out_contig "-- field 4    type\n";
    print $out_contig "-- field 5    length\n";
    print $out_contig "-- field 6    description\n";
    print $out_contig "-- header\n";
    print $out_contig "-- id    accession    version    type    length    description\n";
    print $out_contig join("\n", @contig),"\n";
    close $out_contig;
  }


  ################################################################
  ## Write last genome install
  &RSAT::message::TimeWarn("Update supported_organisms_ensembl.tab") if ($main::verbose >= 2);
  $supperted_organism_file = $ENV{'RSAT'}."/data/supported_organisms_ensembl.tab";

  @other_species = ();

  if (-f $supperted_organism_file) {

      my ($s_o_file) = &OpenInputFile($supperted_organism_file);

      while (<$s_o_file>) {
	      my @token = split("\t");
	      push (@other_species, $_) unless ($token[1] =~ /^$species.*$assembly_version.*$ensembl_version/);
      }
      close $s_o_file;
  }
  
  my $new_org_config = join ("\t", 
			     &Get_species_dir_name($species,$assembly_version,$ensembl_version),
			     ucfirst($species)." ".$assembly_version." ".$ensembl_version, ## Species name (beware, includes a space)
			     &Get_species_dir($species,$assembly_version,$ensembl_version)
      );

  ## Replace absolute paths by relative paths
  $new_org_config =~ s|$ENV{RSAT}|\$ENV\{RSAT\}\/|g;
  $new_org_config =~ s|\/\/|/|g;

  push (@other_species, $new_org_config."\n");

  my $s_o_file = &OpenOutputFile($supperted_organism_file);
  print $s_o_file join("",@other_species);
  close $s_o_file;



  &RSAT::message::Info("Genome installed in dir", $genome_dir) if ($main::verbose >= 1);

  ################################################################
  ## Report execution time and close output stream
  my $exec_time = &RSAT::util::ReportExecutionTime($start_time); ## This has to be exectuted by all scripts
  print $out $exec_time if ($main::verbose >= 1); ## only report exec time if verbosity is specified
  close $out;

  ## Call get_ensembl_variation
  if ($var) {
    &RSAT::message::TimeWarn("Calling get_ensembl_variation") if ($main::verbose >= 2);
    system("perl /Users/jeremy/Downloads/download-ensembl-variation -species $species -v 2");
  }

  exit(0);
}

################################################################
################### SUBROUTINE DEFINITION ######################
################################################################

################################################################
## Display full help message
sub PrintHelp {
  system "pod2text -c $0";
  exit()
}

################################################################
## Display short help message
sub PrintOptions {
  &PrintHelp();
}

################################################################
## Read arguments
sub ReadArguments {
  my $arg;
  my @arguments = @ARGV; ## create a copy to shift, because we need ARGV to report command line in &Verbose()
  while (scalar(@arguments) >= 1) {
    $arg = shift (@arguments);

=pod

=head1 OPTIONS

=over 4

=item B<-v #>

Level of verbosity (detail in the warning messages during execution)

=cut
    if ($arg eq "-v") {
      if (&IsNatural($arguments[0])) {
        $main::verbose = shift(@arguments);
      } else {
        $main::verbose = 1;
      }

=pod

=item B<-h>

Display full help message

=cut
    } elsif ($arg eq "-h") {
      &PrintHelp();

=pod

=item B<-help>

Same as -h

=cut
    } elsif ($arg eq "-help") {
      &PrintOptions();

=pod

=item B<-species species_name>

Species that you want download variation (homo_sapiens, mus_musculus).

Help : Use I<supported-organisms-ensembl> to get available species

Default : homo_sapiens

=cut
    } elsif ($arg eq "-species") {
      $main::species = lc(shift(@arguments));

=pod

=item B<-type #>

Sequence type :

  - 'dna' - unmasked genomic DNA sequences.

  - 'dna_rm' - masked genomic DNA.  Interspersed repeats and low
     complexity regions are detected with the RepeatMasker tool and masked
     by replacing repeats with 'N's.

  - 'dna_sm' - soft-masked genomic DNA. All repeats and low complexity regions
    have been replaced with lowercased versions of their nucleic base

Default : dna

This option can be used iteratively to download multiple types. Example: 
   -type dna -type dna_rm

Multiple types can also be specified separated by commas.
  -type dna,dna_rm

=cut
    } elsif ($arg eq "-type") {
      my $type = shift(@arguments);
      push @main::types, split ",", $type;

=pod

=item B<-var>

Also install variation for this $species

=cut
    } elsif ($arg eq "-var") {
      $main::var = 1;

=pod

#=item B<-url>
#
#Specify an alternative URL to download Ensembl genomes.
#
#Default URL: rsync://ftp.ensembl.org/ensembl/pub/current_fasta/
#
#Example: to download protists, 
#
# download-ensembl-genome -v 1 -available_species \
#   -url ftp://ftp.ensemblgenomes.org/pub/protists/current/fasta/
#
#=cut
#    } elsif ($arg eq "-url") {
#      $main::ensembl_rsync = shift(@arguments);
#
#=pod

=item B<-available_species>

Get all available species on Ensembl

=cut
    } elsif ($arg eq "-available_species") {
      $main::get_available_species = 1;

=pod

=item B<-version #>

The release version of ensEMBL.

Supported versions: 48 to 72, safe, latest

Default : I<safe>

=over

=item I<safe>

The file locations and/or formats of the Ensembl rsync distribution
may change between two Ensembl release.

For this reason, we defined the "safe" version, which corresponds to
the latest version of ensembl which has been checked to work with this
script.

=item latest

This corresponds to the lastest version of Ensembl. Beware: this
version is not guaranteed to be compatible with RSAT, in case Ensembl
would change their file formats or locations.

=back

=cut
    } elsif ($arg eq "-version") {
	$ensembl_version = shift(@arguments);
	&RSAT::error::FatalError($ensembl_version,"is not a valid value for Ensembl version. Supported values: Natural numbers (e.g. 72), safe, latest.") 
	  unless ( &IsNatural($ensembl_version) || $ensembl_version eq "safe" || $ensembl_version eq "latest" );

=item B<-dir #>

The directory in wich RSAT genomes must be installed. The selected
species will be isntalled in a sub-directory composed of Species name
and Ensembl genome version.

Default : $RSAT/data/genomes/

=cut
    } elsif ($arg eq "-dir") {
      $main::genome_dir = shift(@arguments);

=pod

=item	B<-o outputfile>

The output file is used to hold a trace of the transfers (verbosity),
and to store the list of species when the option -available_species is
activated.

If no output file is specified, the standard output is used.

=cut
    } elsif ($arg eq "-o") {
      $outfile{output} = shift(@arguments);


    } else {
      &FatalError(join("\t", "Invalid option", $arg));
    }

  }

=pod

=back

=cut

}

################################################################
## Verbose message
sub Verbose {
  print $out "; download-ensembl-genome ";
  &PrintArguments($out);
  printf $out "; %-22s\t%s\n", "Program version", $program_version;

  if (%main::outfile) {
    print $out "; Output files\n";
    while (my ($key,$value) = each %main::outfile) {
      printf $out ";\t%-13s\t%s\n", $key, $value;
    }
  }

  printf $out "; %-22s\t%s\n", "Ensembl safe version", &Get_ensembl_version_safe();
  printf $out "; %-22s\t%s\n", "Ensembl version", $ensembl_version;
  printf $out "; %-22s\t%s\n", "Ensembl rsync", $ensembl_rsync;
  printf $out "; %-22s\t%s\n", "URL of fasta files", $fasta_rsync;

}

