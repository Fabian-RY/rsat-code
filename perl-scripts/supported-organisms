#!/usr/bin/perl
if ($0 =~ /([^(\/)]+)$/) {
    push (@INC, "$`lib/");
}
require "RSA.lib";
require RSAT::Tree;
require RSAT::TreeNode;
require RSAT::OrganismManager;
#use strict;

## Initialize parameters

## Ouptut formats
$out_format = "text";
@formats = qw (html_list html_table array text keys names sizes full tree html_tree);
foreach $f (@formats) {
    $supported_format{$f} = 1;
}
$formats = join ",", @formats;

## Return fields
@return_fields = ();
@supported_return_fields = @RSAT::OrganismManager::supported_org_fields;
%supported_return_fields = ();
foreach my $field (@supported_return_fields) {
    $supported_return_fields{$field} = 1;
}

#@supported_return_fields = &RSAT::OrganismManager::supported_org_fields();
$supported_return_fields = join ",", @supported_return_fields;
#die "HELLLO\t", join(";", @supported_return_fields), "\n";

## Read arguments
&ReadArguments();

## Return fields
if ($out_format eq "full") {
    @return_fields = @supported_return_fields;
}
if (scalar(@return_fields) == 0) {
    @return_fields = ("ID");
}

## Open the output stream
$out = &OpenOutputFile($outfile{output});

if (($out_format eq "tree")||($out_format eq "html_tree")) {
    ## Create a tree with the taxonomy
    my $tree = new RSAT::Tree();
    $tree->LoadSupportedTaxonomy("Organisms", \%supported_organism);
#    print $out join("\n","--",$root_taxon,$out_format,"all",undef)."\n";
    print $out $tree->as_indented_text("--",$root_taxon,$out_format,"all",undef);

# list only organisms names with option -taxon alone

} elsif ($root_taxon){
    my $tree = new RSAT::Tree();
    $tree->LoadSupportedTaxonomy("Organisms", \%supported_organism);
    if (my $node = $tree->get_node_by_id($root_taxon)){
	my @organisms = $node->get_leaves_names();
	if ($out_format eq "text"){
	    print $out join("\n",@organisms)."\n";
	}else{
	    ## Add here use of -format full,...
	    &RSAT::error::FatalError("Option -taxon not yet compatible with this output format\n");
	}
    }else{
	&RSAT::error::FatalError("Taxon $root_taxon is not supported\n");
    }
} else {
   print $out &RSAT::OrganismManager::supported_organism_table(1, @return_fields);
#    print $out &ListSupportedOrganisms($out_format, 1, @return_fields);
}

close $out if ($outfile{output});

exit(0);

################################################################
##################### SUBROUTINE DEFINITION ####################
################################################################



################################################################
#### Display full help message
sub PrintHelp {
  open HELP, "| more";
  print HELP <<End_of_help;
NAME
	supported-organisms

        2002 by Jacques van Helden (jvanheld\@scmbb.ulb.ac.be)

USAGE
        supported-organisms [-i inputfile] [-o outputfile] [-v]

AUTHOR
	Jacques.van.Helden@ulb.ac.be

DESCRIPTION
	Returns the list of organisms supported on this site of
	rsa-tools.

CATEGORY
	genomics
	administration

OPTIONS
	-h	(must be first argument) display full help message

	-help	(must be first argument) display options

	-format	output format
		supported: $formats

 	-return output fields
		supported: $supported_return_fields

        -taxon  root taxon

WISH LIST
        -taxon  return only the organisms belonging to the specified
                taxon

End_of_help
  close HELP;
  exit;
}

################################################################
#### Display short help message #####
sub PrintOptions {
  open HELP, "| more";
  print HELP <<End_short_help;
template options
----------------
-h	(must be first argument) display full help message
-help	(must be first argument) display options
-i	input file
-o	output file
-v	verbose
-format	output format ($formats)
-return output fields ($supported_return_fields)
-taxon  root taxon
End_short_help
  close HELP;
  exit;
}


################################################################
#### Read arguments 
sub ReadArguments {
  foreach my $a (0..$#ARGV) {
    ### verbose ###
    if ($ARGV[$a] eq "-v") {
      if (&IsNatural($ARGV[$a+1])) {
	$verbose = $ARGV[$a+1];
      } else {
	$verbose = 1;
      }

      ### detailed help
    } elsif ($ARGV[$a] eq "-h") {
      &PrintHelp;

      ### list of options
    } elsif ($ARGV[$a] eq "-help") {
      &PrintOptions;

      ### output format
    } elsif ($ARGV[$a] eq "-format") {
      $out_format = $ARGV[$a+1];
      unless ($supported_format{$out_format}) {
	&RSAT::error::FatalError("Format $out_format is not supported\n");
      }

      #### return fields
    } elsif ($ARGV[$a] eq "-return") {
	chomp($ARGV[$a+1]);
	my @fields_to_return = split ",", $ARGV[$a+1];
	foreach $field (@fields_to_return) {
	    if ($supported_return_fields{$field}) {
		push @return_fields, $field;
	    } else {
		&RSAT::error::FatalError(join("\t", $field, "Invalid return field. Supported:", $supported_return_fields));
	    }
	}

      ### root taxon
    } elsif ($ARGV[$a] eq "-taxon") {
      $root_taxon = $ARGV[$a+1];

      ### output file  
    } elsif ($ARGV[$a] eq "-o") {
      $outfile{output} = $ARGV[$a+1];

    }
  }
}

