#!/usr/bin/python

#from Bio.AlignIO import MafIO

import sys, getopt,  os,  time
import math

from utils.exception.ConfigException import ConfigException
from utils.exception.ParsingException import ParsingException
from utils.exception.ExecutionException import ExecutionException
from utils.log.Log import Log

from manager.PipelineManagerFactory import PipelineManagerFactory

# --------------------------------------------------------------------------------------
def main( argv):
    

    # Directory where output fir will be created
    working_dir = None
    # Path to the pipelines definition XML file
    pipeline_filepath = None
    # Verbosity level
    verbosity = 1
    # Resume option
    resume = True
    # Server mode
    server = False
    listening_path = None

    try:
        opts, args = getopt.getopt( argv, "hi:o:v:fs", ["help", "input=", "output=", "verbosity=", "force",  "server"])
        print "opts = " + str( opts)
        print "args = " + str( args)
    except getopt.error, msg:
        print msg
        usage()
        print "For help use --help option"
        return 2
    for opt, arg in opts:
        # Help option
        if opt in ("-h", "--help"):
            usage()
            return 0
        # Path to a pipeline definition XML file
        elif opt in ("-i", "--input"):
            pipeline_filepath = arg
        # Path for the desired output directory
        elif opt in ("-o", "--output"):
            working_dir = arg
        # Verbosity level: 0=log, 1=log + trace, 2=log + trace + info    
        elif opt in ("-v", "--verbosity"):
            try:
                verbosity = int( arg)
            except (TypeError, ValueError), exce:
                print exce
                usage()
                return 2
        # Disable resume mode
        elif opt in ("-f", "--force"):
            resume = False
        # activate server mode
        elif opt in ("-s",  "--server"):
            server = True
            if arg != None and len( arg) > 0:
                listening_path = arg
            else:
                listening_path = None
            print "Lauching SERVER mode"
        # Other
        else:
            usage()
            return 2


    # Pipeline test
    if pipeline_filepath == None or len( pipeline_filepath) == 0:
        ##Unitary test pipelines
        #pipeline_filepath = "/home/spinelli/dev/TestFiles/pipelines/test/multinode_pipeline_1.xml"
        #pipeline_filepath = "/home/spinelli/dev/TestFiles/pipelines/test/TestBEDProcessor_1_pipeline.xml"
        #pipeline_filepath = "/home/spinelli/dev/TestFiles/pipelines/test/TestMAFIndexerProcessor_1_pipeline.xml"
        #pipeline_filepath = "/home/spinelli/dev/TestFiles/pipelines/test/TestMAFProcessor_1_pipeline.xml"
        #pipeline_filepath = "/home/spinelli/dev/TestFiles/pipelines/test/TestAXTProcessor_1_pipeline.xml"
        #pipeline_filepath = "/home/spinelli/dev/TestFiles/pipelines/test/TestBlockProcessor_1_pipeline.xml"
        #pipeline_filepath = "/home/spinelli/dev/TestFiles/pipelines/test/TestBlockProcessor_InputFile_pipeline.xml"
        #pipeline_filepath = "/home/spinelli/dev/TestFiles/pipelines/test/TestBlockProcessor_MergeMotif_pipeline.xml"
        #pipeline_filepath = "/home/spinelli/dev/TestFiles/pipelines/test/TestMotifProcessor_1_pipeline.xml"
        
        ##Validation test pipelines
        #pipeline_filepath = "/home/spinelli/dev/TestFiles/pipelines/validation/Validation_testFalsePositive.xml"
        #pipeline_filepath = "/home/spinelli/dev/TestFiles/pipelines/validation/Validation_testFalsePositive_WithCompare.xml"
        
        ##Indexation pipelines
        #pipeline_filepath = "/home/spinelli/dev/TestFiles/pipelines/mm9_testMAFIndexer_pipeline.xml"
        
        ##Tests on MM9 CHR19
        #pipeline_filepath = "/home/spinelli/dev/TestFiles/pipelines/Ets1_mm9_chr19_testBED_pipeline.xml"
        #pipeline_filepath = "/home/spinelli/dev/TestFiles/pipelines/Ets1_mm9_chr19_testMAFIndexer_pipeline.xml"
        #pipeline_filepath = "/home/spinelli/dev/TestFiles/pipelines/Ets1_mm9_chr19_testMAF_pipeline.xml"
        #pipeline_filepath = "/home/spinelli/dev/TestFiles/pipelines/Ets1_mm9_chr19_testAXT_pipeline.xml"
        #pipeline_filepath = "/home/spinelli/dev/TestFiles/pipelines/Ets1_mm9_chr19_testMSA_pipeline.xml"
        #pipeline_filepath = "/home/spinelli/dev/TestFiles/pipelines/Ets1_mm9_chr19_testBlock_pipeline.xml"
        #pipeline_filepath = "/home/spinelli/dev/TestFiles/pipelines/Ets1_mm9_chr19_testDualBlock_pipeline.xml"
        #pipeline_filepath = "/home/spinelli/dev/TestFiles/pipelines/Ets1_mm9_chr19_testMotifRSAT_pipeline.xml"
        #pipeline_filepath = "/home/spinelli/dev/TestFiles/pipelines/Ets1_mm9_chr19_testMotifTOMTOM_pipeline.xml"
        #pipeline_filepath = "/home/spinelli/dev/TestFiles/pipelines/Ets1_mm9_chr19_testDualMotif_pipeline.xml"
        #pipeline_filepath = "/home/spinelli/dev/TestFiles/pipelines/Ets1_mm9_chr19_testOnlyMotifRSAT_pipeline.xml"
        #pipeline_filepath = "/home/spinelli/dev/TestFiles/pipelines/Ets1_mm9_chr19_testOnlyMotifTOMTOM_pipeline.xml"
        #pipeline_filepath = "/home/spinelli/dev/TestFiles/pipelines/Ets1_mm9_chr19_testOnlyHistogram_pipeline.xml"
        pipeline_filepath = "/home/spinelli/dev/TestFiles/pipelines/Ets1_mm9_chr19_testHistogram_pipeline.xml"
        #pipeline_filepath = "/home/spinelli/dev/TestFiles/pipelines/Ets1_mm9_chr19_testCompareStatistics_pipeline.xml"
        
        ##Tests on MM9 CHR18 and CHR19
        #pipeline_filepath = "/home/spinelli/dev/TestFiles/pipelines/Ets1_mm9_chr18_19_testBlock_pipeline.xml"
        #pipeline_filepath = "/home/spinelli/dev/TestFiles/pipelines/Ets1_mm9_chr18_19_testDualBlock_pipeline.xml"
        #pipeline_filepath = "/home/spinelli/dev/TestFiles/pipelines/Ets1_mm9_chr18_19_testMAF_pipeline.xml"
        #pipeline_filepath = "/home/spinelli/dev/TestFiles/pipelines/Ets1_mm9_chr18_19_testHistogram_pipeline.xml"
    
    #resume = False
    
    try:
        pipeline_manager = PipelineManagerFactory.getManager()
        if server == True:
            # Launch manager in server mode
            pipeline_manager.server( listening_path)
        else:
            # Launch manager for a direct execution
            result = pipeline_manager.execute( pipeline_filepath, verbosity, resume, working_dir)
        if result == False:
            if Log.isInitialized:
                Log.log( "Error occured during pipelines execution. See logs for more details") 
            print "Error occured during pipelines execution. See logs for more details"
            return 2
    except ConfigException, conf_exce:
        print "Unable to initialize Pipeline Manager. From:\n\t---> " + str( conf_exce)
        if Log.isInitialized:
            Log.log( "Unable to initialize Pipeline Manager. From:\n\t---> " + str( conf_exce)) 
        else:
            print "Unable to initialize Pipeline Manager. From:\n\t---> " + str( conf_exce)
        return 2
    except ParsingException, par_exce:
        if Log.isInitialized:
            Log.log( "Error occured during Pipelines preparation. From:\n\t---> " + str( par_exce))
        else:
            print "Error occured during Pipelines preparation. From:\n\t---> " + str( par_exce)
        return 2
    except ExecutionException, exe_exce:
        if Log.isInitialized:
            Log.log( "Error occured during Pipelines execution. From:\n\t---> " + str( exe_exce))
        else:
            print "Error occured during Pipelines execution. From:\n\t---> " + str( exe_exce)
        return 2
    #except BaseException, exce:
    #    if Log.isInitialized:
    #        Log.log( "Error occured. From:\n\t---> " + str( exce))
    #    else:
    #        print "Error occured. From:\n\t---> " + str( exce) 
    finally:
        if Log.isInitialized():
            Log.closeFiles()

    return 0


# --------------------------------------------------------------------------------------
def usage():
    
    print "Usage: "
    print "\t -i | --input : path to a pipeline definition file"
    print "\t [-o | --output] : path for the desired output directory"
    print "\t [-v | --verbose] : verbosity level: 0=log, 1=log/trace, 2=log/trace/info"
    print "\t [-f | --force] : force the complete reexecution of the pipelines (disable resume mode)"
    print "\t [-s | --server] : launch the manager in server mode."




# --------------------------------------------------------------------------------------
if __name__ == "__main__":
    sys.exit( main( sys.argv[1:]))




# --------------------------------------------------------------------------------------
def testInformationMatrix():
    
    probi = 0.325
    correctionValue = 5
    nbSequences = 5
    fmin = (correctionValue * probi) / float( nbSequences + correctionValue)
    print "min = " + str( fmin * math.log( fmin / probi))
    fmax = (nbSequences + correctionValue * probi) / float( nbSequences + correctionValue)
    print "max = " +str( fmax * math.log( fmax / probi))

    for number in range( nbSequences+1):
        fij = (number + correctionValue * probi) / float( nbSequences + correctionValue)
        print " for " + str( number) + " = " + str( fij * math.log( fij / probi))



# --------------------------------------------------------------------------------------
def testRSAT():

    import site
    site.addsitedir( "/usr/share/python-support/python-soappy")
    site.addsitedir( "/usr/share/python-support/python-fpconst")
    import os, SOAPpy
    
    if os.environ.has_key("http_proxy"):
        my_http_proxy=os.environ["http_proxy"].replace("http://","")
    else:
        my_http_proxy=None

    url = "http://rsat.scmbb.ulb.ac.be/rsat/web_services/RSATWS.cgi"
    server = SOAPpy.SOAPProxy(url, http_proxy = my_http_proxy)

    server.config.dumpSoapOutput = 0
    server.config.dumpSoapInput = 0
    server.config.debug = 1
        
    organism = "Escherichia_coli_K12"
    query = ["metA"]

    req = {'organism' : organism,
           'query' : query,
           'full' : 0,
           'descr' : 0,
           'noquery' : 0}

    server.soapaction = 'urn:RSATWS#gene_info'
    server.namespace =  'urn:RSATWS'
    
    res = server.gene_info(req)

    print res.command
    print res.client
# eflag: FileType = Python2
