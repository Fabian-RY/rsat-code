#!/usr/bin/env python
# -*- coding: utf-8 -*-
'''
NAME
	%(progname)s

VERSION
	%(version)s

CATEGORY
	genome   
        
DESCRIPTION
	Get list of species in a maf file. By default the programme write the result in $RSAT/public-html/data/supported_organism_ucsc_multiz_local.tab
		
	This file is use for the interface of RSAT peak-footprints.

WARNING
	Do not work for camFam1, dm1, sacCer1
        
USAGE
	maf-species-list -ref_species ref_species1[,ref_species2 ...] -nb_species nb_species_in_org1[,nb_species_in_org2 ...] [-v #] [-h] [-print_result] [-rm]
	    
	Exemple 
		maf-species-list -ref_species mm9,hg18 -nb_species 30,44
            
OPTIONS
	-h, --help
		show this help and exit
	-v #
		verbosity
			
	-ref_species # 
		list of reference species seperated by comma
		  
	-nb_species # 
		list of numbers of species in the maf file included the reference species seperated by comma

	-rm
		remove ref_species from $RSAT/public-html/data/supported_organism_ucsc_multiz_local.tab

	-print_result
		Print the species alignend on STDOUT instead of the file
'''


#############################################################################################################	
##import
import os
import sys
import re
import argparse
import subprocess
import time


#############################################################################################################
##Initalize variable
rsat_path = os.getenv('RSAT') # Main path for the RSAT suite
peak_footprints_path = rsat_path + "/contrib/peak-footprints/" # Path for the peak-footprint program
multiz_path = rsat_path + "/data/UCSC_multiz/"
supported_organism_ucsc_multiz_local = rsat_path+"/data/supported_organism_ucsc_multiz_local.tab"
exp_reg = ('multiz(\d+)way')
exp_reg = re.compile(exp_reg)
t_ref_spec_nb_spec = []


#############################################################################################################
##read arguments
parser = argparse.ArgumentParser(add_help=0)
parser.add_argument('-ref_species', action="store",default=False, dest="ref_species")
parser.add_argument('-nb_species', action="store", default=False, dest="nb_species")
parser.add_argument('-rm', action="store_true", default=False, dest="remove")
parser.add_argument('-print_result', action="store_true",default=False, dest="print_result")
parser.add_argument("-v", action="store", default=0, type=int, dest="verbosity")
parser.add_argument("-h", "--help", action="store_true", dest="help")
args = parser.parse_args()

if args.help:
	print  globals()['__doc__'] % {'version' : '1.00', 'progname' : parser.prog}
	sys.exit(0)
	
if not args.ref_species:
	print 'You forgot to specify reference species'
 	sys.exit(1)
else:
	args.ref_species = args.ref_species.split(",")

if not args.nb_species:
	print 'You forgot to specify the numbers of species aligned'
 	sys.exit(2)
else:
	args.nb_species = args.nb_species.split(",")


if len(args.nb_species) != len(args.ref_species):
	print 'You incate a different numbers of reference species and nb_species in maf'
	sys.exit(3)
else:
	for i in range(len(args.ref_species)):
		try:
			args.nb_species[i] = int(args.nb_species[i])
		except:
			print args.nb_species[i]+"is not a integrer"
			sys.exit(4)
			
		t_ref_spec_nb_spec.append((args.ref_species[i],args.nb_species[i]))


#############################################################################################################
##Reading supported_organism_ucsc_multiz_local.tab
line_to_keep = ""
file = open(supported_organism_ucsc_multiz_local,'r')
line = file.readline()

while line != "":
	ref_species,nb_species, species = line.split("\t")
	#if not ref_species in args.ref_species and int(nb_species) not in args.nb_species:
	if not ref_species in args.ref_species : 		
		line_to_keep += line+"\n"

	line = file.readline()
	
file.close()

#############################################################################################################
##Rewrinting supported_organism_ucsc_multiz_local.tab
file = open(supported_organism_ucsc_multiz_local,'w')
if line_to_keep != "":
	file.write(line_to_keep)
	
if args.remove:
	file.close
	sys.exit(5)
	

##Get all downloaded maf
cmd = "ls -lRSr "+ multiz_path
cmd += " | grep -v '\.gz$'" #removing .gz file
cmd += " | grep -v '\.mafindex$'" #removing .mafindex file
cmd += " | grep -v '^d'" #removing directory
cmd += " | grep -v 'total'" #removing useless line
cmd += " | awk '{print $NF}'" #get only the name of maf file

downloaded_maf = subprocess.check_output(cmd, shell=True)
downloaded_maf = downloaded_maf[1:-1].split('\n\n')

for directory in downloaded_maf:
	directory = directory.split("\n")
	
	#only work on directory with maf
	if len(directory) > 1:
		path = directory[0].strip().rstrip(':')
		local_path = path.replace(multiz_path,"").lstrip("/")
		ref_species = local_path.split("/")[0]
		multiz = local_path.split("/")[1]
		nb_species = int(exp_reg.findall(multiz)[0])
		
		#only get species for ref_species and multiz paste in argument
		if (ref_species,nb_species) in t_ref_spec_nb_spec:
			maf_list = directory[1:]
			list_species = []
	
			##Begin reading maf file with the smallest.
			##If not all aligned species find, read the next smallest
			i = 0
			while len(list_species) != nb_species:
				maf_file = path+"/"+maf_list[i]
				cmd = "more "+maf_file
				cmd +=" | grep '^s'"  #removing all line not starting by s
				cmd +=" | awk '{print $2}'" #get only the name of species and chr
				cmd +=" | sed 's/\..*//'" # removing chr
				cmd +=" | sort -u" #removing redondante info
				
				species = subprocess.check_output(cmd, shell=True)
				species = species[:-1].split("\n")
				
				for specie in species:
					if specie not in list_species:
						list_species.append(specie)
									
				i += 1

			list_species.remove(ref_species)
			for specie in list_species:
				if args.print_result:
					print ref_species+"\t"+str(nb_species)+"\t"+specie
				else:
					file.write(ref_species+"\t"+str(nb_species)+"\t"+specie+"\n")
file.close()
		
