#!/usr/bin/perl -w
############################################################
#
# $Id: compare-families,v 1.1 2002/09/18 13:49:13 jvanheld Exp $
#
# Time-stamp: <2002-09-18 08:49:09 jvanheld>
#
############################################################
#use strict;;
if ($0 =~ /([^(\/)]+)$/) {
    push (@INC, "$`lib/");
}
require "RSA.lib";
require "RSA.help.pl";

################################################################
#### initialise parameters
my $start_time = &AlphaDate;

local %infile = ();
local %outfile = ();

local $verbose = 0;
local $in = STDIN;
local $out = STDOUT;

&ReadArguments;

################################################################
#### check argument values


################################################################
### open output stream
$out = &OpenOutputFile($outfile{output});

################################################################
##### read input
($in) = &OpenInputFile($infile{input});
while (<$in>) {

}

close $in if ($infile{input});

################################################################
#### print verbose
&Verbose if ($verbose);

################################################################
###### execute the command

################################################################
###### print output


################################################################
###### finish verbose
if ($verbose) {
    my $done_time = &AlphaDate;
    print $out "; Job started $start_time\n";
    print $out "; Job done    $done_time\n";
}


################################################################
###### close output stream
close $out if ($outfile{output});


exit(0);


################################################################
################### subroutine definition ######################
################################################################


################################################################
#### display full help message 
sub PrintHelp {
    my $HELP_FAMILY_FILE = &help_message("family file");
    open HELP, "| more";
    print HELP <<End_of_help;
NAME
	compare-families

        2002 by Jacques van Helden (jvanheld\@ucmb.ulb.ac.be)
	
DESCRIPTION
	Compare-Families for writing new perl scripts

CATEGORY
	util

USAGE
        compare-families -r ref_families [-q query_families]
		[-o outputfile] [-v]

OPTIONS
	-h	(must be first argument) display full help message
	-help	(must be first argument) display options
	-v	verbose
	-r ref_families
		A tab-delimited text file containing the dscription of
		reference families (see format description below).
	-q query_families
		A tab-delimited text file containing the dscription of
		query families (see format description below).
	-o outputfile
		if not specified, the standard output is used.
		This allows to place the command within a pipe.

FILE FORMATS
    $HELP_FAMILY_FILE
End_of_help
    close HELP;
    exit;
}

################################################################
#### display short help message
sub PrintOptions {
  open HELP, "| more";
  print HELP <<End_short_help;
compare-families options
----------------
-h	(must be first argument) display full help message
-help	(must be first argument) display options
-r	reference families
-q	query families
-o	output file
-v	verbose
End_short_help
  close HELP;
  exit;
}


################################################################
#### read arguments 
sub ReadArguments {
    foreach my $a (0..$#ARGV) {
	### verbose  
	if ($ARGV[$a] eq "-v") {
	    if (&IsNatural($ARGV[$a+1])) {
		$verbose = $ARGV[$a+1];
	    } else {
		$verbose = 1;
	    }
	    
	    ### detailed help
	} elsif ($ARGV[$a] eq "-h") {
	    &PrintHelp;
	    
	    ### list of options
	} elsif ($ARGV[0] eq "-help") {
	    &PrintOptions;
	    
	    ### reference file  
	} elsif ($ARGV[$a] eq "-r") {
	    $infile{ref_families} = $ARGV[$a+1];
	    
	    ### query file  
	} elsif ($ARGV[$a] eq "-q") {
	    $infile{query_families} = $ARGV[$a+1];
	    
	    ### output file  
	} elsif ($ARGV[$a] eq "-o") {
	    $outfile{output} = $ARGV[$a+1];
	    
	}
    }
}

################################################################
#### verbose message
sub Verbose {
    print $out "; compare-families ";
    &PrintArguments($out);
    if (defined(%infile)) {
	print $out "; Input files\n";
	while (($key,$value) = each %infile) {
	    print $out ";\t$key\t$value\n";
	}
    }
    if (defined(%outfile)) {
	print $out "; Output files\n";
	while (($key,$value) = each %outfile) {
	    print $out ";\t$key\t$value\n";
	}
    }
}
