#!/usr/bin/perl -w
############################################################
#
# $Id: load-goa,v 1.1 2007/02/19 09:56:01 rsat Exp $
#
############################################################

## use strict;

=pod

=head1 NAME

load-goa

=head1 DESCRIPTION

Load the EBI go association file in the RSA suite

=head1 AUTHORS

sylvain@scmbb.ulb.ac.be

=head1 CATEGORY

util

=head1 USAGE
    
load-goa [-i goa_inputfile] [-org Organism_name] [-v #] [...]
load-goa [-dir directory_of_goa_files] [-v #] [...]
load-goa [-download ftp_of_goa_files] [-v #] [...]

=head1 INPUT FORMAT

=head1 OUTPUT FORMAT

=cut


BEGIN {
    if ($0 =~ /([^(\/)]+)$/) {
	push (@INC, "$`lib/");
    }
}
require "RSA.lib";



################################################################
## Main package
package main;
{

    ################################################################
    ## Initialise parameters
    my $start_time = &AlphaDate();


    %main::infile = ();
    %main::outfile = ();

    $main::verbose = 0;
    $main::in = STDIN;
    $main::out = STDOUT;
    $organism_name;
    $annotation_table = "";
    $repeat_masked = 0;
    $outputfile = "";
    $dir; #Directory containing the GOA file
    $download; # ftp address for downloading the goafile
    $defaut_download = 'ftp://ftp.ebi.ac.uk/pub/databases/GO/goa/proteomes/';
    
    ################################################################
    ## Read argument values
    &ReadArguments();

    ################################################################
    ## Check argument values
    # Check whether there is no specicification of both an organism and of a list of organisms
    if ((!defined($organism_name) && (!defined($dir) && !defined($download))) || (defined($organism_name) && (defined($dir) && defined($download)))) {
      &RSAT::error::FatalError("You must specify either an organism (-org) or a directory (-dir)");
    } 
    # Check whether there is no specicification of both a directory and a url for downloading the goa file
    if (defined($download) && defined($dir)) {
      &RSAT::error::FatalError("You must specify either a directory or an URL containing the GOA file");
    }
    ################################################################
    ## Open output stream
    $main::out = &OpenOutputFile($main::outfile{output});

    
    ################################################################
    ## Print verbose
    &Verbose() if ($main::verbose);
    
    ################################################################
    ## Execute the command
    
    ## Download of all goa files of the url $download in the directory $RSAT/tempgoa
    if (defined($download)) {
      if ($download eq 'default') {
        $download = $defaut_download;
      }
      my $download_dir = $RSA."/tempgoa";
      system("mkdir ".$download_dir);
      system("wget -r $download --timeout=900 -nd -P $download_dir -A '*.goa' -N");
      $dir = $download_dir;
    }
    
    ## Loading of the go annotation for only one organism
    if ($organism_name) {
      #loading organism
      my $organism = load_organism($organism_name);
      ($main::in) = &OpenInputFile($main::infile{input});
      if ($outputfile eq "") { 
        $main::outfile{output} = $RSA."/data/genomes/".$organism_name."/genome/go.tab";
      } else { 
        $main::outfile{output} = $outputfile;
      }
      ($main::out) = &OpenOutputFile($main::outfile{output});
      # create gene - goid annotation table
      my $gene_go_index = create_gene_go_table($organism, $main::in);
      # write gene - goid annotation table in the correct directory
      write_gene_go_table($gene_go_index, $main::out);
    } elsif ($dir || $download) { ## Loading of the go annotation for a list of organisms
      # look for the installed organism and their taxid
      my $taxid_org_ref = taxid_search();
      # compare the taxid of the installed organisms to the taxid contained in the goa files 
      my $goa_file_directory_ref = read_goafile_directory($dir, $taxid_org_ref);
      my @goa_file_directory = @{$goa_file_directory_ref};
      # install the organisms 
      for (my $i = 0; $i < scalar(@goa_file_directory); $i++) {
        my $taxid = $goa_file_directory[$i][0];
        my $organism_name = $goa_file_directory[$i][1];
        my $file = $goa_file_directory[$i][2];
        #print "$organism_name\n";
        my $organism = load_organism($organism_name);
        $main::infile{input} = $file;
        print $file."\n";
        ($main::in) = &OpenInputFile($main::infile{input});
        if ($outputfile eq "") { 
          $main::outfile{output} = $RSA."/data/genomes/".$organism_name."/genome/go.tab";
        } else { 
          $main::outfile{output} = $outputfile;
        }
        ($main::out) = &OpenOutputFile($main::outfile{output});
        my $gene_go_index = create_gene_go_table($organism, $main::in);
        write_gene_go_table($gene_go_index, $main::out);
      }
    }

#     if (defined($download)) {
#       system("rm -r $dir");
#     }
    
    ################################################################
    ## Print output
    
    ################################################################
    ## Functions
    
    
    ## This function creates an Index object. 
    ## Having an organism and a goa file.
    ## For each gene name, there is one or more $goid values
    
    sub create_gene_go_table {
      my ($organism, $goainputfile) = @_;
      $feature_index = $organism->get_attribute("name_index");
      my $rep = new RSAT::Index();;
      while (my $line = <$goainputfile>) {
        chomp($line);
        my @linecp = split(/\t/, $line);
        my $goid = $linecp[4];
        my $ontology = $linecp[8];
        my $nameList = $linecp[9];
        $nameList = substr($nameList,0,index($nameList,":"));
        my @names = split(/\, /, $nameList);
        foreach my $name (@names) {
          $name = uc($name);
          my $feature = $organism->get_feature_for_name($name);
          if ($feature) {
            my $id = $feature->get_attribute("id");
            $rep->add_value($id, $goid);
          }
        }
      }
      return $rep;
      close GOA;
    }
    
    ## This function write the Index (one geneid -> several goids) to a file
    
    sub write_gene_go_table {
      my ($gene_go_index, $outputfile) = @_;
      my @genes = $gene_go_index->get_keys();
      
      foreach my $gene(@genes) {
        my @goids = $gene_go_index->get_values($gene);
        my @uniqueSet = ();
        my %seen = ();
        foreach my $item (@goids) {
          unless ($seen{$item}) {
            # if we get here, we have not seen it before
            $seen{$item} = 1;
            push(@uniqueSet, $item);
          }
        }
        for my $unique (@uniqueSet) {
          print $outputfile $gene."\t".$unique."\n";
        }
      }
    }
    
   ## This functions returns a hashmap having key : $taxid, value : $organism_name 
   ## for all the organisms contained in RSAT
    
    sub taxid_search() {
      my %rep;
      foreach my $key (keys %main::supported_organism) {
        my $file = $RSA."/data/genomes/".$key."/genome/organism.tab";
        my $taxid =  `cat $file | grep -v '^-' | grep '[0-9]' | cut -f 1`;
        chomp($taxid);
        $rep{$taxid} = $key;
      }
      return \%rep;
    }
   
   ## Having the list of supported organism in RSAT, this function returns the files of the directory 
   ## annotating the RSAT organisms.
    
    
    sub read_goafile_directory() {
      my ($dir, $taxid_list_ref) = @_;
      my @rep;
      my %taxid_list = %{$taxid_list_ref};
      opendir(GOADIR, $dir);
      my @goafiles = readdir(GOADIR);
      my $i = 0;
      foreach my $file(@goafiles) {
        $file = $dir."/".$file;
        if (!-z $file && $file =~ /\.goa/ && $file !~ /\.gz/) { 
          open GOA, $file;
          my $line = <GOA>;
          #print "$file\n";
          my @linecp = split /\t/, $line;
          my $taxid = $linecp[12];
          $taxid =~ s/taxon\://;
          if (exists($taxid_list{$taxid})) {
            #print "EXISTS : ".$taxid_list{$taxid}." ".$file." ".$taxid."\n";
            $rep[$i][0] = $taxid;
            $rep[$i][1] = $taxid_list{$taxid};
            $rep[$i][2] = $file;
            $i++;
          }
        }
      }
      return \@rep;
    }
    
    ## Having the name of an RSAT organism, this function load the organism and returns it
    
    sub load_organism() {
      my $organism_name = $_[0];
      my $organism = new RSAT::organism();
      $organism->check_name($organism_name);
      $organism->set_attribute("name", $organism_name);
      $organism->DefineAcceptedFeatureTypes("cds");
      
      $organism->OpenContigs($organism_name, $annotation_table, "", "", rm=>$repeat_masked);
      $organism->LoadFeatures($annotation_table, $imp_pos);
      unless (($return_all) || ($ids_only)) {
        $organism->LoadSynonyms();
      }
      return $organism;
    }
    
    
    ################################################################
    ## Finish verbose
    if ($main::verbose >= 1) {
	my $done_time = &AlphaDate();
	print $main::out "; Job started $start_time\n";
	print $main::out "; Job done    $done_time\n";
    }
    
     
    ################################################################
    ## Close output stream
    close $main::out if ($main::outfile{output});
    
    
    exit(0);
}

################################################################
################### SUBROUTINE DEFINITION ######################
################################################################


################################################################
## Display full help message 
sub PrintHelp {
    system "pod2text -c $0";
    exit()
}

################################################################
## Display short help message
sub PrintOptions {
    &PrintHelp();
}

################################################################
## Read arguments 
sub ReadArguments {
    my $arg;
    my @arguments = @ARGV; ## create a copy to shift, because we need ARGV to report command line in &Verbose()
    while (scalar(@arguments) >= 1) {
      $arg = shift (@arguments);
	## Verbosity
=pod

=head1 OPTIONS

=over 4

=item B<-v #>

Level of verbosity (detail in the warning messages during execution)

=cut
	if ($arg eq "-v") {
	    if (&IsNatural($arguments[0])) {
		$main::verbose = shift(@arguments);
	    } else {
		$main::verbose = 1;
	    }

	    ## Help message
=pod

=item B<-h>

Display full help message

=cut
	} elsif ($arg eq "-h") {
	    &PrintHelp();

	    ## List of options
=pod

=item B<-help>

Same as -h

=cut
	} elsif ($arg eq "-help") {
	    &PrintOptions();

	    ## Input file
=pod

=item B<-i inputfile>

If no input file is specified, the standard input is used.  This
allows to use the command within a pipe.

=cut
	} elsif ($arg eq "-i") {
	    $main::infile{input} = shift(@arguments);
=pod

=item B<-dir goa_directory>

Specifies a directory containing a list of go annotation file

=cut
	} elsif ($arg eq "-dir") {
	    $dir = shift(@arguments);

=pod

=item B<-download url_of_goa_files>

Download goa files in a temporary directory

=cut
	} elsif ($arg eq "-download") {
	    $download = shift(@arguments);
	    
	    ## Organism name
=pod

=item	B<-o Organism_name>

When an organism is specified, the program automatically
loads the appropriate organim.

=cut

	} elsif ($arg eq "-org") {
	    $organism_name = shift(@arguments);
	} else {
	    &FatalError(join("\t", "Invalid option", $arg));

	}
    }


=pod

=back

=cut

}

################################################################
#### verbose message
sub Verbose {
    print $main::out "; template ";
    &PrintArguments($main::out);
    if (defined(%main::infile)) {
	print $main::out "; Input files\n";
	while (my ($key,$value) = each %main::infile) {
	    print $main::out ";\t$key\t$value\n";
	}
    }
    if (defined(%main::outfile)) {
	print $main::out "; Output files\n";
	while (my ($key,$value) = each %main::outfile) {
	    print $main::out ";\t$key\t$value\n";
	}
    }
}


__END__

=pod

=head1 SEE ALSO

=cut
