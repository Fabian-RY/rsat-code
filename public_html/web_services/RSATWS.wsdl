<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="RSATWS.xsl"?>
<definitions name="RSATWS"
  targetNamespace="urn:RSATWS"
          xmlns:tns="urn:RSATWS"
          xmlns:xsd="http://www.w3.org/2001/XMLSchema"
          xmlns="http://schemas.xmlsoap.org/wsdl/"
	  xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
	  xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/">

  <types>
    <xsd:schema targetNamespace="urn:RSATWS" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/">

      <xsd:complexType name="StringArray">
         <xsd:complexContent>
            <xsd:restriction base="soapenc:Array">
               <xsd:attribute ref="soapenc:arrayType" arrayType="xsd:string[]"/>
            </xsd:restriction>
         </xsd:complexContent>
      </xsd:complexType>

      <xsd:complexType name="RetrieveSequenceRequest">
        <xsd:annotation>
	  <xsd:documentation>
	    Parameters for the operation retrieve_seq.
	  </xsd:documentation>
        </xsd:annotation>
        <xsd:all>
	  <xsd:element name="output" type="xsd:string" minOccurs="0">
	    <xsd:annotation>
	      <xsd:documentation>
	        Return type. Accepted values: 'server' (result is stored on a file on the server), 'client' (result is directly transferred to the client), or  'both'. Default is 'both'.
	      </xsd:documentation>
	    </xsd:annotation>
	  </xsd:element>
	  <xsd:element name="organism" type="xsd:string" minOccurs="1">
            <xsd:annotation>
              <xsd:documentation>
                Organism. Words need to be underscore separated (example: Escherichia_coli_K12).
              </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
	  <!--/xsd:all-->
	  <!--xsd:choice-->
	  <!--xsd:element name="query" type="tns:ArrayOfString" minOccurs="1"-->
	  <xsd:element name="query" type="xsd:string" minOccurs="0" maxOccurs="unbounded">
            <xsd:annotation>
              <xsd:documentation>
                A list of query genes.
              </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
	  <xsd:element name="all" type="xsd:int" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>
                Return sequences for all the genes of the organism.
              </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
	  <!--/xsd:choice-->
	  <!--xsd:all-->
	  <xsd:element name="noorf" type="xsd:int" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>
                Prevent overlap with upstream open reading frames (ORF).
              </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
	  <xsd:element name="from" type="xsd:int" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>
                Inferior limit of the region to retrieve. Default is organism dependant (example: Saccharomyces cerevisiae = -800).
              </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
	  <xsd:element name="to" type="xsd:int" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>
                Superior limit of the region to retrieve. Default is '-1'.
              </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
	  <xsd:element name="feattype" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>
                Type of genome features to load. Supported: CDS, mRNA, tRNA, rRNA.
              </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
	  <xsd:element name="type" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>
                Sequence type. Supported: upstream, downstream, ORF (unspliced open reading frame).
              </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
	  <xsd:element name="format" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>
                Sequence format. Supported: IG (Intelligenetics), WC (wconsensus), raw, FastA
              </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
	  <xsd:element name="lw" type="xsd:int" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>
                Line width (0 for whole sequence on one line).
              </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
	  <xsd:element name="label" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>
                Field(s) to be used in the sequence label. Multiple fields can be specified, separated by commas. Supported: id, name, organism_name, sequence_type, current_from, current_to, ctg, orf_strand, reg_left, reg_right. Default: name.
              </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
	  <xsd:element name="label_sep" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>
                Separator between the label fields. Default: | (pipe character).
              </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
	  <xsd:element name="nocom" type="xsd:int" minOccurs="0">
           <xsd:annotation>
              <xsd:documentation>
                No comments. Only the identifier and the sequence are returned. By default, the comment indicates the ORF and upstream sequence coordinates.
              </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
	  <xsd:element name="repeat" type="xsd:int" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>
                Use the repeat masked version of the genome. Attention: repeated regions are annotated for some genomes only.
              </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
	  <xsd:element name="imp_pos" type="xsd:int" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>
                Admit imprecise positions.
              </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
	</xsd:all>
      </xsd:complexType>

      <xsd:complexType name="PurgeSequenceRequest">
       <xsd:all>
        <xsd:element name="output" type="xsd:string" minOccurs="0">
	  <xsd:annotation>
	    <xsd:documentation>
	      Return type. Accepted values: 'server' (result is stored on a file on the server), 'client' (result is directly transferred to the client), or 'both'. Default is 'both'.
	    </xsd:documentation>
	  </xsd:annotation>
	</xsd:element>
	<!--/xsd:all-->
	<!--xsd:choice-->
	<xsd:element name="sequence" type="xsd:string" minOccurs="0">
	  <xsd:annotation>
	    <xsd:documentation>
	      Sequence to purge. You need to supply either this parameter or the next one (tmp_infile).
	    </xsd:documentation>
	  </xsd:annotation>
	</xsd:element>
	<xsd:element name="tmp_infile" type="xsd:string" minOccurs="0">
	  <xsd:annotation>
	    <xsd:documentation>
	      Name of the file with input sequence on the server. You need to supply either this parameter or the previous one (sequence).
	    </xsd:documentation>
	  </xsd:annotation>
	</xsd:element>
	<!--/xsd:choice-->
	<!--xsd:all-->
	<xsd:element name="format" type="xsd:string" minOccurs="0">
	  <xsd:annotation>
	    <xsd:documentation>
	      Sequence format. Supported: IG (Intelligenetics), WC (wconsensus), raw, FastA.
	    </xsd:documentation>
	  </xsd:annotation>
	</xsd:element>
	<xsd:element name="match_length" type="xsd:int" minOccurs="0">
	  <xsd:annotation>
	    <xsd:documentation>
	      Minimal match length. Default is 40.
	    </xsd:documentation>
	  </xsd:annotation>
	</xsd:element>
	<xsd:element name="mismatch" type="xsd:int" minOccurs="0">
	  <xsd:annotation>
	    <xsd:documentation>
	      Number of mismatches allowed. Default is 3.
	    </xsd:documentation>
	  </xsd:annotation>
	</xsd:element>
	<xsd:element name="str" type="xsd:int" minOccurs="0">
	  <xsd:annotation>
	    <xsd:documentation>
	      Discard duplications on the direct strand only (1) or on the reverse complement as well (2). Default is 2.
	    </xsd:documentation>
	  </xsd:annotation>
	</xsd:element>
	<xsd:element name="delete" type="xsd:int" minOccurs="0">
	  <xsd:annotation>
	    <xsd:documentation>
	      Delete repeats instead of masking them.
	    </xsd:documentation>
	  </xsd:annotation>
	</xsd:element>
	<xsd:element name="mask_short" type="xsd:int" minOccurs="0">
	  <xsd:annotation>
	    <xsd:documentation>
	      Mask (replace by N characters) sequences shorter than the specified length.
	    </xsd:documentation>
	  </xsd:annotation>
	</xsd:element>
       </xsd:all>
      </xsd:complexType>

      <xsd:complexType name="OligoAnalysisRequest">
       	<xsd:all>
        <xsd:element name="output" type="xsd:string" minOccurs="0">
	  <xsd:annotation>
	    <xsd:documentation>
	      Return type. Accepted values: 'server' (result is stored on a file on the server), 'client' (result is directly transferred to the client), or  'both'. Default is 'both'.
	    </xsd:documentation>
	  </xsd:annotation>
	</xsd:element>
	<!--/xsd:all-->
	<!--xsd:choice-->
	<xsd:element name="sequence" type="xsd:string" minOccurs="0">
	  <xsd:annotation>
	    <xsd:documentation>
	      Input sequence. You need to supply either this parameter or the next one (tmp_infile).
	    </xsd:documentation>
	  </xsd:annotation>
	</xsd:element>
	<xsd:element name="tmp_infile" type="xsd:string" minOccurs="0">
	  <xsd:annotation>
	    <xsd:documentation>
	      Name of the file with input sequence on the server. You need to supply either this parameter or the previous one (sequence).
	    </xsd:documentation>
	  </xsd:annotation>
	</xsd:element>
	<!--/xsd:choice-->
	<!--xsd:all-->
	<xsd:element name="format" type="xsd:string" minOccurs="0">
	  <xsd:annotation>
	    <xsd:documentation>
	      Input sequence format. Supported: IG (Intelligenetics), WC (wconsensus), raw, fasta. Default is fasta.
	    </xsd:documentation>
	  </xsd:annotation>
	</xsd:element>
	<xsd:element name="length" type="xsd:int" minOccurs="1">
	  <xsd:annotation>
	    <xsd:documentation>
	      Oligomer length.
	    </xsd:documentation>
	  </xsd:annotation>
	</xsd:element>
	<xsd:element name="organism" type="xsd:string" minOccurs="1">
	  <xsd:annotation>
	    <xsd:documentation>
	      Organism. Words need to be underscore separated (example: Escherichia_coli_K12).
	    </xsd:documentation>
	  </xsd:annotation>
	</xsd:element>
	<xsd:element name="background" type="xsd:string" minOccurs="0">
	  <xsd:annotation>
	    <xsd:documentation>
	      Background model: Type of sequences used as background model for estimating expected oligonucleotide frequencies. Supported: upstream, upstreamL, upstream-noorf, intergenic, input.
	    </xsd:documentation>
	  </xsd:annotation>
	</xsd:element>
	<xsd:element name="stats" type="xsd:string" minOccurs="0">
	  <xsd:annotation>
	    <xsd:documentation>
	      List of statistics to return. Supported:occ, mseq, freq,
    proba, ratio, zscore, like, pos, rank.
	    </xsd:documentation>
	  </xsd:annotation>
	</xsd:element>
	<xsd:element name="noov" type="xsd:int" minOccurs="0">
	  <xsd:annotation>
	    <xsd:documentation>
	      No overlapping. Disable the detection of overlapping matches for self-overlapping patterns (ex TATATA, GATAGA).
	    </xsd:documentation>
	  </xsd:annotation>
	</xsd:element>
	<xsd:element name="str" type="xsd:int" minOccurs="0">
	  <xsd:annotation>
	    <xsd:documentation>
	      Oligonucleotide occurrences found on both stands are
    summed (2) or not (1). Default is 2.
	    </xsd:documentation>
	  </xsd:annotation>
	</xsd:element>
	<xsd:element name="sort" type="xsd:int" minOccurs="0">
	  <xsd:annotation>
	    <xsd:documentation>
	      Sort oligomers according to overrepresentation.
	    </xsd:documentation>
	  </xsd:annotation>
	</xsd:element>
	<xsd:element name="lth" type="xsd:string" minOccurs="0">
	  <xsd:annotation>
	    <xsd:documentation>
	      Lower threshold on some parameter. Format='param value'.
	    </xsd:documentation>
	  </xsd:annotation>
	</xsd:element>
       </xsd:all>
      </xsd:complexType>

      <!--xsd:complexType name="Binint"-->
	<!--xsd:complexContent-->
	  <!--xsd:restriction base="xsd:int"-->
	    <!--xsd:sequence-->
	      <!--xsd:element name="item" type="xsd:int"/-->
	    <!--/xsd:sequence-->
	    <!--xsd:enumeration value="0"/-->
	    <!--xsd:enumeration value="1"/-->
	  <!--/xsd:restriction-->
	<!--/xsd:complexContent-->
      <!--/xsd:complexType-->

      <xsd:complexType name="GeneInfoRequest">
       <xsd:all>
	<xsd:element name="output" type="xsd:string" minOccurs="0">
	  <xsd:annotation>
	    <xsd:documentation>
	        Return type. Accepted values: 'server' (result is stored on a file on the server), 'client' (result is directly transferred to the client), or  'both'. Default is 'both'.
	    </xsd:documentation>
	  </xsd:annotation>
	</xsd:element>
        <xsd:element name="organism" type="xsd:string" minOccurs="1">
	 <xsd:annotation>
	  <xsd:documentation>
	   Organism. Words need to be underscore separated (example: Escherichia_coli_K12).
	  </xsd:documentation>
	 </xsd:annotation>
	</xsd:element>
	<xsd:element name="query" type="xsd:string" minOccurs="1" maxOccurs="unbounded">
	 <xsd:annotation>
	  <xsd:documentation>
	   List of gene(s) for which you want info on or list of keywords to
       search for (can be regular expressions).
	  </xsd:documentation>
	 </xsd:annotation>
	</xsd:element>
	<xsd:element name="full" type="xsd:int" minOccurs="0">
	 <xsd:annotation>
	  <xsd:documentation>
	   Full match only (no substring matching).
	  </xsd:documentation>
	 </xsd:annotation>
	</xsd:element>
	<xsd:element name="noquery" type="xsd:int" minOccurs="0">
	 <xsd:annotation>
	  <xsd:documentation>
	   Do not print the query at the begining of each line.
	  </xsd:documentation>
	 </xsd:annotation>
	</xsd:element>
	<xsd:element name="descr" type="xsd:int" minOccurs="0">
	 <xsd:annotation>
	  <xsd:documentation>
	   Match query against the description, too, not just against gene ID and name.
	  </xsd:documentation>
	 </xsd:annotation>
	</xsd:element>
	<xsd:element name="feattype" type="xsd:string" minOccurs="0">
	 <xsd:annotation>
	  <xsd:documentation>
	   Feature type (CDS, mRNA, tRNA, rRNA, scRNA).
	  </xsd:documentation>
	 </xsd:annotation>
	</xsd:element>
       </xsd:all>
      </xsd:complexType>

      <xsd:complexType name="RetrieveSequenceResponse">
	<xsd:all>
	  <xsd:element name="server" type="xsd:string">
	    <xsd:annotation>
	      <xsd:documentation>
	        Location of the result file on the server. This can be used as input for a further request.
	      </xsd:documentation>
	    </xsd:annotation>
	  </xsd:element>
	  <xsd:element name="command" type="xsd:string">
	    <xsd:annotation>
	      <xsd:documentation>
	        The stand alone command executed on the server.
	      </xsd:documentation>
	    </xsd:annotation>
	</xsd:element>
	  <xsd:element name="client" type="xsd:string">
	 <xsd:annotation>
	  <xsd:documentation>
	   The results.
	  </xsd:documentation>
	 </xsd:annotation>
	</xsd:element>
	 </xsd:all>
	</xsd:complexType>

      <xsd:complexType name="PurgeSequenceResponse">
	<xsd:all>
	  <xsd:element name="server" type="xsd:string">
	    <xsd:annotation>
	      <xsd:documentation>
	        Location of the result file on the server. This can be used as input for a further request.
	      </xsd:documentation>
	    </xsd:annotation>
	  </xsd:element>
	  <xsd:element name="command" type="xsd:string">
	    <xsd:annotation>
	      <xsd:documentation>
	        The stand alone command executed on the server.
	      </xsd:documentation>
	    </xsd:annotation>
	</xsd:element>
	  <xsd:element name="client" type="xsd:string">
	 <xsd:annotation>
	  <xsd:documentation>
	   The results.
	  </xsd:documentation>
	 </xsd:annotation>
	</xsd:element>
	 </xsd:all>
	</xsd:complexType>

      <xsd:complexType name="OligoAnalysisResponse">
	<xsd:all>
	  <xsd:element name="server" type="xsd:string">
	    <xsd:annotation>
	      <xsd:documentation>
	        Location of the result file on the server. This can be used as input for a further request.
	      </xsd:documentation>
	    </xsd:annotation>
	  </xsd:element>
	  <xsd:element name="command" type="xsd:string">
	    <xsd:annotation>
	      <xsd:documentation>
	        The stand alone command executed on the server.
	      </xsd:documentation>
	    </xsd:annotation>
	</xsd:element>
	  <xsd:element name="client" type="xsd:string">
	 <xsd:annotation>
	  <xsd:documentation>
	   The results.
	  </xsd:documentation>
	 </xsd:annotation>
	</xsd:element>
	 </xsd:all>
	</xsd:complexType>

      <xsd:complexType name="GeneInfoResponse">
	<xsd:all>
	  <xsd:element name="server" type="xsd:string">
	    <xsd:annotation>
	      <xsd:documentation>
	        Location of the result file on the server. This can be used as input for a further request.
	      </xsd:documentation>
	    </xsd:annotation>
	  </xsd:element>
	  <xsd:element name="command" type="xsd:string">
	    <xsd:annotation>
	      <xsd:documentation>
	        The stand alone command executed on the server.
	      </xsd:documentation>
	    </xsd:annotation>
	</xsd:element>
	  <xsd:element name="client" type="xsd:string">
	 <xsd:annotation>
	  <xsd:documentation>
	   The results.
	  </xsd:documentation>
	 </xsd:annotation>
	</xsd:element>
	 </xsd:all>
	</xsd:complexType>

    </xsd:schema>
  </types>

  <message name="RetrieveSequenceInput">
      <part name="request" type="tns:RetrieveSequenceRequest"/>
  </message>
    
  <message name="RetrieveSequenceOutput">
      <part name="response" type="tns:RetrieveSequenceResponse"/>
      <!--part name="response" element="tns:RetrieveSequenceResponse"/-->
  </message>

  <message name="PurgeSequenceInput">
      <part name="request" type="tns:PurgeSequenceRequest"/>
  </message>

  <message name="PurgeSequenceOutput">
      <part name="response" type="tns:PurgeSequenceResponse"/>
  </message>

  <message name="OligoAnalysisInput">
      <part name="request" type="tns:OligoAnalysisRequest"/>
  </message>

  <message name="OligoAnalysisOutput">
      <part name="response" type="tns:OligoAnalysisResponse"/>
  </message>

  <message name="GeneInfoInput">
      <part name="request" type="tns:GeneInfoRequest"/>
  </message>

  <message name="GeneInfoOutput">
      <part name="response" type="tns:GeneInfoResponse"/>
  </message>

  <portType name="RSATWSPortType">
      <operation name="retrieve_seq">
         <!-- Name of input/output must be specified here -->
         <input name="RetrieveSequenceRequest" message="tns:RetrieveSequenceInput"/>
         <output name="RetrieveSequenceResponse" message="tns:RetrieveSequenceOutput"/>         
	 <documentation>Returns upstream, downstream or coding DNA sequences
           for list of query genes.
         </documentation>
      </operation>
      <operation name="purge_seq">
         <input name="PurgeSequenceRequest" message="tns:PurgeSequenceInput"/>
         <output name="PurgeSequenceResponse" message="tns:PurgeSequenceOutput"/>
         <documentation>Mask repeated fragments of an input sequence.</documentation>
      </operation>
      <operation name="oligo_analysis">
         <input name="OligoAnalysisRequest" message="tns:OligoAnalysisInput"/>
         <output name="OligoAnalysisResponse" message="tns:OligoAnalysisOutput"/>
         <documentation>Analysis of the statistical significance of all the oligomers
	   of a given size in a sequence. Commonly used to detect
	   over-represented oligonucleotides in a set of promoter
	   sequences.
         </documentation>
      </operation>
      <operation name="gene_info">
         <input name="GeneInfoRequest" message="tns:GeneInfoInput"/>
         <output name="GeneInfoResponse" message="tns:GeneInfoOutput"/>
         <documentation>Get information about genes.
         </documentation>
      </operation>
  </portType>

  <binding name="RSATWSBinding" type="tns:RSATWSPortType">
      <soap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/>
      <operation name="retrieve_seq">
         <soap:operation soapAction="urn:RSATWS#retrieve_seq"/>
         <input>
             <soap:body use="literal" namespace="urn:RSATWS" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
             <soap:body use="literal" namespace="urn:RSATWS" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      <operation name="purge_seq">
         <soap:operation soapAction="urn:RSATWS#purge_seq"/>
         <input>
             <soap:body use="literal" namespace="urn:RSATWS" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
             <soap:body use="literal" namespace="urn:RSATWS" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      <operation name="oligo_analysis">
         <soap:operation soapAction="urn:RSATWS#oligo_analysis"/>
         <input>
             <soap:body use="literal" namespace="urn:RSATWS" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
             <soap:body use="literal" namespace="urn:RSATWS" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      <operation name="gene_info">
         <soap:operation soapAction="urn:RSATWS#gene_info"/>
         <input>
             <soap:body use="literal" namespace="urn:RSATWS" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
             <soap:body use="literal" namespace="urn:RSATWS" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
  </binding>

  <service name="RSATWebServices">
    <documentation>
      Web services for the Regulatory Sequence Analysis Tools (RSAT).
      Tools developed by Jacques van Helden
      (jvanheld@scmbb.ulb.ac.be), SOAP/WSDL interface developed by
      Olivier Sand (oly@scmbb.ulb.ac.be).
    </documentation>
    <port name="RSATWSPortType" binding="tns:RSATWSBinding">
	<soap:address location="http://rsat.scmbb.ulb.ac.be/rsat/web_services/RSATWS.cgi"/>
    </port>
  </service>
</definitions>
