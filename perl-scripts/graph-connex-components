#!/usr/bin/perl
############################################################
#
# $Id: graph-connex-components,v 1.1 2010/04/14 10:18:40 jvanheld Exp $
#
############################################################


## use strict;

=pod

=head1 NAME

graph-connex-components

=head1 VERSION

$program_version

=head1 DESCRIPTION

Graph-Connex-Components for writing new perl scripts.

=head1 AUTHORS

Carl Herrmann <carl.herrmann@univmed.fr>

=head1 CATEGORY

graph

=head1 USAGE

graph-connex-components [-i inputfile] [-o outputfile] [-v #] [...]

=head1 INPUT FORMAT

=head1 OUTPUT FORMAT

=head1 SEE ALSO

=head1 WISH LIST

=cut


BEGIN {
    if ($0 =~ /([^(\/)]+)$/) {
	push (@INC, "$`lib/");
    }
}
require "RSA.lib";


################################################################
## Main package
package main;
{


  ################################################################
  ## Initialise parameters
  my $start_time = &AlphaDate();
  $program_version = do { my @r = (q$Revision: 1.1 $ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @r };
  $main::verbose = 0;
  $main::in = STDIN;
  $main::out = STDOUT;
  $main::verbose = 1;

  if ($#ARGV != 0) {
    print << "FIN";
========================================================
AllCoCo
----------
finds all connected component from a file of
(tab delimited) links, and writes the links of the CC
in LargestCC.out.
Use: ./AllCoCo <file of links>   
Out: <size of largest component> + file LargestCC.out

Author: Carl Herrmann
Last modified: 14/04/2010
========================================================
FIN
    exit;
  }	


  ## Open the input file
  $file=$ARGV[0];
  ($main::in) = &OpenInputFile($file);

  @vertices=();
  while ($line=<$in>) {
    next if ($line =~ /^#/);	## Skip header lines
    next if ($line =~ /^;/);	## Skip comment lines
    next unless ($line =~ /\S/); ## Skip empty lines
    chomp($line);
    @line=split(/\t/,$line);
    push(@{$neighbors{$line[0]}},$line[1]);
    push(@{$neighbors{$line[1]}},$line[0]);
    if (!$already{$line[0]}) {
      push(@vertices,$line[0]);
    }
    ;
    if (!$already{$line[1]}) {
      push(@vertices,$line[1]);
    }
    ;
    $already{$line[0]}=1;
    $already{$line[1]}=1;
  }

  close($in);
  %already=();
  #print "all read\n";
  #print "vertices : @vertices\n";

  #loop over all initial points

  ################################################################
  ## Open output stream
  $main::out = &OpenOutputFile($output_file);
  my $component_nb = 0;
  do
    {
      $N=$#vertices+1;
      $init_vertex=$vertices[int(rand($N))];

      #    print "init = $init_vertex\n";

      @adjacent=();
      @component=($init_vertex);
      $already{$init_vertex}=1;
      @adjacent=@{$neighbors{$init_vertex}};
      delete $neighbors{$init_vertex};

      # loop over all adjacent vertices

      do
	{
	  #	print "adjacent = @adjacent\n";
	  @newadjacent=();
	  foreach $node (@adjacent) {
	    push(@component,$node) if (!$already{$node});
	    $already{$node}=1;
	    push(@newadjacent,@{$neighbors{$node}}) if (exists $neighbors{$node});
	    delete $neighbors{$node};
	  }
	  #	print "n=$#newadjacent\n";
	  @adjacent=@newadjacent;
	}
	  while ($#newadjacent >= 0);

      $sizeCC=$#component+1;
      $max_edges=$sizeCC*($sizeCC-1)/2;

      %inCoCo=();

      ## Print the component
      $component_nb++;
      if ($main::verbose >= 1) {
	print $out "; Component nb ".$component_nb, "\t", scalar(@component)." nodes", "\n";
      }
      foreach $node (@component) {
	$inCoCo{$node}=1;
	print $out join ("\t", $node, "comp_".$component_nb), "\n";
      }
#      print $out "-----------\n";

      $nlinks=0;
      $meanWeightCC=0;
      #      open($in,$file);
      #       do
      # 	{
      # 	  $line=<$in>;
      # 	}
      # 	  until ($line !~ /^\#/);
      #       do
      # 	{
      # 	  @line=split(/\t/,$line);
      # 	  if ($inCoCo{$line[0]} and $inCoCo{$line[1]}) {
      # #	    print $line;
      # 	    #	    $nlinks++;
      # 	    #	    $meanWeightCC+=$line[2];
      # 	  }
      # 	}
      # 	  while ($line=<$in>);
      #       print "\n";
      #      close $in if ($file);

      @aux=substract(\@vertices,\@component);
      @vertices=@aux;
    }
      while ($#vertices > 0);

  exit(0);
}

################################################################
## Compute the difference between two arrays
sub substract {

  my $array1=shift(@_);
  my $array2=shift(@_);
  my @array1=@{$array1};
  my @array2=@{$array2};
  my @aux=();
  my %in2=();

  foreach $el (@array2) {
    $in2{$el}=1;
  }
  foreach $el (@array1) {
    if (!$in2{$el}) {
      push(@aux,$el);
    }
  }
  return @aux;

}
