#!/usr/bin/perl -w
############################################################
#
# $Id: random-seq-select,v 1.1 2006/02/03 15:35:36 jvanheld Exp $
#
# Time-stamp: <2003-07-04 12:48:55 jvanheld>
#
############################################################

## use strict;

=pod

=head1 NAME

random-seq-select

=head1 DESCRIPTION

Given a multi-sequence input file, return a random selection of these
sequences.

=head1 AUTHORS

jvanheld@scmbb.ulb.ac.be

=head1 CATEGORY

util

=head1 USAGE
    
random-seq-select [-i inputfile] [-o outputfile] [-v]

=head1 INPUT FORMAT

=head1 OUTPUT FORMAT

=cut


BEGIN {
    if ($0 =~ /([^(\/)]+)$/) {
	push (@INC, "$`lib/");
    }
}
require "RSA.lib";



################################################################
## Main package
package main;
{

    ################################################################
    #### initialize parameters
    my $start_time = &AlphaDate();


    %main::infile = ();
    %main::outfile = ();

    $main::verbose = 0;
    $main::in = STDIN;
    $main::out = STDOUT;

    $sequence_format = "fasta";
    $seq_type = "";

    local $line_width=0;
    local $replace = 0; ## Selection with/without replacement
    local $n = 0; #### number of genes to return
#    local $repeat = 1; #### number of repetitions of the input families (with option -fam)
    local $groups = 1; #### number of gene families to return
#    local @families = ();
    
    &ReadArguments();

    ################################################################
    #### check argument values
    unless ((&IsNatural($n)) && ($n > 0)) {
	&RSAT::error::FatalError("The number of sequences must be a strictly positive natural number.");
    }


    ## ##############################################################
    ## Read all sequences from the input file and index them in a hash
    ($main::in, $input_dir) = &OpenInputFile($main::infile{input});
    local %indexed_sequence = ();
    local @sequence_ids = ();
    my @comments = ();
    while  ((($current_seq, $current_id, @comments) = &ReadNextSequence($main::in, $sequence_format, $input_dir, $seq_type)) &&
	    (($current_seq) || ($current_id))) {
	push @sequence_ids, $current_id;
	$indexed_sequence{$current_id} = $current_seq;
    }
    close $main::in if ($main::infile{input});
    
    ################################################################
    #### print verbose
    &Verbose() if ($main::verbose);
    
    
    ################################################################
    ## Initialize the random seed
    if ($seed) { 
	## User-defined seed
	srand($seed);
    } else {
	## Use current time as random seed
	srand (time); 
    }


    foreach my $g (1..$groups) {
	my $outputfile = $main::outfile{output};

	## Add a suffix for the group number
	if (($main::outfile{output})
	    && ($groups > 1)) {
	    $outputfile .= ".rep".$g;
	}
	
	################################################################
	### open output stream
	$main::out = &OpenOutputFile($outputfile);
	&RSAT::message::TimeWarn(join("\t", "Random sequence selection",$g."/".$groups, $outputfile)) if ($main::verbose >= 1);

	################################################################
	###### Select random set of sequences
	my @remaining_ids = @sequence_ids;
	my @random_ids = ();
	for my $i (1..$n) {
	    my $nb_remaining_ids = scalar(@remaining_ids);
	    my $selected = int(rand($nb_remaining_ids));
	    my $selected_id = $remaining_ids[$selected];
	    &RSAT::message::Info(join ("\t", "Selected sequence", $selected, $selected_id)), if ($main::verbose >= 2);
	    if ($replace) {
		push @random_ids, $remaining_ids[$selected];
	    } else {
		push @random_ids, splice(@remaining_ids, $selected, 1);
	    }
	}
	
	
	################################################################
	###### print output
	foreach my $seq_id (@random_ids) {
	    &PrintNextSequence($out, $sequence_format, $line_width, $indexed_sequence{$seq_id}, $seq_id, @comments);
	}
    }

    ################################################################
    ###### finish verbose
    if ($main::verbose >= 1) {
	my $done_time = &AlphaDate();
	print "; Job started $start_time\n";
	print "; Job done    $done_time\n";
    }

    exit(0);
}

################################################################
################### subroutine definition ######################
################################################################


################################################################
#### display full help message 
sub PrintHelp {
    system "pod2text -c $0";
    exit()
}

################################################################
#### display short help message
sub PrintOptions {
    &PrintHelp();
}

################################################################
#### Read arguments 
sub ReadArguments {
#    foreach my $a (0..$#ARGV) {
    my $arg = "";
    
    my @arguments = @ARGV; ## create a copy to shift, because we need ARGV to report command line in &Verbose()
    

    while ($arg = shift (@arguments)) {

	## Verbosity
=pod
	    

=head1 OPTIONS

=over 4

=item B<-v #>

Level of verbosity (detail in the warning messages during execution)

=cut
	if ($arg eq "-v") {
	    if (&IsNatural($arguments[0])) {
		$main::verbose = shift(@arguments);
	    } else {
		$main::verbose = 1;
	    }
	    
	    ## Help message
=pod

=item B<-h>

Display full help message

=cut
	} elsif ($arg eq "-h") {
	    &PrintHelp();
	    
	    ## List of options
=pod

=item B<-help>

Same as -h

=cut
	} elsif ($arg eq "-help") {
	    &PrintOptions();
	    

	    ## Input file
=pod

=item B<-i inputfile>

If no input file is specified, the standard input is used.  This
allows to use the command within a pipe.

=cut
	} elsif ($arg eq "-i") {
	    $main::infile{input} = shift(@arguments);
	    
	    ## Output file
=pod

=item	B<-o outputfile>

If no output file is specified, the standard output is used.  This
allows to use the command within a pipe.

=cut
	} elsif ($arg eq "-o") {
	    $main::outfile{output} = shift(@arguments);
	    

=pod

=item    B<-n seq_number>

Number of sequences to return in the random selection.

=cut

	    ### number of genes
	} elsif ($arg eq "-n") {
	    $n = shift(@arguments);
	    unless (&IsNatural($n)) {
		&RSAT::error::FatalError("$n\tInvalid number of genes. Should be a natural number.");
	    }
	    
=pod

=item    B<-g >

Number of sequences to return in the random selection.

=cut

	    ### number of groups
	} elsif ($arg eq "-g") {
	    $groups = shift(@arguments);
	    unless (&IsNatural($groups)) {
		&RSAT::error::FatalError("$groups\tInvalid number of genes. Should be a natural number.");
	    }
	    

	} else {
	    &FatalError(join("\t", "Invalid option", $arg));

	}
    }


=pod

=back

=cut

}

################################################################
#### verbose message
sub Verbose {
    print "; random-seq-select ";
    &PrintArguments();
    if (defined(%main::infile)) {
	print "; Input files\n";
	while (my ($key,$value) = each %main::infile) {
	    print ";\t$key\t$value\n";
	}
    }
    if (defined(%main::outfile)) {
	print "; Output files\n";
	while (my ($key,$value) = each %main::outfile) {
	    print ";\t$key\t$value\n";
	}
    }
    printf $out "; %-29s\t%s\n", "Nb of input sequences", scalar(@sequence_ids);
}


__END__

=pod

=head1 SEE ALSO

random-genes

=cut
