#!/usr/bin/perl

### CVS: added the option -mask

############################################################
#
# $Id: position-analysis,v 1.32 2006/08/23 15:14:26 jvanheld Exp $
#
# Time-stamp: <2003-10-21 01:16:40 jvanheld>
#
############################################################
if ($0 =~ /([^(\/)]+)$/) {
    push (@INC, "$`lib/");
}
require "RSA.lib";
require RSAT::util;
use POSIX qw(sysconf _PC_CHOWN_RESTRICTED);

################################################################
###### default values for parameters
$class_interval = 20;
$in_format = "fasta";
$strands = "1str";
$group_rc = 0;
$image_format = $IMG_FORMAT; ### By default, take the image format defined in the RSAT config file
$XYgraph_command = "$SCRIPTS/XYgraph";

$reference_pos = 0;

#### initialize other variables
$start_time = &AlphaDate;
$sequence_number = 0;

$max_seq_length = 0;

$nb_possible_pos = 0;
$sum_seq_length = 0;
$no_check = 0;
$no_filter = 0;
$no_filter_graphs = 0;

%supported_seq_type = ("DNA"=>1,
		       "any"=>1);
$supported_seq_types = sort keys %supported_seq_type;
$seq_type = "any";

&ReadArguments();

##############################
### check parameter values ###
##############################


### check oligonucleotide length
unless ($oligo_length > 0) {
  print "\tYou should specify an oligonucleotide length > 0.\n";
  print "\tType position-analysis -h for more info..\n";
  exit;
}


#### min and max classes to take into account for chi-square calculation
if ((&IsInteger($min_pos)) && (&IsInteger($max_pos))) {
    if ($max_pos < $min_pos) {
	&RSAT::error::FatalError( "min position should be smaller than max position");
    }
}


################################################################
#### specific treatment for output file, because if graphs are
#### requested, they must be saved in the same directory as the output
#### file

if ($outputfile) {
    $dir{output} =`dirname $outputfile`; 
    chomp $dir{output};
}
&RSAT::util::CheckOutDir($dir{output});
$out = &OpenOutputFile($outputfile);

### open sequence file ###
&CheckInputSeqFormat($in_format);
($in, $input_dir) = &OpenInputFile($inputfile);


#die "POUET\t$pattern_file\n" if ($pattern_file);
&LocalReadPatterns() if ($pattern_file);
&ReadSequence();

&CheckDNA() if ($seq_type == "dna");

&CalcClasses();


### statistics on oligo occurrences
warn "; Calculating sums of occurrences\n" if ($main::verbose >= 2);
foreach $oligo_seq (sort keys %occurrences) {
  $sum_occurrences += $occurrences{$oligo_seq};	
  $sum_overlaps += $overlaps{$oligo_seq};	
}

&SumStrands() if ($strands eq "2str");

#### if a pattern file has been specified, forget info about other patterns
if ($pattern_file) {
    foreach $oligo_seq (sort keys %occurrences) {
	unless ($selected_pattern{$oligo_seq}) {
	    delete $occurrences{$oligo_seq};
	}
    }
}


#### check threshold on occurrences
if (&IsNatural($low_thr{'occ'})) {
    foreach $oligo_seq (sort keys %occurrences) {
	if ($occurrences{$oligo_seq} < $low_thr{'occ'}) {
	    delete $occurrences{$oligo_seq};
	}
    }
}


&CalcExpected();

&CalcChi() if ($return{'chi'});

&Verbose() if ($main::verbose >= 1);


&PrintResult();


################################################################
### generate XYgraphs
if ($return{'graph'}) {

    #### directory for storing the graphs
    $rel_dir{graphs}="graphs";
    if ($outputfile) {
	$basename = `basename $outputfile`;
	chomp $basename;
	$rel_dir{graphs} = $basename."_".$rel_dir{graphs};
    }

    $dir{graphs} = $dir{output}."/".$rel_dir{graphs};
    mkdir $dir{graphs}, 0755 
	|| &RSAT::error::FatalError("Could not create directory $dir{graphs}");
    unless (-d $dir{graphs}) {
	warn "Creating directory $dir{graphs}\n" if ($main::verbose >= 1);
	mkdir $dir{graphs}, 0755;
	unless (-d $dir{graphs}) {
	    &RSAT::error::FatalError("Cannot create graph directory $dir{gtaph}");
	}
    }


    $date = `date +%H:%M:%S`;
    chomp $date;
    print ";$date\tgenerating the graphs ... \n" if ($main::verbose >= 2);

    #### index for the graphs
    if ($outputfile) {
	$index_file = "${outputfile}_graph_index.html";
    } else {
	$index_file = "$dir{output}/graph_index_${oligo_length}nt_ci${class_interval}_$strands.html";
    }
    open INDEX, ">$index_file";
    print INDEX "<HTML><BODY><PRE>\n";
    close INDEX;

    #### generate one graph for each oligo
    foreach $oligo_seq (@sorted_keys) {
	next unless (&IsReal($chi_square{$oligo_seq}) || ($no_filter_graphs));

	$graph_file_name = "${oligo_seq}_ci${class_interval}_${strands}_pos_distrib.".$image_format;
	$xmax = ($max_class+1) * $class_interval;
	$title2 = "$in_bound_occurrences{$oligo_seq} occurrences";
	$title2 .= ", class interval=$class_interval";
	if ($score_column > 0) {
	    $score = sprintf "score = %.2f", $score{$oligo_seq};
	} elsif ($return{'chi'}) {
	    if (&IsReal($chi_square{$oligo_seq})) {
		$score = sprintf "%.2f", $chi_square{$oligo_seq};
	    } else {
		$score = $chi_square{$oligo_seq};
	    }
	    $title2 .= ", score = $score";
	} 
	
	$command = "$XYgraph_command -o $dir{graphs}/$graph_file_name";
	$command .= " -lines -xcol 1 -ycol 2,3 -legend ";
	$command .= " -title1 '$oligo_seq distribution profile' ";
	$command .= " -title2 '$title2' ";
	$command .= " -xleg1 'position' -yleg1 'class frequency' ";
	$command .= " -ymin 0 -xmin $class_min[0] -xmax $class_max[$max_class] ";
	$command .= " -xgstep2 $class_interval -xsize 600";
	print "; $command\n" if ($main::verbose >= 2);
	open XY, "| $command";
	print XY ";class\tocc_$oligo_seq\texp_$oligo_seq\n"; ### header line
	foreach $class ($min_class..$max_class) {
	    print XY "$class_center{$class}\t";
	    print XY "$class_freq{$oligo_seq}{$class}\t";
	    print XY "$exp_occ{$oligo_seq}{$class}\n";
	}
	close XYgraph;
	open INDEX, ">>$index_file";
	print INDEX "<A HREF=\"$rel_dir{graphs}/$graph_file_name\">$oligo_seq</A>";
	print INDEX "\t$in_bound_occurrences{$oligo_seq}";
	print INDEX "\t$score";
	print INDEX "\n";
	close INDEX;
    }
    open INDEX, ">>$index_file";
    print INDEX "</PRE></BODY></HTML>\n";
    close INDEX;
}


## end of job message
if ($main::verbose >= 1) {
  $done_time  = `date '+%d/%m/%y %H:%M:%S %Z'`;
  print $out ";Job started ".$start_time."\n";
  print $out ";Job done    ".$done_time;
  
}

close $out;

exit(0);


sub SumStrands {
  ### sum profiles of reverse complement patterns for strand insensitive analysis ###
  $date = `date '+%H:%M:%S'`;
  chomp $date;
  print ";$date\tsumming occurrences of reverse complementary patterns ...\n" if ($main::verbose >= 2);
  
  ### occurrences
  foreach $oligo_seq (keys %occurrences) {
    $rc_oligo_seq = lc(&ReverseComplement($oligo_seq));
    $occurrences_2strands{$oligo_seq} = $occurrences{$oligo_seq} + $occurrences{$rc_oligo_seq};
    $occurrences_2strands{$rc_oligo_seq} = $occurrences_2strands{$oligo_seq};
  }
  foreach $oligo_seq (keys %occurrences_2strands) {
    $occurrences{$oligo_seq} = $occurrences_2strands{$oligo_seq};
  }
  undef %occurrences_2strands;
  
  ### positions ###
  for $class ($min_class..$max_class) {
    foreach $oligo_seq (sort keys %occurrences) {
      $rc_oligo_seq = lc(&ReverseComplement($oligo_seq));
      if ($rc_oligo_seq eq $oligo_seq) {
	$m_pos_bothstrands{$oligo_seq}{$class} = $class_freq{$oligo_seq}{$class};
      } else {
	$m_pos_bothstrands{$oligo_seq}{$class} = $class_freq{$oligo_seq}{$class} + $class_freq{$rc_oligo_seq}{$class};
      }	  
    }
    foreach $oligo_seq (sort keys %occurrences) {
      $class_freq{$oligo_seq}{$class} = $m_pos_bothstrands{$oligo_seq}{$class};
      undef $m_pos_bothstrands{$oligo_seq}{$class};
    }   
  }
  
  #### if requested, group results by pairs of reverse complements ####
  if ($group_rc) {
    $date = `date '+%H:%M:%S'`;
    chomp $date;
    print ";$date\tgrouping patterns by pairs of reverse complements ...\n" if ($main::verbose >= 2);
    foreach $oligo_seq (keys %occurrences) {
      $rc_oligo_seq = lc(&ReverseComplement($oligo_seq));
      if ($rc_oligo_seq gt $oligo_seq) { ### only suppress one oligo from the dyad 
	delete $occurrences{$rc_oligo_seq};
	delete $mseq{$rc_oligo_seq};
	delete $class_freq{$rc_oligo_seq};
      }
    }
  }
}


################################################################
#### read patterns from a file
sub LocalReadPatterns {
    $date = `date '+%H:%M:%S'`;
    chomp $date;
    warn ";$date\treading pattern file ...\n" if ($main::verbose >= 1);
    open PATTERNS, "$pattern_file" || die "Error: cannot open pattern file $pattern_file\n";
    while (<PATTERNS>) {
	next if (/^;/);
	next unless (\S);
	chomp;
	@fields = split, "\t";
	$pattern = lc($fields[0]);
	warn ";\t$pattern\n" if ($main::verbose >= 2);
	$selected_pattern{$pattern} = 1;
	$score{$pattern} = $fields[$score_column-1] if ($score_column > 0);
    }
    close PATTERNS;
    @selected_patterns = keys %selected_pattern;
}


################################################################
#### Read input sequence and calculate oligo distributions 
sub ReadSequence {
    if ($main::verbose >= 2) {
	$date = `date '+%H:%M:%S'`;
	chomp $date;
	warn ";$date\tReading sequences\n";
    }
    

    #### read all sequences and count oligo occurrences per class interval
    $sequence_number = 0;
    while ((($current_seq, $current_id, @comments) = &ReadNextSequence($in, $in_format, $input_dir, "", $mask)) &&
	   (($current_seq ne "") || ($current_id ne ""))) {
	
	$sequence_number++;  

	&RSAT::message::TimeWarn (join("\t",
				  "Analysing sequence",
				  $sequence_number,
				  $current_id)) if ($main::verbose >= 3);
	### remove tabs and blank spaces ###    
	$current_seq = &FoldSequence($current_seq,0);
	
	### statistics about sequences ###
	$seq_length[$sequence_number] = length($current_seq);
	$id_list[$sequence_number] = $current_id;
	$last_pos = $seq_length[$sequence_number] - $oligo_length + 1;
	$max_last_pos = &max($max_last_pos, $last_pos);

	$reference_pos = 0;
	if (($origin eq "-0") || ($origin < 0)) {
	    $reference_pos = $seq_length[$sequence_number] + $origin + 1;
	} else {
	    $reference_pos = $origin;
	}

	warn join ( "\t", 
		    $sequence_number,
		    "seq len = ".$seq_length[$sequence_number],
		    "last_pos = ". $last_pos,
		    "ref_pos = ". $reference_pos,
		    ), "\n" if ($main::verbose >= 3);
	
	#### count oligonucleotides ####
	$offset = 0;
	$current_pos = 1;
	my %classes_in_this_seq = ();
	while ($current_pos <= $last_pos) {
	    $relative_pos = $current_pos - $reference_pos;
	    if (($origin eq "-0") || ($origin < 0)) {
		$class = POSIX::floor($relative_pos/$class_interval);
	    } else {
		$class = POSIX::floor(($relative_pos - 1)/$class_interval);
	    }
	    $pos_per_class{$class}++;
	    $classes_in_this_seq{$class}++;
	    $oligo_seq = lc(substr($current_seq,$current_pos-1,$oligo_length));
	    $rc = lc(&ReverseComplement($oligo_seq));
	    warn join ("\t",
		       ";",
		       $sequence_number,
		       "len = ".$seq_length[$sequence_number],
		       "pos = ".$current_pos,
		       "last_pos = ".$last_pos,
		       "ref_pos = ".$reference_pos,
		       "rel_pos = ".$relative_pos,
		       "class = ".$class,
		       "oligo_seq = ".$oligo_seq
		       ), "\n"
			   if ($main::verbose >= 4); 
	    if ((defined(%selected_pattern)) && 
		!($selected_pattern{$oligo_seq}) && 
		!($selected_pattern{$rc})) {
		next;
	    }
	    if (($no_overlap) 
		&& ($last_pos{$oligo_seq} > 0) 
		&& ($current_pos < ($last_pos{$oligo_seq} + $oligo_length))) {
		$overlaps{$oligo_seq}++;
	    } else {
		$occurrences{$oligo_seq}++;
		$class_freq{$oligo_seq}{$class}++;
		$last_pos{$oligo_seq} = $current_pos;
	    }
	    $current_pos++;
	}


	#### max and min classes
	my $current_min_class = &min (keys %classes_in_this_seq);
	my $current_max_class = &max (keys %classes_in_this_seq);
	if (defined($min_class)) {
	    $min_class = &min ($current_min_class, $min_class);
	} else {
	    $min_class = $current_min_class;
	}
	if (defined($max_class)) {
	    $max_class = &max ($current_max_class, $max_class);
	} else {
	    $max_class = $current_max_class;
	}

	warn join ("\t",  
		  "current_min_class = ".$current_min_class,
		  "min_class = ".$min_class,
		  "current_max_class = ".$current_max_class,
		  "max_class = ".$max_class,
		  ), "\n" if ($main::verbose >= 4);

	for my $class ($current_min_class..$current_max_class) {
	    $seq_per_class{$class}++;
	    $sum_seq_per_class++;
#	    warn join ("\t",  ";", $current_min_class,$current_max_class, $class, $last_pos, $pos_per_class{$class}), "\n";
	}

#	warn join ("\t",  ";", $current_min_class,$current_max_class,$class, $last_pos, $pos_per_class{$current_max_class}), "\n";
	undef %last_pos;
    }
    undef $current_seq; ### release the memory occupied
    close $in;


    ### return sequence lengthes
    if ($main::verbose >= 2) {
	for $s (1..$sequence_number) {
	    print ";\t$s\t$id_list[$sequence_number] \t$seq_length[$s]\n";
	}
    }
    
    ### statistics on sequence lengthes
    $date = `date '+%H:%M:%S'`;
    chomp $date;
    warn ";$date\tcalculating stats on sequence lengths ...\n" if ($main::verbose >= 2);
    for $s (1..$sequence_number) {
	$sum_seq_length += $seq_length[$s];
	if ($seq_length[$s] >= $oligo_length) {
	    if ($strands eq "2str") {
		$nb_possible_pos += 2*($seq_length[$s] + 1 - $oligo_length);
	    } else {
		$nb_possible_pos += $seq_length[$s] + 1 - $oligo_length;
	    }
	}
	$max_seq_length = &max($max_seq_length, $seq_length[$s]);

	warn join ("\t", $s, $seq_length[$s], $sum_seq_length, $nb_possible_pos), "\n" if ($main::verbose >= 4);
    }
}


################################################################
#### calculate class intervals
sub CalcClasses {
    warn "; Calculating classes\n" if ($main::verbose >= 2);
    
    ### class definition
    $class_nb = $max_class + 1;
    for $class ($min_class..$max_class) {

	if (($origin eq  '-0') || ($origin < 0)) {
	    $class_min{$class} = $class *$class_interval;
	    $class_max{$class} = ($class+1)*$class_interval -1;
	} else {
	    $class_min{$class} = $class *$class_interval + 1;
	    $class_max{$class} = ($class+1)*$class_interval;
	}

	$class_center{$class} = ($class_min{$class} + $class_max{$class})/2;
	warn join ("\t", 
		   $class,
		   "class_min=".$class_min{$class},
		   "class_max=".$class_max{$class},
		   "class_center=".$class_center{$class},
		   ), "\n" if ($main::verbose >= 4);
    }

    #### min and max classes for calculating the chi2
    if (&IsInteger($min_pos)) {
	$min_calc_class = POSIX::floor($min_pos/$class_interval);	
    } else {
	$min_calc_class = $min_class;
    }
    if (&IsInteger($max_pos)) {
	$max_calc_class = POSIX::floor($max_pos/$class_interval);
    } else {
#	die $max_class , "\n";
	$max_calc_class = $max_class;
    }    
    $calc_class_nb = $max_calc_class - $min_calc_class + 1;

    #### positions per class
    $sum_pos_per_class  = 0;
    for $class ($min_calc_class..$max_calc_class) {
	$sum_pos_per_class += $pos_per_class{$class};
    }
}



################################################################
#### calcualte expected frequencies per class interval
sub CalcExpected {
    ### calculate expected occurrences for each class
    $date = `date '+%H:%M:%S'`;
    chomp $date;
    warn ";$date\tCalculating expected occurrences ...\n" if ($main::verbose >= 2);
    foreach $oligo_seq (sort keys %occurrences) {
	foreach $class ($min_calc_class..$max_calc_class) {
	    $in_bound_occurrences{$oligo_seq} += $class_freq{$oligo_seq}{$class};
	}
	foreach $class ($min_calc_class..$max_calc_class) {
	    ### check that the class_freq has been defined
	    unless (&IsNatural($class_freq{$oligo_seq}{$class})) {
		$class_freq{$oligo_seq}{$class} = 0;
	    }

	    #		if ($seq_per_class{$class} > 0) {
	    #			$rel_freq{$oligo_seq}{$class} =  $class_freq{$oligo_seq}{$class}/$seq_per_class{$class};
	    #		} else {
	    #			$rel_freq{$oligo_seq}{$class} = 0;
	    #		}
	    if ($sum_pos_per_class > 0) {
		$exp_occ{$oligo_seq}{$class} =  $in_bound_occurrences{$oligo_seq} * $pos_per_class{$class}/$sum_pos_per_class;
	    } else {
		$exp_occ{$oligo_seq}{$class} =  "NA";
	    }
	    $max_freq = &max($max_freq,$class_freq{$oligo_seq}{$class},$exp_occ{$oligo_seq}{$class});
	    $min_freq = &min($min_freq,$class_freq{$oligo_seq}{$class},$exp_occ{$oligo_seq}{$class});
	}
    }
}

################################################################
#### calculate chi square statistics to compare expected and observed
#### frequencies
sub CalcChi {

    ### calculate chi2 to compare the position distribution with a flat line
    $date = `date '+%H:%M:%S'`;
    chomp $date;
    warn ";$date\tcalculating chi values ...\n" if ($main::verbose >= 2);
    foreach $oligo_seq (sort keys %occurrences) {

	@chi_values = ();
	foreach $class ($min_calc_class..$max_calc_class) {
	    push @chi_values, $class_freq{$oligo_seq}{$class};
	}
	foreach $class ($min_calc_class..$max_calc_class) {
	    push @chi_values, $exp_occ{$oligo_seq}{$class};
	}
	($chi_square{$oligo_seq}, $df{$oligo_seq}) = &ChiSquare("goodfit", 2, $calc_class_nb, @chi_values);
	

	#### chek or not the applicability condition for the chi2
	if ($no_check) {
	    #### suppress parentheses in the output
	    $chi_square{$oligo_seq} =~ s/\(//;
	    $chi_square{$oligo_seq} =~ s/\)//;
	} else {
	    unless (&IsReal($chi_square{$oligo_seq})) {
		print $out "; WARNING: $oligo_seq $chi_square{$oligo_seq}  does not fit conditions for the chi-square\n" 
		    if ($main::verbose >= 2);
		unless ($no_filter) {
		    print $out "; WARNING: $oligo_seq discarded\n" 
			if ($main::verbose >= 3);
		    delete $occurrences{$oligo_seq};
		    delete $chi_square{$oligo_seq};
		}
	    }
	}
	

##	warn join ("\t", $oligo_seq, $occurrences{$oligo_seq}, ${chi_square{$oligo_seq}}, $low_th{'chi'}), "\n";	

	
	#### check the threshold on chi-square
	if ((&IsReal($low_thr{'chi'})) && 
	    ($chi_square{$oligo_seq} < $low_thr{'chi'})) {	
	    print $out "; WARNING: $oligo_seq below the chi threshold $chi_square{$oligo_seq} < $low_thr{'chi'}\n" 
		if ($main::verbose >= 3);

	    delete $occurrences{$oligo_seq};
	    delete $chi_square{$oligo_seq};
	}
    }

}

################################################################
#### help message
sub PrintHelp {
  open HELP, "| more";
  print HELP <<End_of_help; 
NAME
	position-analysis
	
        1998 by Jacques van Helden (jvanheld\@scmbb.ulb.ac.be)
	
DESCRIPTION
	Calculates the positional distribution of oligonucleotides in
	a set of sequences, and detects those which significantly
	discard from a homogeneous distribution.

CATEGORY
	sequences
	pattern-discovery

USAGE
	position-analysis [-i inputfile]  [-format input_format]
                [-o outputfile] -l length -ci class_interval
                [-1str | -2str] [-grouprc | -nogrouprc]

	position-analysis [-h | -help]
		provides a detailed or synthetic documentation


OPTIONS
	-i inputfile
		if not specified, the standard input is used.
		This allows to place the command within a pipe.

	-mask upper|lower
		Mask lower or uppercases, respecively, i.e. replace
		selected case by N characters.

	-format	input file format. Must be followed by one of the 
		following options:
		   fasta (default)
		   wconsensus
		   IG
		   filelist
		   raw
		See below for the description of these formats.

	-o file	outputfile. Returns a list of the oligonucleotides 
		encountered in the sequences, with their frequencies.

	-v \#	verbose level. 

	-l	oligonucleotide length.

	-ci	class interval (default 20 bases). 
		The width of the position classes (in number of bases)

	-grouprc        group reverse complement pairs

	-nogrouprc      do not group reverse complement pairs

	-sort		
		sort oligonucleotides according to the bias in
		distribution profile

	-1str	
		inactivates the summation of occurrences on both
		strands.

	-2str
		oligonucleotide occurrences found on both stands are
		summed.

	-noov	no overlap
			overlapping occurrences of the same pattern are 
			only taken into account once

	-return	fields_to_return
		supported fields:
			distrib	occurrences found in each position class
			exp	expected occurrences for each class
			graph	a rgaph file per oligont profile
			chi	chi-square value
			rank	rank of the pattern according to the
				sorting criterion
		several fields can be entered, separated by commas

	-lth #	lower threshold on chi2
		return only words with a chi2 value > #

	-oth #	lower threshold on occurrences
		return only words with a number of occurrences > #

	-rth #	upper threshold on rank
		return maximum # words

	-pl pattern_file
		A file containing a selection of patterns.  The
		analysis is then restricted to these patterns.  The
		first word of each new line is considered as a new
		pattern.  A score can be associated to each pattern
		with the option -sc.

	-sc #	score column
		(only valid whith the option -pl)
		The column containing a score value for each pattern
		of the pattern file

	-minpos #
		minimal position to take into account for the
		chi-square calculation This value must be a multiple
		of the class interval.

	-maxpos #
		maximal position to take into account for the
		chi-square calculation This value must be a multiple
		of the class interval.

	-nocheck
		do not check the applicability condition on the
		chi-square. By default, the program checks that each
		class has at least 5 observations. The chi-square is
		bracketed for words which do not fill this
		conditions. It is now recognized that this condition
		is too restrictive, and that the chi2 is still valid
		with smaller clas effective. We allow to suppress the
		checking, but the responsibility is left to the user,
		to decide whether the chi2 is or not significant.

	-nofilter
		Do not discard oligos which do not fit the condition
		of applicability. Instead, mark them by including the
		chi2 value in curly brackets.

	-origin
		reference for calculating positions. 

		If a negative value is specified, coordinates are
		calculated with respect to the specified position
		relative to the end rather than the start of the
		sequences.

		The default value is 0, meaning that positions are
		calculated from sequence start (5\' side).

		To calculate the positions relative to sequence end,
		use the option:
			     -origin -0

	-img_format
		Image format (this parameter is passed to XYgraph)

End_of_help
  close HELP;
  exit(0);
}

################################################################
#### short description of the options
sub PrintOptions {
  open HELP, "| more";
  print HELP <<End_of_help; 
position-analysis options
----------------------
-h		display complete help message
-help		display this list of options
-i		input file
-mask upper|lower	mask upper- or lowercases, respectively
-format		input sequence format
-o 		output file
-v \#		verbose level
-l		oligonucleotide length
-ci		class interval (default 20 bases). 
-1str		inactivate summation of occ on both strands
-2str		sum occurences on both strands (default)
-grouprc	group reverse complement pairs (default)
-nogrouprc	do not group reverse complement pairs
-noov		no overlap
-sort		sort oligonucleotides according to the score
-return		chi,distrib,exp,graph,rank
-lth		lower threshold on chi2
-oth		lower threshold on occurrences
-rth		lower threshold on rank
-pl		pattern list
-origin		origin (-0 to calculate positions relative to sequence end)
-img_format	image format (this parameter is passed to XYgraph)
-sc		score column
-minpos		minimal position for chi-square calculation
-maxpos		maximal position for chi-square calculation
-nocheck	do not check applicability condition for the chi2
-nofilter	don\'t discard oligos which do not fit applicability condition
End_of_help
    close HELP;
    exit(0);
}

################################################################
#### read arguments ####
sub ReadArguments {
    foreach $a (0..$#ARGV) {
	### verbose ###
	if ($ARGV[$a] eq "-v") {
	    if (&IsNatural($ARGV[$a+1])) {
		$main::verbose = $ARGV[$a+1];
	    } else {
		$main::verbose = 1;
	    }
	    
	    ### detailed help
	} elsif ($ARGV[$a] eq "-h") {
	    &PrintHelp();
	    
	    ### list of options
	} elsif ($ARGV[$a] eq "-help") {
	    &PrintOptions();
	    
	    ### input file
	} elsif ($ARGV[$a] eq "-i") {
	    $inputfile = $ARGV[$a+1];
	    
	    ## mask
	} elsif ($ARGV[$a] eq "-mask") {
	    $mask = $ARGV[$a+1];
	    &CheckMask($mask);	    

	    ### output file
	} elsif ($ARGV[$a] eq "-o") {
	    $outputfile = $ARGV[$a+1];
	    
	    ### oligomer length
	} elsif (($ARGV[$a] eq "-l") && (&IsNatural($ARGV[$a+1]))) {
	    $oligo_length = $ARGV[$a+1];
	    
	    ### class interval
	} elsif (($ARGV[$a] eq "-ci") && (&IsNatural($ARGV[$a+1]))) {
	    $class_interval = $ARGV[$a+1];
	    
	    ### sequence format
	} elsif ($ARGV[$a] eq "-format") {
	    $in_format = lc($ARGV[$a+1]);
	    
	    ### strands
	} elsif ($ARGV[$a] eq "-1str") {
	    $strands = "1str";
	    $sum_rc = 0;
	    $group_rc = 0;

	} elsif ($ARGV[$a] eq "-2str") {
	    $strands = "2str";
	    $sum_rc = 1;
	    $group_rc = 1;
	    
	    ### grouping of reverse complements
	} elsif ($ARGV[$a] eq "-grouprc") {
	    $strands = "2str";
	    $group_rc = 1;
	} elsif ($ARGV[$a] eq "-nogrouprc") {
	    $group_rc = 0;
	    
	    ### sort the result according to significance
	} elsif ($ARGV[$a] eq "-sort") {
	    $sort_result = 1;
	    
	    ### no overlap between successive matches
	} elsif ($ARGV[$a] eq "-noov") {
	    $no_overlap = 1;
	    
	    ### lower threshold on chi square
	} elsif ($ARGV[$a] =~ /^-lth/) { 
	    $low_thr{'chi'} = $ARGV[$a+1];
	    $return{'chi'} = 1;
	    unless (($low_thr{'chi'} >= 0) && (&IsReal($low_thr{'chi'}))) {
		&RSAT::error::FatalError("Threshold on chi2 must be a positive number") ;
	    }
	    
	    ### lower threshold on occurrences
	} elsif ($ARGV[$a] =~ /^-oth/) { 
	    $low_thr{'occ'} = $ARGV[$a+1];
	    unless (&IsNatural($low_thr{'occ'})) {
		&RSAT::error::FatalError("Threshold on occurrences must be a natural number") ;
	    }
	    
	    ### Upper threshold on rank
	} elsif ($ARGV[$a] =~ /^-rth/) { 
	    $upper_thr{rank} = $ARGV[$a+1];
	    unless (&IsNatural($upper_thr{rank})) {
		&RSAT::error::FatalError("Threshold on rank must be a natural number") ;
	    }
	    
	    ### return values
	} elsif ($ARGV[$a] eq "-return") {
	    @fields_to_return = split ",", $ARGV[$a+1];
	    foreach $field (@fields_to_return) {
		if ($field =~ /dist/) {
		    $return{'distrib'} = 1;
		    
		} elsif ($field =~ /chi/) {
		    $return{'chi'} = 1;
		    
		} elsif ($field =~ /exp/) {
		    $return{'exp'} = 1;
		    
		} elsif ($field =~ /graph/) {
		    $return{'graph'} = 1;

		} elsif ($field =~ /rank/) {
		    $return{'rank'} = 1;
		}
	    }
	    
	    #### sequence type
	} elsif ($ARGV[$a] =~ /^-seqtype/i) {
	    $seq_type = $ARGV[$a+1];
	    unless ($supported_seq_type{$seq_type}) {
		&RSAT::error::FatalError("$seq_type is not a supported sequence type. Supported: $supported_seq_types");
	    }

	    ### do not check applicability condition for the chi2
	} elsif ($ARGV[$a] eq "-nocheck") {
	    $no_check = 1;

	    ### do not discard oligos which do not fit the applicability condition
	} elsif ($ARGV[$a] eq "-nofilter") {
	    $no_filter = 1;
	    
	    ### predefined pattern list
	} elsif ($ARGV[$a] =~ /-pl/) {
#	    die "BOUM\t$pattern_file\n";
	    $pattern_file = $ARGV[$a+1];
	    
	    ### score column
	} elsif ($ARGV[$a] eq "-sc") {
	    $score_column = $ARGV[$a+1];
	    unless (&IsNatural($score_column)) {
		&RSAT::error::FatalError( "Score column must be a natural number\n");
	    }
	    
	    ### score column
	} elsif ($ARGV[$a] =~ /^-orig/) {
	    $origin = $ARGV[$a+1];
	    unless (&IsInteger($origin)) {
		&RSAT::error::FatalError( "Invalid value $origin\tOrigin must be an integer number\n");
	    }
	    
	} elsif ($ARGV[$a] eq "-img_format") {
	    $image_format = $ARGV[$a+1];

	    ### min and max positions
	} elsif (($ARGV[$a] eq "-minpos") && (&IsInteger($ARGV[$a+1]))) {
	    $min_pos = $ARGV[$a+1];
	} elsif (($ARGV[$a] eq "-maxpos") && (&IsInteger($ARGV[$a+1]))) {
	    $max_pos = $ARGV[$a+1];
	    
	}
    }
}

################################################################
### verbose
sub Verbose {
    print $out "; position-analysis";
    &PrintArguments($out);
#    print $out "\n";

    printf $out "; %s\n", "Citation: van Helden, et al. (2000).  Nucleic Acids Res 28, 1000-1010.";

    printf $out "; %-29s\t%s\n", "Sequence file", $inputfile if ($inputfile);
    printf $out "; %-29s\t%s\n", "Sequence format", $in_format;
    printf $out "; %-29s\t%s\n", "Sequence type", $seq_type;
    printf $out "; %-29s\t%s\n", "Output file", $outputfile if ($outputfile);
    printf $out "; %-29s\t%d\n", "Oligo length", $oligo_length;
    printf $out "; %-29s\t%f\n", "Lower threshold on chi", $low_thr{'chi'} if (&IsReal($low_thr{'chi'}));
    printf $out "; %-29s\t%d\n", "Lower threshold on occurrences", $low_thr{'occ'} if (&IsNatural($low_thr{'occ'}));
    if ($strands eq "2str") {
	printf $out "; %-29s\n", "Occurrences counted  on both strands";
	if ($group_rc) {
	    printf $out "; %-29s\n", "grouped by pairs of reverse complements";
	}
    } else {
	printf $out "; %-29s\n", "Occurrences counted  on a single  strands";
    }
    print $out "; Conditions of applicability not checked !\n" if $no_check;
    print $out "; WARNING ! chi2 is shown between curly braces when the applicability conditions are not satisfied.\n" if $no_filter;

    print $out "; Sequence statistics:\n";
    printf $out ";\t%-29s\t%d\n", "Nb of sequences", $sequence_number;
    printf $out ";\t%-29s\t%d\n", "Sum of sequence lengths", $sum_seq_length;
    printf $out ";\t%-29s\t%d\n", "Min sequence length", $min_seq_length;
    printf $out ";\t%-29s\t%d\n", "Max sequence length", $max_seq_length;
    printf $out ";\t%-29s\t%d\n", "Average sequence length", $sum_seq_length/$sequence_number ,"\n" if ($sequence_number > 0);
    printf $out ";\t%-29s\t%d\n", "Possible positions", $nb_possible_pos;
    unless ($sequence_number > 100) {
	print $out "; Sequences:\n";
	print $out ";\t#\tlength\tID\n";
	foreach $s (1..$sequence_number) {
	    print $out ";\t$s\t$seq_length[$s]\t$id_list[$s]\n";
	}
    }

    if ($#selected_patterns >=0) {
	print $out join ("\n;\t", "; Selected patterns", @selected_patterns), "\n";
    }
    

    print $out "; Oligonucleotide statistics:\n";	
    printf $out ";\t%-21s\t%d\n", "Total occurrences", $sum_occurrences;
    if ($no_overlap) {
	printf $out ";\t%-21s\t%d\n", "Total overlaps", $sum_overlaps;
    }

    print $out "; Class parameters:\n";

    printf $out ";\t%-21s\t%d\n", "Class interval", $class_interval;
    printf $out ";\t%-21s\t%d\n", "Min position", $min_pos if (&IsInteger($min_pos));
    printf $out ";\t%-21s\t%d\n", "Max position", $max_pos if (&IsInteger($max_pos));
#    printf $out ";\t%-21s\t%d\n", "Min class", $min_calc_class + 1 if (&IsInteger($min_calc_class));
#    printf $out ";\t%-21s\t%d\n", "Max class", $max_calc_class + 1 if (&IsInteger($max_calc_class));
    printf $out ";\t%-21s\t%d\n", "Number of classes", $calc_class_nb;
    printf $out ";\t%-21s\t%d\n", "Total positions", $sum_pos_per_class;
    printf $out ";\t%-21s\t%d\n", "Degrees of freedom", $calc_class_nb - 1;

    print $out "; Sequences per class:\n";
    print $out join ("\t", ";", "class", "\[min", "max\]", "mid", "seq", "occ"), "\n";
    for $class ($min_calc_class..$max_calc_class) {
	print $out join ("\t",  ";", 
			 $class - $min_calc_class + 1, 
			 "\[".$class_min{$class}, 
			 $class_max{$class}."\]", 
			 $class_center{$class}, 
			 $seq_per_class{$class}, 
			 $pos_per_class{$class}), "\n";
    }
    
    print $out ";\n";
}


################################################################
### print the result file
sub PrintResult {


    #### sort oligonucleotides, either according to their significance
    #### or alphabetically
    if ($sort_result) {
	$date = `date '+%H:%M:%S'`;
	chomp $date;
	print ";$date\tsorting results ...\n" if ($main::verbose >= 2);
	if ($score_column > 0) {
	    @sorted_keys = sort { 
		$sccore{$b} <=>  $score{$a}
	    } keys %occurrences;
	} elsif ($return{'chi'}) {
	    @sorted_keys = sort { 
		$chi_square{$b} <=>  $chi_square{$a}
	    } keys %occurrences;
	} else {
	    @sorted_keys = sort { 
		$in_bound_occurrences{$b} <=>  $in_bound_occurrences{$a}
	    } keys %occurrences;
	}
    } else {
	@sorted_keys = sort keys %occurrences;
    }

    if (defined($upper_thr{rank})) {
      @sorted_keys = @sorted_keys[0..($upper_thr{rank}-1)];
    } 


    #### output columns
    @out_col = (); @col_descriptions = ();
    push @out_col, 'seq'; push @col_descriptions, 'pattern sequence';
    push @out_col, 'id'; push @col_descriptions, 'pattern identifier';
    push @out_col, 'occ'; push @col_descriptions, 'pattern occurrences';
    if ($no_overlaps) {push @out_col, "over"; push @col_descriptions, 'overlapping occurrences (discarded)';}
    if ($return{'chi'}) {
	push @out_col, "chi2" ; push @col_descriptions, 'observed chi-square';
	push @out_col, "df" ; push @col_descriptions, 'degrees of freedom';
    }
    if ($return{'rank'}) {
	push @out_col, "rank"; push @col_descriptions, 'rank of the pattern according to sorting criterion';
    }
    if ($return{'distrib'}) {
	for $class ($min_calc_class..$max_calc_class) {
	    push @out_col, $class_center{$class}; push @col_descriptions, 'observed class occurrences';
	}
	if ($return{'exp'}) {
	    for $class ($min_calc_class..$max_calc_class) {
		push @out_col, $class_center{$class}; push @col_descriptions ,'expected class occurrences';
	    }
	}
    }
    
    if ($main::verbose >= 1) {
	print $out "; column headers\n";
	foreach $c (0..$#out_col) {
	    printf $out ";\t%d\t%-15s\t%s\n", $c+1, $out_col[$c], $col_descriptions[$c];
	}
    }
    
    ### header 
    $date = `date '+%H:%M:%S'`;
    chomp $date;
    print ";$date\tprinting results ...\n" if ($main::verbose >= 2);
    print $out ";", join("\t", @out_col), "\n";


    ### pattern distributions
    my $rank = 0;
    foreach $oligo_seq (@sorted_keys) {
      $rank++;
      print $out "$oligo_seq"; ### Pattern sequence
      print $out "\t", &PatternID($oligo_seq, $sum_rc); ### Pattern ID
      #	print $out "\t$oligo_seq"; ### Pattern ID
      #	if ($group_rc) {
      #	    print $out "|", lc(ReverseComplement($oligo_seq));
      #	}
      
      ### Occurrences
      print $out "\t$in_bound_occurrences{$oligo_seq}";
      print $out "\t$overlaps{$oligo_seq}" if ($no_overlaps);
      
      ### chi-square value
      if ($return{'chi'}) {
	printf $out "\t%.1f", $chi_square{$oligo_seq};
	
	### Degrees of freedom
	printf $out "\t%d", $df{$oligo_seq};
      }
      
      #### Rank
      if ($return{'rank'}) {
	print $out "\t$rank";
      }
      
      ### Position distribution
      if ($return{'distrib'}) {
	for $class ($min_calc_class..$max_calc_class) {
	  print $out "\t$class_freq{$oligo_seq}{$class}";
	  #			printf $out " (%.1f)", $exp_occ{$oligo_seq}{$class} if ($return{'exp'});
	}
      }
      
      #	print $out "\n";
      
      if (($return{'exp'}) && ($return{'distrib'})) {
	#	    print $out "$oligo_seq";
	#	    print $out "\t$oligo_seq";
	#	    if ($group_rc) {
	#		print $out "|", lc(ReverseComplement($oligo_seq));
	#	    }
	#	    print $out "\t$in_bound_occurrences{$oligo_seq}";
	#	    print $out "\t$overlaps{$oligo_seq}" if ($no_overlaps);
	#	    print $out "\texpected";
	
	for $class ($min_calc_class..$max_calc_class) {
	  printf $out "\t%.1f", $exp_occ{$oligo_seq}{$class}; 
	}       
      }
      print $out "\n";
    }
}


################################################################
#
# Filter out all oligos with non-canonical alphabet

sub CheckDNA {
    warn "; Checking DNA\n" if ($main::verbose >= 2);

    foreach $oligo_seq (sort keys %occurrences) {
	if ($oligo_seq =~ /[^atcg]/i) {
	    delete $occurrences{$oligo_seq};
	}
    }
}

