#!/usr/bin/perl -w
############################################################
#
# $Id: install-ensembl-genome,v 1.7 2013/07/09 15:52:23 rsat Exp $
#
############################################################

## use strict;

=pod

=head1 NAME

install-ensembl-species

=head1 VERSION

$program_version

=head1 DESCRIPTION

Install on RSAT genome, genomic feature and variation feature for a genome form Ensembl (http://www.ensembl.org/) ftp and API

=head1 AUTHORS

Jeremy.Delerce\@etu.univ-amu.fr

Jacques.van-Helden\@univ-amu.fr

=head1 CATEGORY

=over

=item util

=back

=head1 USAGE

install-ensembl-species [-version #] [-task #] [-dir #] [-o outputfile] [-v #] [...]

=head2 Example

 install-ensembl-species -v 1 -species Homo_sapiens

=head1 OUTPUT FORMAT

The program exports chromosome sequences and genomic features.

=head2 Chromosome sequence format

Chromosome sequences are exported in raw format (sequences only, no
space, no carriage return), which is indispensable in order to enable
direct access to any piece of sequences without having to load whole
chromosomee in memory.


=head2 Genomic features

Genomic features (genes, CDS, mRNAs, ...) are exported in gft format
(the RSAT specification of genomic features). For a description, of
this format and conversions from/to other formats, type

  convert-features -h

=head2 Variation features

Variation features are exported in special RSAT format.
For a description, of this format

  download-ensembl-variations -h

=head1 SEE ALSO

=head2 download-ensembl-genome

Download genome from ensembl ftp and install it to RSAT.

=head2 download-ensembl-feature

Download genomic feature from ensembl API and install it to RSAT.

=head2 download-ensembl-variation

Download variation feature from ensembl ftp and install it to RSAT.

=head1 WISH LIST

=over

=item B<-task sequences>

Download all chromosomal sequences from Ensembl.

=item B<-task features>

Download all chromosomal features from Ensembl.

=back

=cut


BEGIN {
  if ($0 =~ /([^(\/)]+)$/) {
    push (@INC, "$`lib/");
  }
}
require "RSA.lib";
require "RSAT_to_ensembl.lib.pl";

################################################################
## Main package
package main;
{

  ################################################################
  ## Initialise parameters
  our $start_time = &RSAT::util::StartScript();
  our $program_version = do { my @r = (q$Revision: 1.7 $ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @r };

  our %infile = ();
  our %outfile = ();

  our $verbose = 0;
  our $out = STDOUT;
  

  our $data_dir = &Get_data_dir();
  our $site = "ensembl";
  our $ensembl_version = &Get_ensembl_version_safe($site);
  our $get_available_species = 0;

  our @tasks = ();
  our %task = ();
  our @species_names = ();

  ################################################################
  ## Read argument values
  &ReadArguments();
  
  if ($infile{input}) {
  	my ($file) = &OpenInputFile($infile{input});
    while (<$file>) {
      chomp();
      push (@species_names,$_);
    }
  }

  ################################################################
  ## Check argument values
  if (scalar(@species_names) < 1) {
    &RSAT::error::FatalError("You must specify at least one species (option -species).");
  }

  @tasks = ("genome","features") if ( scalar(@tasks) < 1);
  foreach (@tasks) {
     if ($_ ne "genome" || $_ ne "features" || $_ ne "variations") {
         &RSAT::message::Warning("$_ skip. Not available task");
         next;
     }
     $task{$_} = 1;
  }

  ################################################################
  ## Print verbose
  $out = &OpenOutputFile($outfile{output});
  &Verbose() if ($main::verbose >= 1);

  ################################################################
  if ($get_available_species) {
      
      
      if ($task{"genome"}) {
	  print $out "Genome Available";
  	  system ($ENV{'RSAT'}."perl-scripts/download-ensembl-genome -available_species");
      }
      
      if ($task{"features"}) {
	  print $out "Features Available";
	  system ($ENV{'RSAT'}."perl-scripts/download-ensembl-feature -available_species");
      }
      
      if ($task{"variations"}) {
	  print $out "Variations Available";
	  system ($ENV{'RSAT'}."perl-scripts/download-ensembl-variations -available_species");
      } 

      my $exec_time = &RSAT::util::ReportExecutionTime($start_time); ## This has to be exectuted by all scripts
      print $out $exec_time if ($main::verbose >= 1); ## only report exec time if verbosity is specified
      close $out;
      exit(0);
  }


  ################################################################
  ## Call download script
  
  foreach my $species (@species_names) {
      if ($task{"genome"}) {
	  &RSAT::message::TimeWarn("Install genome for ", $species) if ($main::verbose >= 1);
	  system ($ENV{'RSAT'}."perl-scripts/download-ensembl-genome -species $species -version $version -dir $data_dir");
      }
      
      if ($task{"features"}) {
	  &RSAT::message::TimeWarn("Install features for ", $species) if ($main::verbose >= 1);
	  system ($ENV{'RSAT'}."perl-scripts/download-ensembl-feature -species $species -version $version -dir $data_dir");
      }
      
      if ($task{"variations"}) {
	  &RSAT::message::TimeWarn("Install variation for ", $species) if ($main::verbose >= 1);
	  system ($ENV{'RSAT'}."perl-scripts/download-ensembl-variations -species $species -version $version -dir $data_dir");
      }    
      
  } 

  ################################################################
  my $exec_time = &RSAT::util::ReportExecutionTime($start_time); ## This has to be exectuted by all scripts
  print $out $exec_time if ($main::verbose >= 1); ## only report exec time if verbosity is specified
  close $out;
  exit(0);
}


################################################################
################### SUBROUTINE DEFINITION ######################
################################################################


################################################################
## Display full help message 
sub PrintHelp {
  system "pod2text -c $0";
  exit()
}

################################################################
## Display short help message
sub PrintOptions {
  &PrintHelp();
}

################################################################
## Read arguments 
sub ReadArguments {
  my $arg;
  my @arguments = @ARGV; ## create a copy to shift, because we need ARGV to report command line in &Verbose()
  while (scalar(@arguments) >= 1) {
    $arg = shift (@arguments);
    ## Verbosity

=pod

=head1 OPTIONS

=over 4

=item B<-v #>

Level of verbosity (detail in the warning messages during execution)

=cut
    if ($arg eq "-v") {
      if (&IsNatural($arguments[0])) {
	$main::verbose = shift(@arguments);
      } else {
	$main::verbose = 1;
      }


=pod

=item B<-h>

Display full help message

=cut
    } elsif ($arg eq "-h") {
      &PrintHelp();


=pod

=item B<-help>

Same as -h

=cut
    } elsif ($arg eq "-help") {
      &PrintOptions();

=pod

=item B<-species #>

Name of the species (organism).

This option can be used iteratively to install multiple
genomes. Alternatively, a list of organisms can be entered with the
option I<-i>.

=cut
    } elsif ($arg eq "-species") {
      push @species_names, shift(@arguments);


=pod

=item B<-version #>

The release version of ensEMBL.

Supported versions: 70 to 72, safe, latest

Default : I<safe>

=over

=item I<safe>

The file locations and/or formats of the Ensembl ftp distribution
may change between two Ensembl release.

For this reason, we defined the "safe" version, which corresponds to
the latest version of ensembl which has been checked to work with this
script.

=item latest

This corresponds to the lastest version of Ensembl. Beware: this
version is not guaranteed to be compatible with RSAT, in case Ensembl
would change their file formats or locations.

=back

=cut
    } elsif ($arg eq "-version") {
    $ensembl_version = shift(@arguments);
    &RSAT::error::FatalError($ensembl_version,"is not a valid value for Ensembl version. Supported values: Natural numbers (e.g. 72), safe, latest.") 
      unless ( &IsNatural($ensembl_version) || $ensembl_version eq "safe" || $ensembl_version eq "latest" );

=pod

=item B<-dir #>

The directory in wich RSAT data must be installed. The selected
species will be installed in a sub-directory composed of Species name
and Ensembl genome version.

Default : $RSAT/data/

=cut
    } elsif ($arg eq "-dir") {
      $main::data_dir = shift(@arguments);

=pod

=item	B<-o outputfile>

If no output file is specified, the standard output is used.  This
allows to use the command within a pipe.

=cut
    } elsif ($arg eq "-o") {
      $outfile{output} = shift(@arguments);

    } else {
      &FatalError(join("\t", "Invalid option", $arg));

    }
  }

=pod

=back

=cut

}

################################################################
## Verbose message
sub Verbose {
  print $out "; install-ensembl-species ";
  &PrintArguments($out);
  printf $out "; %-22s\t%s\n", "Program version", $program_version;
  if (%main::infile) {
    print $out "; Input files\n";
    while (my ($key,$value) = each %main::infile) {
      printf $out ";\t%-13s\t%s\n", $key, $value;
    }
  }
  if (%main::outfile) {
    print $out "; Output files\n";
    while (my ($key,$value) = each %main::outfile) {
      printf $out ";\t%-13s\t%s\n", $key, $value;
    }
  }
}


__END__
