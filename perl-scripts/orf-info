#!/usr/bin/perl
############################################################
#
# $Id: orf-info,v 1.11 2002/09/17 00:57:16 jvanheld Exp $
#
# Time-stamp: <2002-09-16 19:31:13 jvanheld>
#
############################################################

if ($0 =~ /([^(\/)]+)$/) {
    push (@INC, "$`lib/");
}
require "RSA.lib";
require "RSA.classes";

$start_time = $date = `date '+%d/%m/%y %H:%M:%S %Z'`;

#### initialise parameters ####
$orf_col = 0;
$locus_col = 2;
$full = 0;
$no_query = 0;
$match_description = 0;

&ReadArguments;

#### check parameter values

#### organism
&CheckOrganism($organism_name);


### open output file ###
$out = &OpenOutputFile($outputfile);

&Verbose();

### read ORF information
&ReadOrfPositions($organism_name);
&ReadSynonyms($organism_name);


################################################################
#### read query file
if (($inputfile) || ($#queries == -1)) {
    ($in, $input_dir) = &OpenInputFile($inputfile);
    while (<$in>) {
	next if (/^;/);
	next if (/^--/);
	next if (/^\#/);
	next unless (/\S/);
	if  (/^\s*(\S+)/) {
	    push(@queries, $1);
	}
    }
    close $in if ($inputfile ne "");
} elsif ($#queries == -1) {
    @queries = $ARGV[0];
}

################################################################
#### search orf info for all queries ####
&Header;
foreach $query (@queries) {
#    $query =~ tr/a-z/A-Z/;

    $found = 0;

    if ($full) {
	foreach $key (keys %orf_id) {
	    if ($key =~ /^$query$/i) {
		$found = 1;
		&PrintInfo($query, $orf_id{$key});
	    }
	}

	if ($match_description) {
	    foreach my $orf_id (keys %descr) {
		if ($descr{$orf_id}=~ /^$query$/i) {
		    $found = 1;
		    &PrintInfo($query, $orf_id{$key});
		}
	    }
	}
#	if (defined($orf_id{uc($query)})) {
#	    $found = 1;
#	    &PrintInfo($query,$orf_id{uc($query)});
#	}
    } else {
	foreach $key (keys %orf_id) {
	    if ($key =~ /$query/i) {
		$found = 1;
		&PrintInfo($query, $orf_id{$key});
		
	    }
	}
	if ($match_description) {
	    foreach my $orf_id (keys %descr) {
#		warn join "\t", $orf_id, $descr{$orf_id}, "\n";
		if ($descr{$orf_id}=~ /$query/i) {
		    $found = 1;
		    &PrintInfo($query, $orf_id);
		}
	    }
	}
    }

    #### send a warning when the query did not match anything
    unless ($found) {
	&PrintWarning($query);
    }

}


#### end of verbose
if ($verbose) {
    $done_time = $date = `date '+%d/%m/%y %H:%M:%S %Z'`;
    print $out ";Job started $start_time";
    print $out ";Job done    $done_time";
}

###### close output file ######
close $out unless ($outputfile eq "");


exit(0);

################################################################
################### subroutine definition ######################
################################################################

################################################################
#### print header
sub Header {
    print $out ";", join ("\t", 
			  "orf_id",
			  "name",
			  "chr",
			  "strand",
			  "left",
			  "right",
			  "description [synonyms]"
			  );
    unless ($no_query) {
	print $out "\tquery";
    }
    print $out "\n";
}

################################################################
#### print information for one ORF
sub PrintInfo {
    my ($query, $orf_id) = @_;
    print $out join ("\t", 
		     $orf_id,
		     $name{$orf_id},
		     $chr{$orf_id},
		     $strand{$orf_id},
		     $left{$orf_id},
		     $right{$orf_id},
		     $descr{$orf_id}
		     );
    if (defined(@{$synonyms{$orf_id}})) {
	print $out " [", join (";", @{$synonyms{$orf_id}}), "]";
    }
    unless ($no_query) {
	print $out "\t$query";
    }    
    print $out "\n";
}

################################################################
#### print warning
sub PrintWarning {
    my ($query) = @_;
    print $out join ("\t", 
		     ";WARNING",
		     $query,
		     "no info"), "\n";
}

################################################################
#### print full help message
sub PrintHelp {
  open HELP, "| more ";
  print HELP <<EnfOfHelp;
NAME
	orf-info

USAGE
	orf-info -org organism -q query
	orf-info -org organism -q query1 -q query2 -q query3 ...
	orf-info -org organism i query_file

DESCRIPTION
	Returns the information about ORFs specified either by their
	ORF identifier, or by any supported synonym.

CATEGORY
	genomics

OPTIONS
	-h	display full help message
	-help	display options
	-v	verbose
	-org	organism
		Supported organisms :
$supported_organisms
	-q	query. can be reiterated within the same command line
	-i	query file
	-o	output file
	-full	full match only (no substring matching)
	-noquery	
		do not print the query at the beginning of each line
	-descr	match queries against the description 
		(in addition to gene ID and  names)
QUERY
	The simplest way to enter a query is with the -q option :
	    the query can be a ORF identifier 
		orf-info -org yeast -q YML115C
	    or a gene name
		orf-info -org yeast -q arg81
		
	Regular expressions can be used in the query. In this case, it is safer to 
	quote the query
		orf-info -org yeast -q 'arg.*'
		orf-info -org yeast -q '.*4'
		
	The search is case insensitive.
	
	Several queries can be combined on the command line by
	iterative use of the -q command :
		orf-info -org yeast -q pho5 -q pho81 -q pho11

	Alternatively, a list of queries can be provided in a text
	file. The first word of each line is considered as a new
	query.
		orf-info -org yeast -i query_file.txt

SYNONYMS
	It often happens that a gene bears several names. 
	orf-info will look for all synonyms of the query.
		orf-info -org yeast -q nil1 
	will provide the information about its synonym GAT1.

WEB VERSION
	http://www.ucmb.ulb.ac.be/bioinformatics/rsa-tools/
EnfOfHelp
  close HELP;
  exit(0);
}

################################################################
#### display short help message
sub PrintOptions {
  open HELP, "| more";
  print HELP <<End_short_help;
orf-info options
----------------
-h		display full help message
-help		display options
-v		verbose
-org		organism
	Supported organisms :
$supported_organisms
-i		query file
-o		output file
-q		query (can be reiterated on the same command line)
-full		full match only (no substring matching)
-noquery	do not print the query at the beginning of each line
-descr		match queries against the description 
End_short_help
  close HELP;
  exit;
}

################################################################
#### read arguments
sub ReadArguments {
    foreach $a (0..$#ARGV) {
	### verbose ###
	if ($ARGV[$a] eq "-v") {
	    $verbose = 1;
	    
	    ### detailed help
	} elsif ($ARGV[$a] eq "-h") {
	    &PrintHelp;
	    
	    ### list of options
	} elsif ($ARGV[0] eq "-help") {
	    &PrintOptions;
	    
	    #### organism
	} elsif ($ARGV[$a] eq "-org") {
	    $organism_name =$ARGV[$a+1];
	    
	    #### full match only
	} elsif ($ARGV[$a] eq "-full") {
	    $full = 1;
	    
	    #### match query against description
	} elsif ($ARGV[$a] =~ /^-desc/) {
	    $match_description = 1;
	    
	    #### don't print the query in output
	} elsif ($ARGV[$a] eq "-noquery") {
	    $no_query = 1;
	    
	    ### input file ###
	} elsif ($ARGV[$a] eq "-i") {
	    $inputfile = $ARGV[$a+1];
	    
	    ### query ###
	} elsif ($ARGV[$a] eq "-q") {
	    push(@queries, $ARGV[$a+1]);
	    
	    ### output file ###
	} elsif ($ARGV[$a] eq "-o") {
	    $outputfile = $ARGV[$a+1];
	}
    }
}

################################################################
#### verbose
sub Verbose {
    if ($verbose) {
	print $out "; orf-info ";
	&PrintArguments($out);
	
	printf $out "; %-14s\t%s\n", "organism", $organism_name;
	print $out "; Output file	$outputfile\n" if ($outputfile);
	print $out "; Query file	$inputfile\n" if ($inputfile);
	print $out "; Queries\n;\t";
	print $out join ("\n;\t",@queries), "\n";
	print $out "; Match queries against description\n" if ($match_description);
	print $out "; Full match\n" if ($full);
	print $out "\n";
    }
}
