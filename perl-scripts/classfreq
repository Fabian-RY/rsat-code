#!/usr/bin/perl
if ($0 =~ /([^(\/)]+)$/) {
    push (@INC, "$`lib/");
}
require "RSA.lib";


$start_time = `date '+%d/%m/%y %H:%M:%S %Z'`;

##### help #####
if ($ARGV[0] eq "-h") {
  open HELP, "| more";
  print HELP "
NAME
	classfreq

	First version dates from July 1997
	by Jacques van Helden (jvanheld\@ucmb.ulb.ac.be).

DESCRIPTION
	This script takes a group of numbers (real or integers) and outputs
	their distribution among classes. 

CATEGORY
	statistics

USAGE
	classfreq [-i inputfile] [-o outputfile] [-ci class_interval] [-min #][-max #][-s][-p]

INPUT
	Any text file containing numbers. Will be read as a number any word 
	containing only digits, plus optionnally a dot (decimal separator), 
	and a sign (- or +). Scientific notation (ex: 3.5E-7) is also supported. 
	Words containing alphabetical characters (except e or E for scientific 
	notation) are not taken into account, even if they include digits. 

	Lines beginning with a semicolon (;) are ignored (this allows to 
	include comments in the input file).

OUTPUT
	Results are printed as one line per class, with the following information:
	- limits of the class (in the form [lower, upper[).
        - class center
	- absolute frequency
        - cumulated frequency (inclusive)
        - inverted cumulated frequency (inclusive)
        - relative frequency
        - cumulated relative frequency (inclusive)
        - inverted cumulated relative frequency (inclusive)

	With the option -v, the list of class frequencies is followed by a 
	short statistical report on the data.

	Within each class are counted all numbers that are 
	- greater or equal to the lower limit, and 
	- strictly smaller than the upper limit of the class
	(lowerlimit <= x < upperlimit).

	Cumulative frequencies are inclusive, i.e. :
	cum	   is the count of (x <= upperlimit)
	inv_cum	   is the count of (x >= lowerlimit)

ARGUMENTS
        -h      (must be first argument) display full help message
        -help   (must be first argument) display options
	-v	verbose
	-i inputfile
		Only the numbers will be read, other words are ignored.
		if not specified, the standard input is used.
		This allows to place the command within a pipe.
	-o outputfile
		if not specified, the standard output is used.
		This allows to place the command within a pipe.
	-ci	class interval. If not specified, takes the value
			(max - min)/20
		so that 21 classes are specified. 
	-min #	numbers strictly smaller than # are not taken into account. 
		# also determines the lower limit of the first class.
	-max #	numbers strictly greater than # are not taken into account.
	-from #	inferior limit for the classes to display
		values lower than this limit are however taken into account
		in the calculation of statistics (avg, variance, ...) and of 
		class frequencies (In contrast with the -min option).
	-to #	superior limit for the classes to display
		values higher than this limit are however taken into account
		in the calculation of statistics (avg, variance, ...) and of 
		class frequencies (In contrast with the -max option).
	-v	verbose.
		Return some statistics over the data : 
		- total # of elements, 
		- avg of the data 
		- std, 
		- min, 
		- max, 
		If -min or -max options are used, the statistics only take 
		into account the numbers falling into this range. 

EXAMPLES
	To get the distribution of all numbers x such that 0 <= x <= 1000, 
	grouped within classes of interval 100 :
		classfreq -i myfile -ci 100 -min 0 -max 1000
	Note that the limits of the last class will be [1000, 1100[, though 
	this class will only contain the occurences of 1000 (since numbers 
	greater than 1000 are discarded).

	To count all occurences of the number 23.54 within the file 
	myfile :
		classfreq -i myfile -ci 1 -min 23.54 -max 23.54

";
  close HELP;
  exit(0);
}

if ($ARGV[0] eq "-help") {
  open HELP, "| more";
  print HELP "classfreq options
-----------------
-h      (must be first argument) display full help message
-help   (must be first argument) display options
-i      input file
-o      output file
-v      verbose
-ci	class interval. 
-min #	minimum value
-max #	maximum value
-from	inferior limit of classes to display
-to	superior limit of classes to display
-v	verbose.
";
  close HELP;
  exit(0);
}


##### read arguments #####
foreach $a (0..$#ARGV) {
  if ($ARGV[$a] eq "-i") {
    $inputfile = $ARGV[$a+1];
  } elsif ($ARGV[$a] eq "-o") {
    $outputfile = $ARGV[$a+1];  
  } elsif ($ARGV[$a] eq "-v") {
    $verbose = 1;  


  } elsif ($ARGV[$a] eq "-ci") {
    $class_interval = $ARGV[$a+1];  

  } elsif (($ARGV[$a] eq "-min") && (&IsReal($ARGV[$a+1]))) {
    $usermin = $ARGV[$a+1];  

  } elsif (($ARGV[$a] eq "-max") && (&IsReal($ARGV[$a+1]))) {
    $usermax = $ARGV[$a+1];  

  } elsif (($ARGV[$a] eq "-from") && (&IsReal($ARGV[$a+1]))) {
    $display_from = $ARGV[$a+1];  

  } elsif (($ARGV[$a] eq "-to") && (&IsReal($ARGV[$a+1]))) {
    $display_to = $ARGV[$a+1];  



  }
}  


##### open input file #####
($in, $input_dir) = &OpenInputFile($inputfile);
$out = &OpenOutputFile($outputfile);

#die "HELLO", $inputfile, $in;

$count = 0;
$sum = 0;
$sumofsquares = 0;
@ListOfNumbers = ();
while($current_line = <$in>) {   
    next if ($current_line =~ /^;/); ### skip comment lines 
    while($current_line =~ /(\S+)(.*)/) {
	$word = $1;
	$current_line = $2;
	if ((IsReal($word)) 
	    && (($usermin eq "") || ($word >= $usermin))	
	    && (($usermax eq "") || ($word <= $usermax))
	    ) {
	    $freq{$word}++;
#	    push(@ListOfNumbers, $word);
	    $count++;
	    $sum += $word;
	    $sumofsquares += $word*$word;
	}
    }
}
close($in);

##### calculate min and max of the list of numbers ######
@values = sort {$a <=> $b} keys %freq;
$min = $values[0];
$max = $values[$#values];
#$min = &min(@ListOfNumbers);
#$max = &max(@ListOfNumbers);
$range = $max - $min;

##### check value of class interval #####
if ($class_interval eq "") {
    $class_interval = $range/20;
} 
if ($class_interval <= 0) {
  print "\tclass interval = $class_interval\n";
  print "\tError: class interval should be > 0\n";
  print "\tFor more info: classfreq -help\n";
  exit;
}

if ($usermin ne "") {
    $classmin = $usermin;
} else {
    $classmin = $class_interval * int($min/$class_interval);
    if ($classmin > $min) {
	$classmin -= $class_interval;
    }
}
if ($usermax ne "") {
    $classmax = $usermax;
} else {
    $classmax = $max;
}

if ($display_from eq "") {
    $display_from= $classmin;

}
if ($display_to eq "") {
    $display_to= $classmax;
}


##### make a list with the limits of classes #####
@ListOfClasses = ();
do {
  @ListOfClasses = (@ListOfClasses, $classmin);
  $classmin += $class_interval;
} until ($classmin > $classmax);


##### calculate the frequency of each class #####
foreach $c (0.. $#ListOfClasses) {
  $ListOfFrequencies[$c] = 0;
}

foreach $n (@values) {
#foreach $n (0..$#ListOfNumbers) {
    $c = 0;
    $found = 0;
    do {
	if ( ($n >= $ListOfClasses[$c]) &&
	     ($n <  $ListOfClasses[$c] + $class_interval)  )  {
	    $ListOfFrequencies[$c]+= $freq{$n};
#	if ( ($ListOfNumbers[$n] >= $ListOfClasses[$c]) &&
#	     ($ListOfNumbers[$n] <  $ListOfClasses[$c] + $class_interval)  )  {
#	    $ListOfFrequencies[$c]++;
	    $found++;
	}
	$c++;
    } until (($found == 1) || ($c > $#ListOfClasses));
}


##### print class frequencies #####
if ($verbose) {
  print $out ";[min\t";
  print $out "max[\t";
  print $out "center\t";
  print $out "freq\t";
  print $out "cum\t";
  print $out "inv_cum\t";
  print $out "rel_frq\t";
  print $out "rel_cum\t";
  print $out "rel_ic\n";
}
$cum = 0;
$rel_cum = 0;
$next_inv_cum = $count;
$inv_cum = $count;

$inv_rel_cum = 1;
$next_inv_rel_cum = 1;
foreach $c (0.. $#ListOfClasses) {
    ### calculate relative and cumulated frequencies
    $cum += $ListOfFrequencies[$c];
    $inv_cum = $next_inv_cum;
    $next_inv_cum -= $ListOfFrequencies[$c];
    if ($count > 0) {
	$rel = $ListOfFrequencies[$c]/$count;
	$rel_cum += $rel;
	$inv_rel_cum = $next_inv_rel_cum;
	$next_inv_rel_cum -= $rel;
    }

    ### print class result
    if (($ListOfClasses[$c] >= $display_from) && ($ListOfClasses[$c] <= $display_to))  {
	if (($ListOfClasses[$c] <= 1.0e-12) && 
	    ($ListOfClasses[$c] >= -1.0e-12)) {
	    $ListOfClasses[$c] =0;
	}
	if (($ListOfClasses[$c] + $class_interval <= 1.0e-13) && 
	    ($ListOfClasses[$c] + $class_interval >= -1.0e-13)) {
	    $ListOfClasses[$c] = - $class_interval;
	}
	$out_line = "";
	$out_line .= sprintf "%g", $ListOfClasses[$c];
	$out_line .= sprintf "\t%g",  $ListOfClasses[$c] + $class_interval;
	$out_line .= sprintf "\t%g",  $ListOfClasses[$c] + $class_interval/2;
	$out_line .= sprintf "\t$ListOfFrequencies[$c]";
	$out_line .= sprintf "\t$cum";
	$out_line .= sprintf "\t$inv_cum";
	if ($count > 0) {
	    $out_line .= sprintf "\t%6.5f", $rel;
	    $out_line .= sprintf "\t%6.5f", $rel_cum;
	    $out_line .= sprintf "\t%6.5f", $inv_rel_cum;
	}
	$out_line .= sprintf "\n";
	$out_line =~ s/ //g;
	print $out $out_line;
    }
}

##### print statistics #####
if ($verbose) {
  print $out ";Statistics:\n";
  print $out ";-----------\n";
  print $out ";Input file:\t$inputfile\n" unless ($inputfile eq "");
  print $out ";count: $count\n";
  if ($count > 0) {
    $avg = $sum/$count;
    $std = sqrt($sumofsquares/$count - $avg*$avg);
    if (avg > 1) {
      printf $out ";sum:	%.3f\n", $sum;
      printf $out ";avg:	%.3f\n", $avg;
      printf $out ";std:	%.3f\n", $std;
    } else {
      printf $out ";sum:	%f\n", $sum;
      printf $out ";avg:	%f\n", $avg;
      printf $out ";std:	%f\n", $std;
    }
  }
  print $out ";Min :          $min\n";
  print $out ";Max :          $max\n";
  printf $out ";Range :       %f\n",$max - $min;
  print $out ";Class interval:   $class_interval\n";
  print $out ";# of classes:  ",  $#ListOfClasses + 1, "\n";

  $done_time = `date '+%d/%m/%y %H:%M:%S %Z'`;
  print $out ";Job started $start_time";
  print $out ";Job done    $done_time";
}





###### close input file ######
close $in unless ($inputfile eq "");

###### close output file ######
close $out unless ($outputfile eq "");


exit(0);


########################## subroutine definition ############################

